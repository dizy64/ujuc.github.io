<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>잘 밤에 쓸데없는 생각하기...</title><link>http://ujuc.github.io/</link><description>Anythink, Everythink!</description><atom:link href="http://ujuc.github.io/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 01 Apr 2015 23:52:00 +0900</lastBuildDate><item><title>vim을 IDE처럼 만드는 법을 알아보자.</title><link>http://ujuc.github.io/2015/03/03/vim-to-ide/</link><description>&lt;p&gt;메일로 Github에서 흥하는 레포들을 소개해주는 서비스가 존재한다. 거기서 오랜만에
vim에 관련된 내용이&amp;nbsp;올라왔다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jez/vim-as-an-ide"&gt;jez/vim-as-an-ide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;뭐 특별한 것은 없어 보이지만, Vim을 설정하는 것들에대해 커밋을 통해서 작성해
뒀다. 그래서 더 좋다. 이렇게하면 나중에 누군가에게 vim을 설정하는 방법에 대해서
알려주는 방법에서도 좋을&amp;nbsp;듯함.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;아쉬운것&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt; 을 사용해서 플러그인을&amp;nbsp;설치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그냥 아쉽다. 다른 것들도 많다. &lt;a class="reference external" href="https://github.com/Shougo/neobundle.vim"&gt;NeoVundle&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;. 이정도가 내가 아는 플러그인
설치를 도와주는&amp;nbsp;것들이다.&lt;/p&gt;
&lt;p&gt;뭐 Vundle을 사용하는 방법을 안다면 쉽게 작업을 진행할 수 있으니 필요한 것들을
확인해서 설치하는게&amp;nbsp;필요할듯.&lt;/p&gt;
&lt;p&gt;다른 것들은 나도 보면서 배워야할 것들이다. 플러그인들이 많이 설치되는 것들을
설치해서 사용은 하고 있지만&amp;#8230; 그렇게 많은 기능들을 다 사용하지 않는 이상&amp;#8230;
조금씩 덜어내는 것도 필요할&amp;nbsp;듯.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 23:52:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-03:2015/03/03/vim-to-ide/</guid><category>vim</category><category>vimrc</category><category>ide</category></item><item><title>timesheet.js??</title><link>http://ujuc.github.io/2015/03/02/timesheet-js/</link><description>&lt;p&gt;놀다 보니 이것저것 보는 것들도 많다. 그런것들이라도 간단히&amp;nbsp;적어둬야지&amp;#8230;&lt;/p&gt;
&lt;p&gt;노트에다가 작성을 해놓고 넣어두는 것도 한 방법이지만, 봤을때 좋은거라 생각한다면
그것으로 작업이 가능하지 않을까&amp;nbsp;하여&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;timesheet.js&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;홈페이지: &lt;a class="reference external" href="https://github.com/sbstjn/timesheet.js"&gt;sbstjn/timesheet.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;손을 좀 대서 자세하게 보이거나 이것저것 손을 볼 수 있을&amp;nbsp;것같은데&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="" src="https://raw.githubusercontent.com/sbstjn/timesheet.js/master/screen.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;예제&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 쓸수 없다는게 rst의&amp;nbsp;단점&amp;#8230;&lt;/p&gt;
&lt;p&gt;그래서 &lt;a class="reference external" href="http://jsfiddle.net/fujstt3s/1/"&gt;예제&lt;/a&gt; 는 링크로&amp;#8230;. &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;특이점&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;소스파일로 되어있는기.. &lt;a class="reference external" href="http://haml.info/"&gt;haml&lt;/a&gt; 로 되어있고, &lt;a class="reference external" href="http://sass-lang.com/"&gt;sass&lt;/a&gt; 는 첨가.&lt;ul&gt;
&lt;li&gt;sass는 CSS를 더 변수, 함수, 확장 / 상속 등의 기능을 추가해서 쉽게 만들고,
쉽게 유지보수 할 수 있도록 되어있다고 한다. 여러 종류가 있다고&amp;#8230; &lt;a class="footnote-reference" href="#id6" id="id5"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;haml은 &lt;span class="caps"&gt;HTML&lt;/span&gt; abstraction markup language라고 하는걸 줄였다고, 작성을 해놨네.
&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 작성하기 더 쉽게 되어있긴한데&amp;#8230; 태그를 변수로 주는게&amp;nbsp;특이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;조금이나 더 짧게 쓰고 조금이나마 더 버전 관리가 쉽게 하도록 하는걸 보면, 점점
더 바닥을 아는 사람들이 없어져가고, 그것들을 알 수 있는 방법들도
없어져가는건 안좋은 점 중&amp;nbsp;하나다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://windtale.net/blog/why-i-choose-sass/"&gt;http://windtale.net/blog/why-i-choose-sass/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 22:21:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-02:2015/03/02/timesheet-js/</guid><category>javascript</category><category>JS</category></item><item><title>Clojure 개발 환경 구축</title><link>http://ujuc.github.io/2015/03/01/clojure-development-env/</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2&gt;1.&amp;nbsp;개요&lt;/h2&gt;
&lt;p&gt;Clojure를 공부하려하는데&amp;#8230; 이것 저것 작업을 하려하니 짧은 기억력으로는 계속
봐야되는지라. 이렇게 작성을 해놔야 나중에 볼 듯하고, 또 어딘가에 넣어둔다고해도
찾을때는 잘 못찾는&amp;nbsp;지라&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;1.&amp;nbsp;전재&lt;/h3&gt;
&lt;p&gt;OSX를 기반으로 한다. &lt;cite&gt;brew&lt;/cite&gt; 를 패키지로 모두 작성된다. 만약 Linux에서
작업하게되면 관련해서 문서는 추가로 작성할 예정임. 문제는 언제될지&amp;nbsp;모르겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;2. 설치할&amp;nbsp;것들&lt;/h2&gt;
&lt;div class="section" id="jdk"&gt;
&lt;h3&gt;1. &lt;span class="caps"&gt;JDK&lt;/span&gt;&amp;nbsp;설치&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;검색해서 JDK를 다운받으면&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;Apple에서 기본적으로 주는걸 써도 될&amp;nbsp;듯.&lt;/li&gt;
&lt;li&gt;8으로 설치했는데 작업하는데는 아무런&amp;nbsp;이상없다.&lt;/li&gt;
&lt;li&gt;그래서 그냥&amp;nbsp;쓴다.&lt;/li&gt;
&lt;li&gt;그리고`brew-cask` 에 JDK가&amp;nbsp;있다는&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="leiningen"&gt;
&lt;h2&gt;2. Leiningen&amp;nbsp;설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;brew install leiningen&lt;/cite&gt; 으로&amp;nbsp;설치.&lt;/li&gt;
&lt;li&gt;딱히 설정할 것&amp;nbsp;없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lein"&gt;
&lt;h2&gt;3. lein&amp;nbsp;사용&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이거 쓸려고 넘많이&amp;nbsp;적었다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
$ lein
    Leiningen is a tool for working with Clojure projects.

    Several tasks are available:
    change              Rewrite project.clj by applying a function.
    check               Check syntax and warn on reflection.
    classpath           Print the classpath of the current project.
    clean               Remove all files from project's target-path.
    compile             Compile Clojure source into .class files.
    deploy              Build and deploy jar to remote repository.
    deps                Download all dependencies.
    do                  Higher-order task to perform other tasks in succession.
    help                Display a list of tasks or help for a given task.
    install             Install the current project to the local repository.
    jar                 Package up all the project's files into a jar file.
    javac               Compile Java source files.
    new                 Generate project scaffolding based on a template.
    plugin              DEPRECATED. Please use the :user profile instead.
    pom                 Write a pom.xml file to disk for Maven interoperability.
    release             Perform :release-tasks.
    repl                Start a repl session either with the current project or standalone.
    retest              Run only the test namespaces which failed last time around.
    run                 Run a -main function with optional command-line arguments.
    search              Search remote maven repositories for matching jars.
    show-profiles       List all available profiles or display one if given an argument.
    test                Run the project's tests.
    trampoline          Run a task without nesting the project's JVM inside Leiningen's.
    uberjar             Package up the project files and dependencies into a jar file.
    update-in           Perform arbitrary transformations on your project map.
    upgrade             Upgrade Leiningen to specified version or latest stable.
    vcs                 Interact with the version control system.
    version             Print version for Leiningen and the current JVM.
    with-profile        Apply the given task with the profile(s) specified.

    Run `lein help $TASK` for details.

    Global Options:
      -o             Run a task offline.
      -U             Run a task after forcing update of snapshots.
      -h, --help     Print this help or help for a specific task.
      -v, --version  Print Leiningen's version.

    See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
    mixed-source, templates, and copying.
&lt;/pre&gt;
&lt;div class="section" id="project"&gt;
&lt;h3&gt;1. project&amp;nbsp;생성&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein new myproject
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;project.clj&lt;/cite&gt; 에 프로젝트에 관련된 내용들을 작성한다.&lt;ul&gt;
&lt;li&gt;필요한 것들이 있다면 여기다가 차곡차곡&amp;nbsp;넣어준다.&lt;/li&gt;
&lt;li&gt;그리고 이곳에 &lt;cite&gt;main&lt;/cite&gt; 으로 사용할 코드의 위치를 작성해 줘야된다.&lt;ul&gt;
&lt;li&gt;키워드는 &lt;cite&gt;:main&lt;/cite&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;2. 의존하는 라이브러리&amp;nbsp;다운로드&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein deps
&lt;/pre&gt;
&lt;p&gt;위에서 작성해준 패키지들을 받아와서 실행해준다. 그러니 왠만해서는 설치하고&amp;nbsp;하자.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;3. 코드&amp;nbsp;작성&lt;/h3&gt;
&lt;p&gt;&lt;cite&gt;src/myproject/core.clj&lt;/cite&gt; 가 있다. 이곳에다가 코드를 작성해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;4.&amp;nbsp;실행&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein run
&lt;/pre&gt;
&lt;p&gt;쉽게 실행해서 나오는 것을 볼 수 있다. 뭐&amp;nbsp;간단하네&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;5.&amp;nbsp;패키징&lt;/h3&gt;
&lt;p&gt;역시 Java라고 해야될까&amp;#8230; jar 로 만들어두면 멀티 플랫폼에서도 작동이 가능하다는
것이지. 그리고 그것을 묶어서 보여준다. 나중에가서 설정을 좀 해줘야되는 부분이
발생하겠지만, 지금은 그렇게까지는 나올 필요가&amp;nbsp;없으니&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein uberjar
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;6. 라이브러리&amp;nbsp;검색&lt;/h3&gt;
&lt;p&gt;필요한 라이브러리들을 검색 하는건데&amp;#8230; 검색하는게 더 빠를듯&amp;#8230; 너무 많이
나온다. 그리고 가끔 인덱스를 업데이트를 해주긴 해야되는데&amp;#8230; 오래걸려&amp;#8230;
너무&amp;nbsp;오래&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein search ring
&lt;/pre&gt;
&lt;p&gt;불편하게&amp;#8230; 페이지별로 나오니. 이름은 정확히 입력하자. 그리고 동일한 페키지
이름으로 버전들이 쭉~~ 나오니 그것도하나 염두해둘 것&amp;#8230; 버전 정보는 명령어를
하나더 쳐서 확인하게 해야지&amp;#8230; 저렇게 다 보여줄 필요가&amp;nbsp;있나&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;7. 패치&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;자동으로 잡아준다. 그래도 추가해야된다면 &lt;cite&gt;proejct.clj&lt;/cite&gt; 에 키워드
&lt;cite&gt;:extra-classpath-dirs&lt;/cite&gt; 를 사용하여 리스트 형식으로 추가해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;8. 인터프리터&amp;nbsp;실행&lt;/h3&gt;
&lt;p&gt;인터프리터를 실행해서 작성한 내요이 맞는지 확인이&amp;nbsp;가능하다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein repl
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;참고&amp;nbsp;사이트!&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://english4u.kr/clojure-memo/index.html"&gt;Clojure 강좌 -&amp;nbsp;김영태&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;emacs로 되어있는 부부만&amp;nbsp;제외했&amp;#8230;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:30:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-01:2015/03/01/clojure-development-env/</guid><category>clojure</category><category>개발 환경</category><category>lein</category></item><item><title>oh-my-vim 설치후 오류 (OSX)</title><link>http://ujuc.github.io/2015/02/26/oh-my-vim-error-osx/</link><description>&lt;p&gt;&lt;a class="reference external" href="https://github.com/liangxianzhe/oh-my-vim"&gt;oh-my-vim&lt;/a&gt; 으로 vim 플러그인 설정에 관련된 기본 프로그램을 바꿨다 (이것저것
변경하고 있긴하다만&amp;#8230;). 달라진게 없다. 좀 더 화려해지고 플러그인들로 인해서
IDE급으로 에디터가 변경됐을 뿐이다. 단지 80라인 와랩이&amp;nbsp;필요했을뿐인데&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그렇게 쓰다보니 실행할때마다 에러가&amp;nbsp;뜬다.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
neocomplete does work this version of Vim.
It requires &amp;quot;if_lua&amp;quot; enabled Vim(7.3.885 or above).
&lt;/pre&gt;
&lt;p&gt;혹시나 해서 검색을 해봤다. 매번 실행할 때마다 엔터 3번은 너무&amp;nbsp;오래걸려서&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Shougo/neocomplete.vim/issues/237"&gt;neocomplete.vim - Vim version and lua&lt;/a&gt; 에서는 실행후 &lt;cite&gt;:version&lt;/cite&gt; 으로 &lt;cite&gt;lua&lt;/cite&gt; 가
&lt;cite&gt;-&lt;/cite&gt; 인지 &lt;cite&gt;+&lt;/cite&gt; 인지 확인을 하라고 말을&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;cite&gt;-lua&lt;/cite&gt; 면 &lt;cite&gt;lua&lt;/cite&gt; 사용 옵션이 빠져있는 것이 되기에 vim 설치시 그에 대한
옵션을 설정해줘야된다는&amp;nbsp;말을&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OSX&lt;/span&gt; 사용자들에게만 나온는 것같은데&amp;#8230; Linux에 대한 오류가 없는&amp;nbsp;걸보면&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그것을 수정하는 방법은 &lt;cite&gt;brew&lt;/cite&gt; 로 설치할때 옵션을 걸어주고 설치하면 된다.
물론 설치했다면, 다시 설치하면된다. 난 삭제하고 다시 설치&amp;#8230; (적다보니&amp;#8230; 자동화
스크립트에 작성해둔거 변경을&amp;nbsp;해줘야겠다&amp;#8230;)&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install vim --with-cscope --with-lua --override-system-vim
&lt;/pre&gt;
&lt;p&gt;설치해주면된다. 그러면 자연스럽게 넘어가고 에러는 밑으로 나올꺼니 엔터칠 일이&amp;nbsp;줄었다.!!!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:14:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-26:2015/02/26/oh-my-vim-error-osx/</guid><category>vim</category><category>setting</category></item><item><title>Pycharm에서 iPython notebook 사용</title><link>http://ujuc.github.io/2015/02/23/using-ipython-notebook-on-pycharm/</link><description>&lt;p&gt;Pycharm iPython notebook 지원은 4.0에서부터 지원하기 시작했다. 아직 버전업이
안됐으니&amp;nbsp;작년인듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;iPython을 설치하고 Pycharm에서 설치하려고 봤더니 제대로 돌아가질 않는다.
그렇다고 오류가 보이지도 않아서 직접 터미널에서&amp;nbsp;쳤더니&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;패키지가 없어서 안된다!!!&lt;/strong&gt; 라는 비명을 볼 수&amp;nbsp;있었다.&lt;/p&gt;
&lt;p&gt;설치해줘야되는 패키지는 &lt;cite&gt;pyzmq&lt;/cite&gt;, &lt;cite&gt;tornado&lt;/cite&gt;, (&lt;cite&gt;certifi&lt;/cite&gt; 는 &lt;cite&gt;torando&lt;/cite&gt; 설치시 같이
설치가되니 넘어간다.). 편한 방법으로 설치해주고 작동시키면 돌아가는 것을 확인할
수&amp;nbsp;있다만&amp;#8230;&lt;/p&gt;
&lt;p&gt;Pycharm의 iPython notebook 입력기 UI가 너무 안좋다. 그냥 서버를 띄우고 Web에서
작동하는 것이 입력하기도 쉽고 값들을 확인하면서 작성하기가 더 쉽게 되어있으니
사용자가 알아서&amp;#8230; 나는&amp;nbsp;안쓸꺼임&amp;#8230;&lt;/p&gt;
&lt;p&gt;아마 업데이트 하면&amp;#8230; 괜찮아질꺼야&amp;#8230;&amp;nbsp;그럴꺼야&amp;#8230;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:07:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-23:2015/02/23/using-ipython-notebook-on-pycharm/</guid><category>Pycharm</category><category>iPython</category><category>notebook</category></item><item><title>OpenStack Commit</title><link>http://ujuc.github.io/2015/02/13/openstack-commit/</link><description>&lt;p&gt;기본적인 흐름은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 보고서 따라하면 쉽게 작업을 할 수 있다.
그런데&amp;#8230;. 왜이리&amp;nbsp;어려운거지&amp;#8230;.&lt;/p&gt;
&lt;img alt="" src="http://docs.openstack.org/infra/manual/_images/code_review.png" /&gt;
&lt;p&gt;신경 써야될 곳은 파란색으로 되어있는 곳만 신경 쓰면되는 그런&amp;#8230; 어렵지 않을
것같아&amp;nbsp;시작&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;준비 해야될&amp;nbsp;것&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://launchpad.net/+login"&gt;Launchpad&lt;/a&gt; 계정&lt;ul&gt;
&lt;li&gt;버그리포팅을 위해서는 Launchpad 계정이&amp;nbsp;있어야한다.&lt;/li&gt;
&lt;li&gt;그리고 왠만한 OpenID를 이걸로 다 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org"&gt;OpenStack Review&lt;/a&gt; 가입&lt;ul&gt;
&lt;li&gt;리뷰를 무조건&amp;nbsp;타야된다&amp;#8230;&lt;/li&gt;
&lt;li&gt;그러니&amp;nbsp;만들어야&amp;#8230;.&lt;/li&gt;
&lt;li&gt;그리고 ssh key등록을&amp;nbsp;해두는게&amp;#8230;&lt;/li&gt;
&lt;li&gt;그리고 메일링은 꺼두는게&amp;#8230; 너무&amp;nbsp;많이와&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="individual-contributor-license-agreement"&gt;
&lt;h2&gt;Individual Contributor License Agreement&amp;nbsp;결재&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/#/settings/agreements"&gt;Individual Contributor License Agreement&lt;/a&gt; 간단하게&amp;nbsp;작성하고..&lt;/li&gt;
&lt;li&gt;회사 대신 기여하거나 단체로 한다면 &lt;a class="reference external" href="https://secure.echosign.com/public/hostedForm?formid=56JUVGT95E78X5"&gt;Corporate Contributor License Agreement&lt;/a&gt;
도 한장&amp;#8230; 작성하고 보니 난 이걸&amp;nbsp;왜했지&amp;#8230;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="git-review"&gt;
&lt;h2&gt;&lt;cite&gt;git-review&lt;/cite&gt; 설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;맥은 그냥 &lt;cite&gt;brew&lt;/cite&gt; 로 통일시켜서 설치하는게&amp;nbsp;편한듯&amp;#8230;&lt;/li&gt;
&lt;li&gt;문서상으로는 &lt;cite&gt;pip&lt;/cite&gt; 로 설치하라고&amp;nbsp;했지만&amp;#8230;&lt;/li&gt;
&lt;li&gt;설치하고 제대로 됐는지 확인을 하기위해서는&lt;ul&gt;
&lt;li&gt;하나를&amp;nbsp;클론하고&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;git review -s&lt;/cite&gt; 를 해서 &lt;cite&gt;review.openstack.org&lt;/cite&gt; 에 제대로 접속했는지를 체크를&amp;nbsp;해준다.&lt;/li&gt;
&lt;li&gt;이때 &lt;cite&gt;gitreview.username&lt;/cite&gt; 을 &lt;cite&gt;.gitconfig&lt;/cite&gt; 파일에 작성해두지 않았다면
설정하라고&amp;nbsp;뜸.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;작업&amp;nbsp;플로워&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;버그일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;우선 &lt;cite&gt;bugs.launchpad.net/&amp;lt;projectname&amp;gt;&lt;/cite&gt; 으로 접속하여 버그 리포팅.&lt;ul&gt;
&lt;li&gt;이때 4가지로 테스크가 나뉘는데,&lt;ol class="arabic"&gt;
&lt;li&gt;새로운 버그 확인: &amp;quot;New&amp;quot;로 표기된 버그를 &amp;quot;Confirmed&amp;quot;로 변경 가능한 상태.
거의 초기를 말한다고&amp;nbsp;보면됨.&lt;/li&gt;
&lt;li&gt;버그 수정 : 버그를 할당하고, &amp;quot;In Progress&amp;quot;로&amp;nbsp;등록.&lt;/li&gt;
&lt;li&gt;리뷰중 : &amp;quot;Incomplete&amp;quot;로 표기되고 리뷰가 진행되는 상태를 말함. 최대
4주까지 걸린다고&amp;nbsp;함.&lt;/li&gt;
&lt;li&gt;버그가 또다시 발견된 경우 : 그렇다고함&amp;#8230; (뭐라말하기가&amp;#8230; 그냥 나같은
경우엔 리오픈으로 적고 프로세스&amp;nbsp;해버림&amp;#8230;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커밋할때 버그 진행상태를 남겨둘 수 있음. 자세한건 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages#Including_external_references"&gt;Including external
references&lt;/a&gt; 를&amp;nbsp;보면됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;청사진으로 새로운 기능을 붙일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이건 그냥 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Blueprints"&gt;Blueprints - wiki&lt;/a&gt; 를&amp;nbsp;보자.&lt;/li&gt;
&lt;li&gt;관심 없고, 내가 딱히 추가할 내용도 별로 없어서&amp;#8230; 우선은..&amp;nbsp;빈칸&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;변경을&amp;nbsp;시작해볼까~~~&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;첫 클론을 떠온거라면 상관없지만&amp;#8230; 뜬지 꽤됐으면 업스트림이랑 코드를 맞춰줘야
된다.&lt;ul&gt;
&lt;li&gt;안하면 일 두번하는 생긴다&amp;#8230; &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;내가 이글을 쓰고 있는 이유기도&amp;nbsp;하다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote update
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;span class="nv"&gt;$ &lt;/span&gt;git pull --ff-only origin master
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;그리고 브런치를 따는데, Blueprint는 &lt;cite&gt;bp/&amp;lt;blueprint_name&amp;gt;&lt;/cite&gt;, Bug는
&lt;cite&gt;bug/&amp;lt;bug-number&amp;gt;&lt;/cite&gt; 로&amp;nbsp;따주면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
git checkout -b TOPIC-BRANCH
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;변경 사항&amp;nbsp;커밋&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;제목은 50자 이내로 작성하고, 한줄 띄우고 내용을&amp;nbsp;작성해줘야된다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;Git commit messages&lt;/a&gt;&amp;nbsp;참고.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code text literal-block"&gt;
summary

brrrrrrbrrrrrra

&amp;lt;if blueprint&amp;gt;
Implements: blueprint &amp;lt;blueprint_name&amp;gt;
&amp;lt;if bug&amp;gt;
Closes-Bug: #&amp;lt;bug_number&amp;gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;Change-id&lt;/cite&gt; 는 &lt;cite&gt;git review&lt;/cite&gt; 로 올린뒤에 알아서 붙여주는거라 따로 적을 필요는&amp;nbsp;없다.&lt;/li&gt;
&lt;li&gt;리뷰에 반려가되어서 다시 커밋을 해야되는 경우에는 &lt;cite&gt;git commit &amp;#8212;amend&lt;/cite&gt;
오셤으로 해주면된다. 짧게 쓰면 &lt;cite&gt;git commit -a&lt;/cite&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;리뷰&amp;nbsp;등록&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;git reivew&lt;/cite&gt; 로 하면 &lt;cite&gt;review.openstack.org&lt;/cite&gt; 에 올라가 있는 것을 확인할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;변경사항이&amp;nbsp;있을때&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;커밋 메시지에 &lt;cite&gt;Change-Id&lt;/cite&gt; 가없을때는 붙여넣기 해준 다음 &lt;cite&gt;&amp;#8212;amend&lt;/cite&gt; 로&amp;nbsp;커밋.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나머지 자세한 것들은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 확인하도록하자. 이것도 뭐&amp;#8230; 내가
까먹으니까 작성한&amp;nbsp;것이기도하지만&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 22:29:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-13:2015/02/13/openstack-commit/</guid><category>OpenStack</category><category>commit</category></item><item><title>RAM 리뷰에서 본 버전별 특성</title><link>http://ujuc.github.io/2015/02/09/RAM-reive/</link><description>&lt;p&gt;RSS에서 &lt;a class="reference external" href="http://www.anandtech.com/show/8959/ddr4-haswell-e-scaling-review-2133-to-3200-with-gskill-corsair-adata-and-crucial"&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt; Haswell-E Scaling Review&lt;/a&gt;: 2133 to 3200 with G.Skill, Gorsair,
&lt;span class="caps"&gt;ADATA&lt;/span&gt; and Crucial 에서 글이올라왔길레&amp;nbsp;봤는데&amp;#8230;&lt;/p&gt;
&lt;p&gt;어떤분께서 그렇게 말씀하시던 RAM이 버전업되면서 달라지 내용과 다른 점이 보여서
머릿속 내용을 업데이트하는 겸해서 작성해두는&amp;nbsp;내용이다.&lt;/p&gt;
&lt;div class="section" id="dram-comparison"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DRAM&lt;/span&gt;&amp;nbsp;Comparison&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="31%" /&gt;
&lt;col width="36%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Low Voltage&lt;/th&gt;
&lt;th class="head"&gt;Standard Voltage&lt;/th&gt;
&lt;th class="head"&gt;Performance Voltage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.80V&lt;/td&gt;
&lt;td&gt;2.50V&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1.80V&lt;/td&gt;
&lt;td&gt;1.90V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.35V&lt;/td&gt;
&lt;td&gt;1.50V&lt;/td&gt;
&lt;td&gt;1.65V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.05V&lt;/td&gt;
&lt;td&gt;1.20V&lt;/td&gt;
&lt;td&gt;1.35V&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="bandwidth-comparison"&gt;
&lt;h2&gt;Bandwidth&amp;nbsp;Comparison&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="7%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="12%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Bus Clock&lt;/th&gt;
&lt;th class="head"&gt;Internal Rate&lt;/th&gt;
&lt;th class="head"&gt;Prefetch&lt;/th&gt;
&lt;th class="head"&gt;Transfer Rate&lt;/th&gt;
&lt;th class="head"&gt;Channel Bandwidth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;100-200 MHz&lt;/td&gt;
&lt;td&gt;100-200 MHz&lt;/td&gt;
&lt;td&gt;2n&lt;/td&gt;
&lt;td&gt;0.20-0.40 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;1.60-3.20 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;200-533 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;4n&lt;/td&gt;
&lt;td&gt;0.40-1.06 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;3.20-8.50 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;400-1066 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;8n&lt;/td&gt;
&lt;td&gt;0.80-2.13 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;6.40-17.0 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1066-2133 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;8n&lt;/td&gt;
&lt;td&gt;2.13-4.26 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;12.80-25.60 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;전압량은 진화될수록 더 낮아져 전력 소비량은 낮아졌고, 속도는 높아졌다. 그런데
어떤분은 전압 부분만 말씀하시던데&amp;#8230; 물론 이 내용은 특정 벤더사의 내용일 수도
있지만, 그래도 많은 부분 수정이 된것은 맞은듯. &lt;span class="caps"&gt;RAM&lt;/span&gt; PCB를 보면 특정 핀의 길이가
다른 핀보다 0.5mm만큼 긴것도 특이하다. 특히, 일정 구간에서는 늘어나는 모습을
보여주는&amp;nbsp;것도&amp;#8230;&lt;/p&gt;
&lt;p&gt;자세한건 기사내용을 보는 것이 더&amp;nbsp;좋은듯.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 21:47:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-09:2015/02/09/RAM-reive/</guid><category>RAM</category><category>HW</category><category>하드웨어</category></item><item><title>gitworkflows(7)에대한 이야기</title><link>http://ujuc.github.io/2015/02/02/gitworkflows7/</link><description>&lt;p&gt;페이스북의 &lt;a class="reference external" href="https://www.facebook.com/groups/kgugs"&gt;Korea Git User Group&lt;/a&gt; 에 &lt;tt class="docutils literal"&gt;gitworkflows&lt;/tt&gt; 에 대한 내용을
이야기하면서 슬라이드 &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt; 를 하나&amp;nbsp;올려주셨다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The gitworkflows(7)&amp;nbsp;illustrated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;정말 슬라이드를 이렇게까지 만들어주는건 정말 좋은듯. 특히 발표 당시에 그것을
못들었다고 해도 이 슬라이드만 보고도 알 수 있어서 더 좋음. 물론 발표용이라면
이것보다는 간단히 구성하는게&amp;nbsp;맞겠지만&amp;#8230;&lt;/p&gt;
&lt;p&gt;그렇다고 이걸 쓰고 싶지는 않다. 뭔가 복잡하다. 이게 어디서 좋은거지 라는&amp;nbsp;생각이든다.&lt;/p&gt;
&lt;p&gt;브런치 전략은 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 가 가장 쉽게 접근 할 수&amp;nbsp;잇는듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://git-scm.com/docs/gitworkflows/1.8.2.1"&gt;gitworkflows(7) Manual Page&lt;/a&gt; &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt; 를&amp;nbsp;확인하도록하자.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;원문이 일어로 보인다. &lt;a class="reference external" href="(http://www.slideshare.net/ktateish/gitworkflows7)"&gt;図解gitworkflows(7)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;문서가 1.8.2.1 이전과 이후로 많은 부분이 변경된 것으로 보인다. 그만큼
길어졌고 추가된 기능들이 많은것을 볼수 있으니, 관련해서 한번 찾아보는 것이
필요.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 00:13:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-02:2015/02/02/gitworkflows7/</guid><category>git</category><category>workflow</category></item><item><title>단장 완료</title><link>http://ujuc.github.io/2015/01/31/%EB%8B%A8%EC%9E%A5-%EC%99%84%EB%A3%8C/</link><description>&lt;p&gt;간단하게 작업을 진행해서 뭐 넣은 것 없는 그런페이지가&amp;nbsp;만들어진듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;여기다 아무리 무겁게 글을 써도 불러오는 속도가 빠르니 뭐 간다낳게 작성하기는&amp;nbsp;좋을듯.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Mon, 30 Mar 2015 00:00:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-01-31:2015/01/31/단장-완료/</guid><category>시작</category></item></channel></rss>