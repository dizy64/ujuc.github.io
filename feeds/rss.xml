<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>잘 밤에 쓸데없는 생각하기...</title><link>http://ujuc.github.io/</link><description>Anythink, Everythink!</description><atom:link href="http://ujuc.github.io/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 28 Mar 2016 00:00:00 +0900</lastBuildDate><item><title>OpenStack new project at 0321</title><link>http://ujuc.github.io/2016/03/27/openstack-new-project-at-0321/</link><description>&lt;p&gt;해당 내용 나온 곳 : &lt;a href="http://www.openstack.org/blog/2016/03/technical-committee-highlights-march-21-2016/"&gt;Technical Committee Highlights March 21,&amp;nbsp;2016&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="dragonflow"&gt;Dragonflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Dragonflow"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.openstack.org/developer/dragonflow/centralized_dragonflow.html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/dragonflow"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenStack® Neutron™ 에서 사용하는 fully distributed virtual&amp;nbsp;router.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; for routing IPv4 East-West&amp;nbsp;traffic&lt;/li&gt;
&lt;li&gt;Performance improvement for inter-subnet network by removing the amount of kernel layers (namespaces and their &lt;span class="caps"&gt;TCP&lt;/span&gt; stack&amp;nbsp;overhead)&lt;/li&gt;
&lt;li&gt;Scalability improvement for inter-subnet newtork by offloading L3 East-West routing from the Network Node to all Compute&amp;nbsp;Nodes&lt;/li&gt;
&lt;li&gt;Reliability improvement for inter-subnet network by removal of Network Node from the East-West&amp;nbsp;traffic&lt;/li&gt;
&lt;li&gt;Simplified virtual routing&amp;nbsp;management&lt;/li&gt;
&lt;li&gt;Support for all type dirvers &lt;span class="caps"&gt;GRE&lt;/span&gt;/&lt;span class="caps"&gt;VXLAN&lt;/span&gt;/&lt;span class="caps"&gt;LAN&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Support for centralized shared public network (&lt;span class="caps"&gt;SNAT&lt;/span&gt;) based on the legacy L3&amp;nbsp;implementation&lt;/li&gt;
&lt;li&gt;Support for centralized floating &lt;span class="caps"&gt;IP&lt;/span&gt; (&lt;span class="caps"&gt;DNAT&lt;/span&gt;) based on the legacy L3&amp;nbsp;implementation&lt;/li&gt;
&lt;li&gt;Support for &lt;span class="caps"&gt;HA&lt;/span&gt;, in case the connection to the legacy L3 &lt;span class="caps"&gt;HA&lt;/span&gt;. (Controller &lt;span class="caps"&gt;HA&lt;/span&gt; will be supported in the next&amp;nbsp;rlease).&lt;/li&gt;
&lt;li&gt;Support for centralized IPv6 based on the legacy L3&amp;nbsp;implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kuryr"&gt;Kuryr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Kuryr"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.openstack.org/developer/kuryr/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/kuryr"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker 네트워크&amp;nbsp;플러그인&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tacker"&gt;Tacker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Tacker"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tacker-docs.readthedocs.org/en/latest/index.html"&gt;Dcoumentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/tacker"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenStack service for &lt;span class="caps"&gt;NFV&lt;/span&gt; Orchestration with a general purpose &lt;span class="caps"&gt;VNF&lt;/span&gt; Manager to deploy and operate Virtual Network Functions (VNFs) and Network Services on an &lt;span class="caps"&gt;NFV&lt;/span&gt; Platform. It is based on &lt;span class="caps"&gt;ETSI&lt;/span&gt; &lt;span class="caps"&gt;MANO&lt;/span&gt; Architectural&amp;nbsp;Framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tacker-docs.readthedocs.org/en/latest/devref/monitor-api.html"&gt;Tracker Monitoring&amp;nbsp;Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tacker-docs.readthedocs.org/en/latest/devref/vnfd_template_parameterization.html"&gt;&lt;span class="caps"&gt;VNFD&lt;/span&gt; Template&amp;nbsp;Parameterization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ec2api"&gt;&lt;span class="caps"&gt;EC2API&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/EC2API"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/ec2-api"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;AWS&lt;/span&gt; &lt;span class="caps"&gt;EC2&lt;/span&gt; and &lt;span class="caps"&gt;VPC&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; support in standalone service for&amp;nbsp;OpenStack.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sun, 27 Mar 2016 22:47:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-03-27:2016/03/27/openstack-new-project-at-0321/</guid><category>openstack</category><category>big tent</category></item><item><title>pysftp 간략 사용기</title><link>http://ujuc.github.io/2016/02/29/pysftp-%EA%B0%84%EB%9E%B5-%EC%82%AC%EC%9A%A9%EA%B8%B0/</link><description>&lt;p&gt;처음 작성해놓은게 2013년 11월 달이다. 그때 사용한 것을 Evernote 정리중 확인하여 남겨뒀는데 새로 써야겠다. 다&amp;nbsp;바겼다.ㅡ.ㅡ&amp;#8230;.&lt;/p&gt;
&lt;p&gt;우선 이 패키지는 14년 5월 이후로 &lt;a href="https://pypi.python.org/pypi/pysftp"&gt;pypi 프로젝트&lt;/a&gt;에서는 업로드가 되고 있지 않으며, &lt;a href="https://bitbucket.org/dundeemt/pysftp"&gt;Project repo&lt;/a&gt;의 업로드는 이루워지고 있으며, 3.4까지 테스팅을 해봣단다. 파일만 올리기위해서 사용했던 라이브러리라 간단히 sftp를 이용하여 파일을 올리고 받기를 원한다면 괜찮을&amp;nbsp;듯.&lt;/p&gt;
&lt;h2 id="package"&gt;Package&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;SFTP를 python에서 직접 사용할 수 있도록 도와주며, 내부는 C로 구성되어있다.&lt;ul&gt;
&lt;li&gt;그 덕분에 설치시 &lt;code&gt;python-dev&lt;/code&gt; 페키지가 필요하다. (Ubuntu 리눅스&amp;nbsp;기준)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용하는 원격지에 ssh가 설치되어있는지 확인하자. 가끔 설치가 안되어있는 경우도&amp;nbsp;있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;사용법&lt;/h2&gt;
&lt;p&gt;간단히 적겠다. 모자르면 &lt;a href="http://pysftp.readthedocs.org/en/release_0.2.8/cookbook.html"&gt;문서&lt;/a&gt;를&amp;nbsp;보자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pysftp&lt;/span&gt;

&lt;span class="n"&gt;cinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;private_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/keyfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2222&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pysftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;cinfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mybackupfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myoriginfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;there&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이정도 주석 달다가 지웠다. 그것이 없어도 sftp를 사용하고 있다면 간단히 상요할 정도로 sftp 명령어에서 사용하는 내용들을&amp;nbsp;추가해놓았다.&lt;/p&gt;
&lt;p&gt;아직 pypi 측으로 버전업된 것이 반영되지 않아 새버전을 사용하고 싶으면 레포로 가서 작업을 진행하는 것을&amp;nbsp;추천한다.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Mon, 29 Feb 2016 21:55:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-02-29:2016/02/29/pysftp-간략-사용기/</guid><category>python</category><category>sftp</category><category>lib</category></item><item><title>git-vendor</title><link>http://ujuc.github.io/2016/02/20/git-vender/</link><description>&lt;p&gt;brew 업그레이드하다가 &lt;code&gt;git-vender&lt;/code&gt;라는 확장 프로그램이 보였다. 이건 뭐하는 넘인지 궁금해서&amp;nbsp;정리한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git-vender&lt;/code&gt;는 git 명령어를 이용하여 vendor 소스를 관리할 수 있도록 도와주는 확장이다. &lt;code&gt;git-subtree&lt;/code&gt;를 이용해서 소스를 체크 아웃하고 업데이트된 내용들을 관리할 수 있도록&amp;nbsp;해준다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git-vendor&lt;/code&gt;는 golang에서 vendor 종속성을 관리하는 패턴에 따라서 작업을 진행한다고&amp;nbsp;한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연관되는 소스들은 &lt;code&gt;vendor/&lt;/code&gt; 디렉토리에&amp;nbsp;저장된다.&lt;/li&gt;
&lt;li&gt;프로젝트에대한 전체 위치로 폴더가 생성되게&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;기본&amp;nbsp;명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git vendor add [--prefix &amp;lt;dir&amp;gt;] &amp;lt;name&amp;gt; &amp;lt;repository&amp;gt; [&amp;lt;ref&amp;gt;]&lt;/code&gt; : 새로운 vendor 연관 소스&amp;nbsp;추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git vendor list [&amp;lt;name&amp;gt;]&lt;/code&gt; : 현재 레포에 있는 vendor 연관 소스&amp;nbsp;보기.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git vendor update &amp;lt;name&amp;gt; [&amp;lt;ref&amp;gt;]&lt;/code&gt; : vendor 연관 소스&amp;nbsp;업데이트.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설치는&amp;nbsp;알아서&amp;#8230;&lt;/p&gt;
&lt;h3 id="_2"&gt;예제&lt;/h3&gt;
&lt;p&gt;Readme에 있는 예제를 가져왔다. 만들어보는 것보다 낫다 판단해서. 아직 &lt;code&gt;git-subtree&lt;/code&gt;를 모르겠는데&amp;nbsp;뭐&amp;#8230;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="c1"&gt;# Chekout github.com/brettlangdon/forge@v0.1.6 를 가져온다.&lt;/span&gt;
$ git vendor add forge https://github.com/brettlangdon/forge v0.1.6
+ git subtree add --prefix vendor/github.com/brettlangdon/forge --message &lt;span class="s1"&gt;&amp;#39;Add &amp;quot;forge&amp;quot; from &amp;quot;https://github.com/brettlangdon/   forge@v0.1.6&amp;quot;&lt;/span&gt;

&lt;span class="s1"&gt;git-vendor-name: forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-dir: vendor/github.com/brettlangdon/forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-repository: https://github.com/brettlangdon/forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-ref: v0.1.6&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; https://github.com/brettlangdon/forge v0.1.6 --squash
git fetch https://github.com/brettlangdon/forge v0.1.6
warning: no common commits
remote: Counting objects: 405, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;405&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 404
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;405/405&lt;span class="o"&gt;)&lt;/span&gt;, 68.31 KiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;227/227&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
From https://github.com/brettlangdon/forge
 * tag               v0.1.6     -&amp;gt; FETCH_HEAD
Added dir &lt;span class="s1"&gt;&amp;#39;vendor/github.com/brettlangdon/forge&amp;#39;&lt;/span&gt;

$ &lt;span class="c1"&gt;# 목록으로보면..&lt;/span&gt;
$ git vendor list
forge@v0.1.6:
    name:   forge
    dir:    vendor/github.com/brettlangdon/forge
    repo:   https://github.com/brettlangdon/forge
    ref:    v0.1.6
    commit: 3335840c5f0ad9e821006588f1b16a3385d9c318

$ &lt;span class="c1"&gt;# 업데이트를 하면&lt;/span&gt;
$ git vendor update forge v0.1.7
From https://github.com/brettlangdon/forge
    * tag               v0.1.7     -&amp;gt; FETCH_HEAD
Merge made by the &lt;span class="s1"&gt;&amp;#39;recursive&amp;#39;&lt;/span&gt; strategy.
 vendor/github.com/brettlangdon/forge/forge_test.go &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; ++
 vendor/github.com/brettlangdon/forge/scanner.go    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; ++++
 vendor/github.com/brettlangdon/forge/test.cfg      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; +
 &lt;span class="m"&gt;3&lt;/span&gt; files changed, &lt;span class="m"&gt;7&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;

$ &lt;span class="c1"&gt;# 확인하면..&lt;/span&gt;
$ git vendor list
forge@v0.1.7:
    name:   forge
    dir:    vendor/github.com/brettlangdon/forge
    repo:   https://github.com/brettlangdon/forge
    ref:    v0.1.7
    commit: 071c5f108e0af39bf67a87fc766ea9bfb72b9ee7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;관련&amp;nbsp;페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brettlangdon/git-vendor"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brettlangdon.github.io/git-vendor/"&gt;Manpage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sat, 20 Feb 2016 21:02:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-02-20:2016/02/20/git-vender/</guid><category>git</category><category>git-vendor</category><category>git-subtree</category><category>dependencies</category></item><item><title>1월 23일부터 2월 5일까지 OpenStack에서 나온 이야기들</title><link>http://ujuc.github.io/2016/02/16/1%EC%9B%94-23%EC%9D%BC%EB%B6%80%ED%84%B0-2%EC%9B%94-5%EC%9D%BC%EA%B9%8C%EC%A7%80-openstack%EC%97%90%EC%84%9C-%EB%82%98%EC%98%A8-%EC%9D%B4%EC%95%BC%EA%B8%B0%EB%93%A4/</link><description>&lt;p&gt;&lt;a href="http://www.openstack.org/blog/2016/02/openstack-developer-mailing-list-digest-20160205/"&gt;원&amp;nbsp;페이지&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;철지난 소식이긴하지만 읽을 거리가 많아서&amp;nbsp;번역해둔다.&lt;/p&gt;
&lt;h2 id="successbot-says"&gt;SuccessBot&amp;nbsp;Says&lt;/h2&gt;
&lt;p&gt;역: 해당 파트는 무언가 릴리즈가되면 메일링으로 메일을 쏘아주는 사람들의 글들을 모아둔&amp;nbsp;것.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;odyssey4me: OpenStack Ansible Liberty 12.0.5&amp;nbsp;릴리즈.&lt;/li&gt;
&lt;li&gt;stevemar: Devstack에서 Keystone &lt;span class="caps"&gt;API&lt;/span&gt; v3로 구성을&amp;nbsp;바꿈.&lt;/li&gt;
&lt;li&gt;boris-42: osprofiler 기능 잡 통과&lt;a href="https://review.openstack.org/#/c/269908/"&gt;^1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;odyssey4me: OpenStack Ansible Kilo 11.2.9 릴리즈&lt;a href="https://launchpad.net/openstack-ansible/+milestone/11.2.9"&gt;^2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;odyssey4me: OpenStack Ansible Liberty 12.0.6&amp;nbsp;릴리즈[^3[(https://launchpad.net/openstack-ansible/+milestone/12.0.6).&lt;/li&gt;
&lt;li&gt;전체보기: &lt;a href="https://wiki.openstack.org/wiki/Successes"&gt;Successes -&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cross-project-specs"&gt;Cross-Project&amp;nbsp;Specs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;모든 프로젝트에 접근할 수 있는 공통 정책 시나리오&lt;a href="https://review.openstack.org/#/c/245629/"&gt;^4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Web UI에서의 쿼리 구성&lt;a href="https://review.openstack.org/#/c/242852/"&gt;^5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api-guidelines"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;Guidelines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;더이상 서버 쪽의 traceback을 리턴하지 않습니다&lt;a href="https://review.openstack.org/#/c/183599"&gt;^6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;더 이상 서버쪽으로 tracebacks/stacktraces에 대한 반환값을 사용자에게 반환하지 않도록 안내&amp;nbsp;추가.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="service-type-vs-project-name-for-use-in-headers"&gt;Service Type vs. Project Name For Use In&amp;nbsp;Headers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Header를 서비스 타입으로 할지, 프로젝트 이름으로 할지에 대한 논의가&amp;nbsp;있었습니다.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; 마이크로버전에 대한 버전 추가에 대한 가이드라인 추가&lt;a href="https://review.openstack.org/#/c/243429"&gt;^7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;실험 단계의 API에 대한 가이드라인 추가&lt;a href="https://review.openstack.org/#/c/273158"&gt;^8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; 마이크로버전에 대한 클라이언트 상호작용 가이드라인 추가&lt;a href="https://review.openstack.org/#/c/243414"&gt;^9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;텀에 대한 각 프로젝트의 일반 이름 추가&lt;a href="https://review.openstack.org/#/c/243414"&gt;^10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; 사용자에게 더 좋게 제공할 수 있으며, &lt;a href="https://www.openstack.org/community/members/profile/1346"&gt;Dean Troyer&lt;/a&gt;에 의하면 &lt;span class="caps"&gt;API&lt;/span&gt; 워킹 그룹과 같이 올바른 방향으로 갈 수 있도록&amp;nbsp;선택해야합니다.&lt;/li&gt;
&lt;li&gt;엔트포인트와 &lt;span class="caps"&gt;API&lt;/span&gt; 서비스에 대한 기본 식별자(identifier)로서 서비스 타입은 잘 확립되어있고, 서비스 카탈로그가 제대로 작동하는 방법입니다. 서비스 타입에 따라 이동하는 방법이&amp;nbsp;있어야합니다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-January/085145.html"&gt;service type vs. project name for use in&amp;nbsp;headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;역: 뭔가 짧게 줄인게 더 이해가&amp;nbsp;안되네&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="openstack-ansible-without-containers"&gt;OpenStack Ansible Without&amp;nbsp;Containers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gyorgy가 새로운 OpenStack installer로 GPLv3 라이센스로 Ansible을 사용해서 발표했으며 여기에는 컨테이너는&amp;nbsp;빠져있다.&lt;/li&gt;
&lt;li&gt;이미 OpenStack에는 Ansible 프로젝트와 &lt;a href="https://wiki.openstack.org/wiki/Kolla"&gt;Kolla&lt;/a&gt; 가 있는데 왜 새로운 installer를 만들었을까?:&lt;ul&gt;
&lt;li&gt;컨테이너에 불필요한 복잡성&amp;nbsp;추가.&lt;/li&gt;
&lt;li&gt;패키지: pip 패키지와 배포판 패키지를 섞어 사용하고 있지 않음. 배포판 패키지는 init 스크립트, 적당한 시스템 사용자, 업그레이드 가능한 것들&amp;#8230;이 포함되어있는 것을&amp;nbsp;말함.&lt;/li&gt;
&lt;li&gt;Kevin Carter의 답장에서는 이 내용은 OpenStack Ansible 프로젝트에 포함되어있는 내용이라고&amp;nbsp;발혔다고&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너를 사용하지 않고 동시에 모든 서비스를 업그레이드를 한뒤 하나의 컨트롤러를 업데이트 하는건 까다롭고 깨질수도 있습니다. 롤백도&amp;nbsp;쉽구요.&lt;/li&gt;
&lt;li&gt;역: 제대로 번역을 못하겠어서 원본을 같이&amp;nbsp;첨부&lt;/li&gt;
&lt;li&gt;원: Without containers, upgrading a single controller can be tricky and disruptive since you have to upgrade every service at the same time. Rollbacks are also&amp;nbsp;easier.&lt;/li&gt;
&lt;li&gt;OpenStack Ansible 프로젝트에서 오늘(?) &lt;code&gt;is_metal=true&lt;/code&gt; 값을 이용해서 컨테이너 없이 배포가&amp;nbsp;가능합니다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-January/084963.html"&gt;OpensTack&amp;nbsp;installer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="release-countdown-for-week-r-8-feb-8-12"&gt;Release Countdown for Week R-8, Feb&amp;nbsp;8-12&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;집중:&lt;/li&gt;
&lt;li&gt;2주정도 전에 이번 사이클에서 non-client 라이브러리에 대한 릴리즈&amp;nbsp;완료&lt;/li&gt;
&lt;li&gt;3주정도 전에 클라이언트 라이브러리 릴리즈&amp;nbsp;완료&lt;/li&gt;
&lt;li&gt;프로젝트들은 모든 라이브러리 기능 작업 마무리에&amp;nbsp;집중.&lt;/li&gt;
&lt;li&gt;릴리즈&amp;nbsp;작업:&lt;/li&gt;
&lt;li&gt;릴리즈팀에서 업격하게 3주에서 M3전에 라이버리를 릴리즈 프리징을 할&amp;nbsp;것입니다.&lt;/li&gt;
&lt;li&gt;주요&amp;nbsp;일정:&lt;/li&gt;
&lt;li&gt;Non-client 라이브러리 릴리즈 완료: 2월&amp;nbsp;24일&lt;/li&gt;
&lt;li&gt;클라이언트 라이브러리 릴리즈 완료: 3월&amp;nbsp;2일&lt;/li&gt;
&lt;li&gt;Mitaka 3: 2월 29일 - 3월 4일 ( 기능 프리징과 소프트 문자 프리징&amp;nbsp;포함해서)&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-February/085705.html"&gt;Release countdown for week R-8, Feb&amp;nbsp;8-12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="no-open-core-in-2016"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;No Open Core&amp;#8221; in&amp;nbsp;2016&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenStack은 이름을 가지기 전, &amp;#8220;four opens&amp;#8221;라는 신념은 우리가 커뮤니티를 운영하는 방법을 정의하는데&amp;nbsp;만들어졌습니다.&lt;/li&gt;
&lt;li&gt;OpenStack이 시작하였던 2010년, 우리는 제품 코어를 오픈소스화하는 방법으로 불편한 커뮤니티 에디션과 &amp;#8220;엔터프라이즈 버전&amp;#8221;으로 내놓는 다른 오픈소스 클라우드 플랫폼(Eucalyptus)과는&amp;nbsp;달랐습니다.&lt;/li&gt;
&lt;li&gt;오늘날 우리는 &amp;#8220;엔터프라이즈 에디션&amp;#8221;을 할 수 없는 비영리 독립&amp;nbsp;재단입니다.&lt;/li&gt;
&lt;li&gt;현재 화원사들은 아파치 라이센스인 업스트림 프로젝트 위에 &amp;#8220;기업 제품&amp;#8221;을 만들 수 있습니다. 일부는 고유 구성요소에서 기능들을 보여줘야되는 드라이버로&amp;nbsp;되어있습니다.&lt;/li&gt;
&lt;li&gt;그럼 2016년 &amp;#8220;not do open core&amp;#8221;는 뭔가요? 어떤것은 가능하고 어떤것은 안되는&amp;nbsp;것인가요?&lt;/li&gt;
&lt;li&gt;Thierry Carrez는 OpenStack 공식 프로젝트들이 새롭게 변화하는 시간으로 받아 들일 것이라&amp;nbsp;믿습니다.&lt;/li&gt;
&lt;li&gt;그것은 제품에 대한 모든 기능들을 오픈 소스로&amp;nbsp;구현해야합니다.&lt;/li&gt;
&lt;li&gt;여러분이 모든 프로젝트를 사용하는 상용 기업의 독점 소프트웨어가 필요하다면, OpenStack 공식 프로젝트로 허용되지 않을 것입니다.&lt;ul&gt;
&lt;li&gt;하지만 이 프로젝트는 비공식 프로젝트로는 허용되며, 여전히 OpenStack 인프라에서 호스팅이&amp;nbsp;가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Doug Hellmann은 공식 OpenStack 프로젝트로 적용되는 &lt;a href="https://review.openstack.org/#/c/273756/"&gt;Poppy&lt;/a&gt;를 제출&amp;nbsp;하였습니다.&lt;/li&gt;
&lt;li&gt;컨텐트 제공 네트워크의 렙퍼인데, 오픈소스 솔루션이&amp;nbsp;없었스니다.&lt;/li&gt;
&lt;li&gt;공식 프로젝트가 될 수 있을까? 그럼 이게 오픈&amp;nbsp;코어인가?&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-February/085855.html"&gt;&amp;#8220;No Open Core&amp;#8221; in&amp;nbsp;2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-trouble-with-names"&gt;The Trouble with&amp;nbsp;Names&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A few issues have crept up recently with the service catalog, &lt;span class="caps"&gt;API&lt;/span&gt; headers, &lt;span class="caps"&gt;API&lt;/span&gt; end points, and even similarly named resources in different resources (e.g. backup), that are all circling around a key problem. Distributed teams and naming&amp;nbsp;collision.&lt;/li&gt;
&lt;li&gt;각 프로젝트는 OpenStack 네임스페이스에 git 저장소에의해 보장되는 고유 이름이&amp;nbsp;있습니다.&lt;/li&gt;
&lt;li&gt;Nova/Compute 와 같은 일반적인 이름을 가진 프로젝트 이름을 대체하려는 움직임이&amp;nbsp;있습니다:&lt;/li&gt;
&lt;li&gt;Service&amp;nbsp;catalog&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;headrs&lt;/li&gt;
&lt;li&gt;우리가 가질 수 있는&amp;nbsp;선택사항들:&lt;/li&gt;
&lt;li&gt;코드 이름을 사용하는 것: nova, glance, swift 과 같은.&lt;ul&gt;
&lt;li&gt;장점:  충돌 문제는&amp;nbsp;해결&lt;/li&gt;
&lt;li&gt;프로젝트에서 알고 있는 비밀 디코더 링이&amp;nbsp;필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공통된 이름에 대한 저장소.&lt;ul&gt;
&lt;li&gt;장점: 공통된 이름을 사용해서 어디서든 안전하게 사용할 수 있으며, 충돌에 대한 공포를 줄일 수&amp;nbsp;있습니다.&lt;/li&gt;
&lt;li&gt;단점: 다른 논쟁점이 있을&amp;nbsp;수도&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커뮤니티의 사람들은 공통 이름을 가지고서 저장소를 만들기를 바라고 있다. 어쩌면 가버넌트 &lt;a href="https://git.openstack.org/cgit/openstack/governance/tree/reference/projects.yaml"&gt;projects.yaml&lt;/a&gt;에 있지&amp;nbsp;않을까?&lt;/li&gt;
&lt;li&gt;이 목록은 기술 커밋들이 공식 프로젝트들에서 사용되는 것들만 포함하고 있습니다. 따라서 프로젝트에서만 공통 이름을 예약할 수&amp;nbsp;있습니다.&lt;/li&gt;
&lt;li&gt;OpenStack 클라이언트들은 이미 프로젝트에서 공통 이름으로&amp;nbsp;인코드했습니다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-February/085748.html"&gt;the trouble with&amp;nbsp;names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="annuncing-ekko-scalable-block-based-backup-for-openstack"&gt;Annuncing Ekko - Scalable Block-Based Backup for&amp;nbsp;OpenStack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ekko의 목적은 Nova 인스턴스의 증분 블록 레벨 백업과 복원을&amp;nbsp;제공합니다.&lt;/li&gt;
&lt;li&gt;중복되는 목표가&amp;nbsp;있습니다:&lt;/li&gt;
&lt;li&gt;증분 백업에 의존하지 않는 Cinder&amp;nbsp;볼륨&lt;/li&gt;
&lt;li&gt;Nova 인스턴스&lt;ul&gt;
&lt;li&gt;OpenStack Freezer 에서는 노바 스냅샷 기능을&amp;nbsp;사용합니다.&lt;/li&gt;
&lt;li&gt;Ekko는 Nova 인스턴스의 실시간 증분 블록 레벨 백업을 활용하는&amp;nbsp;것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jay Pipes는 &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 엔드포인트가 중복되는지 확인하기위한 것과 두개의 프로젝트(Freezer와 Ekko)에 대해서 논의를 시작함. 거의 동일한 백업을 수행하기위해 두개의 API를 가지는 것은 좋지&amp;nbsp;않다고&amp;#8230;&lt;/li&gt;
&lt;li&gt;Ekko 젝작자는 다른 백업 프로젝트와 동일한 API를 호출할 경우에도 &amp;#8220;실제 구현체와 최종 결과물은 완전히다르다&amp;#8221;고&amp;nbsp;밝혔다.&lt;/li&gt;
&lt;li&gt;Jay는 다음 엔트포인트가 존재하는 지금을 이해할 수&amp;nbsp;없다고:&lt;/li&gt;
&lt;li&gt;Freezer &lt;code&gt;/backups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cinder &lt;code&gt;/{tenant_id}/backups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이 엔드포인트로 나쁜 사용자 경험을 만들어 혼란을 마들고&amp;nbsp;있다고&amp;#8230;&lt;/li&gt;
&lt;li&gt;현재 거버넌스 모델에서는 프로젝트간 경쟁을 하길 바라지 않습니다. 두 프로젝트는 &lt;span class="caps"&gt;API&lt;/span&gt; 엔트포인트가 겹치는 경우, 논의를 하여 협력하는 방법으로&amp;nbsp;나가야한다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-January/084739.html"&gt;Announcing Ekko &amp;#8212; Scalable block-based backup for&amp;nbsp;OpenStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;먼가 번역을 하다보니 2주가 지났다&amp;#8230; 이런 내용들이 매주 업데이트가 되고있으니.. 언제 다 보나.ㅡ.ㅡ;; 따라가는 것도 힘들고. 몇몇 내용은 봐도&amp;nbsp;모르겠고.&lt;/p&gt;
&lt;p&gt;그래도 봐야지 흐름이라도&amp;nbsp;알지&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 16 Feb 2016 21:48:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-02-16:2016/02/16/1월-23일부터-2월-5일까지-openstack에서-나온-이야기들/</guid><category>openstack</category><category>mailling</category><category>digest</category></item><item><title>Tig Manual</title><link>http://ujuc.github.io/2016/02/10/tig-manual/</link><description>&lt;p&gt;Git을 사용하기 위한 프로그램들이 많다. 그중에서도 번역하려고 하는 것은 Tig. 터미널 환경에 맞게 구성이되어 있으며, Git CLI와 같이 사용하면 왠만한 &lt;span class="caps"&gt;GUI&lt;/span&gt; 프로그램 못지않은 사용성을 보여주고 있다. 단지&amp;#8230; 명령어가 많아질&amp;nbsp;뿐이다&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jonas/tig"&gt;Tig&amp;nbsp;Homepage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tig snap" src="http://ujuc.github.io/img/2016-02-10_tig_snap.png" /&gt;&lt;/p&gt;
&lt;p&gt;실행시키면 위와 같은 모습을 보여주게된다. 간단한 설명은 여기까지하고 메뉴얼이나 보자. 다수의 의역이 포함되어있다. 안할려고 했으나 하루죙일 하다보니&amp;#8230; 그리고 한국어로 곧장 옮기니 이상한 부분이&amp;nbsp;있어&amp;#8230;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://jonas.nitro.dk/tig/manual.html"&gt;The Tig&amp;nbsp;Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 문서는 Tig에 대한 메뉴얼이며, Tig는 Git에 대한 ncurses 기반의 텍스트 모드 인터페이스로 작성되었습니다. Tig는 Git 저장소의 변화를 확인하고 추가적으로 다양한 Git 명령에 대한 출력 내용을 확인할 수 있는 pager로 사용할 수 있습니다. Pager로 사용할 경우, stdin에서 입력을 표시하고, 생상을 추가할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;p&gt;저장소 확인용으로 사용할 경우, Tig는 기초적인 Git 명령을 사용하여 요약된 커밋 로그, 로그 메시지에서의 커밋 내용, diffstat, diff 와 같은 다양한 뷰를 이용하여 사용자에게&amp;nbsp;보여줍니다.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-calling-conventions"&gt;1. Calling Conventions (호출 규칙)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pager-mode-pager"&gt;Pager Mode (Pager&amp;nbsp;모드)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-command-options-git"&gt;Git Command Options (Git 명령어&amp;nbsp;옵션)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-the-viewer"&gt;2. The Viewer (뷰어)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#views"&gt;Views&amp;nbsp;(뷰)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#browsing-state-and-user-defined-commands"&gt;Browsing State and User-defined Commands (상태 확인과 사용자 정의&amp;nbsp;명령어)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#title-windows"&gt;Title Windows (제목&amp;nbsp;윈도우)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-environment-variables"&gt;3. Environment Variables (환경 변수)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#configuration-files"&gt;Configuration Files (구성&amp;nbsp;파일)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repository-references"&gt;Repository References (저장소&amp;nbsp;참조)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#diff-options-diff"&gt;Diff options (Diff&amp;nbsp;옵션)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-default-keybindings"&gt;4. Default Keybindings (기본 키 바인딩)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#view-switching"&gt;View Switching (뷰&amp;nbsp;전환)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#view-manipulation"&gt;View Manipulation (뷰&amp;nbsp;조작)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#view-specific-actions"&gt;View Specific Actions (뷰 지정&amp;nbsp;동작)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cursor-navigation"&gt;Cursor Navigation (커서&amp;nbsp;네비게이션)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scrolling"&gt;Scrolling&amp;nbsp;(스크롤링)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#searching"&gt;Searching&amp;nbsp;(검색)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc"&gt;Misc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prompt"&gt;Prompt&amp;nbsp;(프롬프트)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#external-commands"&gt;External Commands (외부&amp;nbsp;명령어)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-revision-specification"&gt;5. Revision Specification (리버전 사항)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#limit-by-path-name"&gt;Limit by Path Name (패치 이름&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limit-by-date-or-number"&gt;Limit by Date or Number (날짜나 숫자&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limiting-by-commit-ranges"&gt;Limiting by Commit Ranges (커밋 범위&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limiting-by-reachability"&gt;Limiting by Reachability (도달 가능&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-revisions-specification"&gt;Combining Revisions Specification (변경 사항&amp;nbsp;연결)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examining-all-repository-references"&gt;Examining All Repository References (모든 저장소 참조&amp;nbsp;검사)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-more-information"&gt;6. More Information (정보를 더&amp;nbsp;원하시면)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-copyright"&gt;7. Copyright&amp;nbsp;(저작권)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-see-also"&gt;8. See Also&amp;nbsp;(더보기)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="1-calling-conventions"&gt;1. Calling Conventions (호출&amp;nbsp;규칙)&lt;/h2&gt;
&lt;h3 id="pager-mode-pager"&gt;Pager Mode (Pager&amp;nbsp;모드)&lt;/h3&gt;
&lt;p&gt;Stdin 파이프를 사용할 경우, 모든 로그나 diff 옵션은 무시되고 pager 뷰는 stdin으로 들어온 데이터를 로딩하여 확인할 수 있습니다. Pager 모드는 다양한 Git 명령에 대한 출력값을 색상을 추가하여 확인할 수 있도록&amp;nbsp;도와줍니다.&lt;/p&gt;
&lt;p&gt;예로 &lt;code&gt;git-show(1)&lt;/code&gt; 명령에 대한 출력을 색상을 추가한 버전으로 보고&amp;nbsp;싶다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git show &lt;span class="p"&gt;|&lt;/span&gt; tig
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git-show&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="git-show" src="http://ujuc.github.io/img/2016-02-10_tig_1-1.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git-show | tig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="git-show|tig" src="http://ujuc.github.io/img/2016-02-10_tig_1-2.png" /&gt;&lt;/p&gt;
&lt;h3 id="git-command-options-git"&gt;Git Command Options (Git 명령어&amp;nbsp;옵션)&lt;/h3&gt;
&lt;p&gt;명령 줄에서 모든 Git 명령어 옵션은 주어진 명령에 전달되고 셸에 모두 전달되기 전에 인용 셸을 통과할&amp;nbsp;것입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;주의: 메인 뷰에 대한 옵션을 지정하는 경우엔, 메인 뷰에서 사용하는 형식으로 자동 설정되는 &lt;code&gt;--pretty&lt;/code&gt; 옵션을 사용할 수&amp;nbsp;없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;커밋과 author, 커미터 정보를 모두 보여주는 방법에 대한&amp;nbsp;예:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig show --pretty&lt;span class="o"&gt;=&lt;/span&gt;fuller
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Git 명령에 대해 지원되는 변경 옵션 지원에 대한 소개는 &lt;a href="#5-revision-specification"&gt;지정 리버전&lt;/a&gt; 섹션을 참조하세요. 특정 Git 명령 옵션에 대한 자세한 설명은 해당 명령의 맨 페이지를&amp;nbsp;참조하세요.&lt;/p&gt;
&lt;h2 id="2-the-viewer"&gt;2. The Viewer&amp;nbsp;(뷰어)&lt;/h2&gt;
&lt;p&gt;디스플레이는 하나 이상의 뷰와 스크린으로 구성되어있으며, 맨 마지막 라인은 상태 윈도우로 사용됩니다. 기본 값은 한번에 하나의 뷰만을 보여줍니다. 하지만 메인과 로그 뷰로 나눠서 커밋 diff를 확인할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;p&gt;현재 라인이 커밋 라인일때, 로그 뷰에서 엔터키를 누르게되면 다음과 같은 명령이 실행되는 것과&amp;nbsp;같습니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;commit 4d55caff4cc89335192f3e566004b4ceef572521
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;뷰를 나눠서 볼 수 있는데, 로그 뷰는 윈도우 상단에, diff 뷰는 윈도우 하단에 위치시킬 수 있습니다. 탭을 눌러 두 뷰사이를 왔다갔다 할 수 있습니다. 로그 뷰만 보려면 &lt;code&gt;l&lt;/code&gt;를 누르면&amp;nbsp;됩니다.&lt;/p&gt;
&lt;h3 id="views"&gt;Views&amp;nbsp;(뷰)&lt;/h3&gt;
&lt;p&gt;저장소에서 여러가지 &lt;code&gt;views&lt;/code&gt;를 볼 수 있습니다. 각 뷰는 확장 명령, &lt;code&gt;git log&lt;/code&gt;, &lt;code&gt;git diff&lt;/code&gt;, &lt;code&gt;git show&lt;/code&gt;로부터 나오는 출력 값에 기반하여&amp;nbsp;보여줍니다.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;메인&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;기본 뷰이며, 리버전의 선택된 목록에서 각 커밋을 요약하여 보여줍니다. 요약한 내용에서는 author 날짜, author, 로그 메시지 첫 줄을 포함하고 있습니다. 추가적으로 태그와 같은 저장소 참조 표시도 같이&amp;nbsp;표시됩니다.&lt;/dd&gt;
&lt;dt&gt;로그&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;전체 로그 메시지와 diffstat에대한 리버전 로그를 보여주는 다양한 뷰를&amp;nbsp;제공합니다.&lt;/dd&gt;
&lt;dt&gt;Diff&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;현재 작업 트리에 대한 diff, 즉, 마지막 커밋이후 변화분, 로그 메시지, diffstat, diff에 대한 커밋 diff 완료 내용을&amp;nbsp;나타냅니다.&lt;/dd&gt;
&lt;dt&gt;트리&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;디렉토리 목록을 트리로 표현하여 현재 리버전에대한 하위 디렉토리로 내려가며 확인하거나 올라오며 확인할 수 있으며 파일의 blob에 대해서도 확인이&amp;nbsp;가능합니다.&lt;/dd&gt;
&lt;dt&gt;Blob&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;파일 내용이나 파일 이름에 대한 관련 데이터의 &amp;#8220;blob&amp;#8221;을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Blame&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;파일 내용의 주석이나 커밋에 대한 blam을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Refs&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;저장소에서 브런치, 리모트, 태그를&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Status&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;작업 트리내의 파일 상태나 staged/unstaged 변화분 확인과 추적되지 않는 파일의 추가를 좀 더 쉽게&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Stage&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;stage된 변화분, unstage된 파일의 추적분, 추적되지 않는 파일의 내용에 대한 diff를&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Stash&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;저장소의 Stash 목록을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Grep&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;검색 패턴과 동일한 내용으로 모든 라인과 파일 목록을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Pager&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;Stdin으로 입력과 내부 프롬프트에서 입력된 Git 명령어로부터 출력 모두를 보여주는데&amp;nbsp;사용됩니다.&lt;/dd&gt;
&lt;dt&gt;도움말&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;키 바인딩에 대한 간단한 참조를&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="browsing-state-and-user-defined-commands"&gt;Browsing State and User-defined Commands (상태 확인과 사용자 정의&amp;nbsp;명령어)&lt;/h3&gt;
&lt;p&gt;뷰어는 head와 커밋 &lt;span class="caps"&gt;ID&lt;/span&gt; 모두를 추적하고, 현재 상태를 보여줍니다. 커밋 ID는 커서 라인에 따라가며 다른 커밋을 선택할때마다 강조표시가 변경됩니다. 커밋 ID가 변경되면, diff 뷰에선 열때마다 재로드됩니다. Head ID는 지나온 로그를 보면서 리버전된 것이 나타내는 메인과 로그 뷰를 확인할때&amp;nbsp;사용됩니다.&lt;/p&gt;
&lt;p&gt;Tig에서 명령을 사용하거나 제공하는 명령을 구성할 수 있습니다. &lt;a href="#3-environment-variables"&gt;환경 변수&lt;/a&gt;의 일부와 &lt;a href="#external-commands"&gt;외부 명령&lt;/a&gt;을 사용할 수 있습니다. 사용자 정의 명령의 경우 다음 변수들을 이용하여 현재 브라우징 상태에 대한 참조 인자로 사용할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;변수 값&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(head)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 보여지는 &lt;code&gt;haed&lt;/code&gt; &lt;span class="caps"&gt;ID&lt;/span&gt;. 기본값은 &lt;code&gt;HEAD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(commit)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 선택된 커밋 &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(blob)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 선택된 blob &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(branch)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 선택된 브런치 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(stash)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 선택된 stash 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(directory)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 트리 뷰에서 보여지는 위치, 루트 디렉토리일 경우, 빈칸으로 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(file)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 선택된 파일&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(lineno)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 선택된 라인 번호. 기본 값은 &lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(ref)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;참조에서 재공되는 blame 또는 정의되지 않았을 경우, &lt;code&gt;HEAD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(revargs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;명령 라인에서 리버전 인수 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(fileargs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;명령 라인에서 파일 인수 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(cmdlineargs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;명령 라인에서 다른 옵션 인자 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(diffargs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;diff-options&lt;/code&gt;나 diff 뷰에 대한 &lt;code&gt;TIG_DIFF_OPTS&lt;/code&gt;에서 사용되는 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(logargs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blame 뷰에 대한 &lt;code&gt;blame-options&lt;/code&gt;에서 사용된 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(mainargs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;로그 뷰에 대한 &lt;code&gt;log-options&lt;/code&gt;에서 사용된 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%(prompt)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;인자 값에 대한 프롬프트&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;사용자 정의 명령어&amp;nbsp;예제들:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마지막 커밋에 대해 amend&amp;nbsp;적용:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic + !git commit --amend
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;크립 보드에서 커밋 &lt;span class="caps"&gt;ID&lt;/span&gt;&amp;nbsp;복사:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic &lt;span class="m"&gt;9&lt;/span&gt; !@sh -c &lt;span class="s2"&gt;&amp;quot;echo -n %(commit) | xclip -selection c&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리뷰 즁 현재 커밋에서 사용된 노트&amp;nbsp;추가/수정:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic T !git notes edit %&lt;span class="o"&gt;(&lt;/span&gt;commit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git 대화형으로 파일 내용에 세밀한 staging 추가&amp;nbsp;입력:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic I !git add -i %&lt;span class="o"&gt;(&lt;/span&gt;file&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;선택된 브런치의 최상위에서 현재 브런치로&amp;nbsp;리배이스:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; refs &lt;span class="m"&gt;3&lt;/span&gt; !git rebase -i %&lt;span class="o"&gt;(&lt;/span&gt;branch&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="title-windows"&gt;Title Windows (제목&amp;nbsp;윈도우)&lt;/h3&gt;
&lt;p&gt;각 뷰는 뷰 이름에 대한 제목 윈도우를 가집니다. 가능하다면 현재 커밋 ID로도 나태낼 수 있으며, 뷰에서는 다음과 같이&amp;nbsp;위치됩니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;main&lt;span class="o"&gt;]&lt;/span&gt; c622eefaa485995320bc743431bae0d497b1d875 - commit &lt;span class="m"&gt;1&lt;/span&gt; of &lt;span class="m"&gt;61&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;1%&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;기본 값으로 현재 뷰의 제목은 굵은 폰트를 사용하여 강조됩니다. 긴 로딩이 있는 뷰의 경우(3초 이상), 로딩이 시작된 시간으로 부터의 시간이 추가되어&amp;nbsp;보여집니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;main&lt;span class="o"&gt;]&lt;/span&gt; 77d9e40fbcea3238015aea403e06f61542df9a31 - commit &lt;span class="m"&gt;1&lt;/span&gt; of &lt;span class="m"&gt;779&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0%&lt;span class="o"&gt;)&lt;/span&gt; 5s
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="3-environment-variables"&gt;3. Environment Variables (환경&amp;nbsp;변수)&lt;/h2&gt;
&lt;p&gt;Git 인터페이스에 관련된 몇가지 옵션을 환경 옵션을 통해 구성할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="configuration-files"&gt;Configuration Files (구성&amp;nbsp;파일)&lt;/h3&gt;
&lt;p&gt;시작시 Tig는 시스템 전체 구성 파일(기본 값 &lt;code&gt;{sysconfigdir}/tigrc&lt;/code&gt;)을 읽은 다음 사용자 구성 파일(기본 값 &lt;code&gt;~/.tigrc&lt;/code&gt;)을 읽습니다. 이 파일 중 하나의 경로를 다음과 같은 환경 변수를 이용하여 재정의 할 수&amp;nbsp;있습니다:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;TIGRC_USER&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;사용자 구성 파일&amp;nbsp;위치&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;TIGRC_SYSTEM&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;시스템 전체 구성 파일&amp;nbsp;위치&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="repository-references"&gt;Repository References (저장소&amp;nbsp;참조)&lt;/h3&gt;
&lt;p&gt;태그와 브런치 head가 참조하는 커밋은  &lt;code&gt;[&lt;/code&gt;과 &lt;code&gt;]&lt;/code&gt;에 둘러쌓여 참조 이름으로&amp;nbsp;표시됩니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2006-03-26 19:42 Petr Baudis         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;cogito-0.17.1&lt;span class="o"&gt;]&lt;/span&gt; Cogito 0.17.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;브런치가 보여지는 것을 제한하길 원한다면, 보여질 브런치의 이름이 &lt;code&gt;master&lt;/code&gt;이거나 &lt;code&gt;feature/&lt;/code&gt; 로 접두어로 시작하는 경우엔 다음과 같이 변수를 설정할 수&amp;nbsp;있습니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;TIG_LS_REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git ls-remote . master feature/*&amp;quot;&lt;/span&gt; tig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;또는 여러분의 환경에서 영구적으로 변수를 설하여 사용할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;TIG_LS_REMOTE&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;모든 저장소에 대한 참조를 검색하는 명령을 설정합니다. 명령을 사용하게 되면 &lt;code&gt;git-ls-remote(1)&lt;/code&gt; 과같은 포맷으로 데이터를 출력할 수 있습니다. 기본 값은 다음과 같습니다:&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git ls-remote .
&lt;/pre&gt;&lt;/div&gt;


&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="diff-options-diff"&gt;Diff options (Diff&amp;nbsp;옵션)&lt;/h3&gt;
&lt;p&gt;Diff 뷰에 대해 diff를 어떻게 표시할 것인가에 대한 내용으로 수정이 가능합니다. 예를 들어 커멧과 author 날짜를 상대 날짜와 같이 보길&amp;nbsp;원한다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;TIG_DIFF_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--relative-date&amp;quot;&lt;/span&gt; tig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;또는 여러분의 환경에서 영구적으로 변수를 설정하여 사용할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h2 id="4-default-keybindings"&gt;4. Default Keybindings (기본 키&amp;nbsp;바인딩)&lt;/h2&gt;
&lt;p&gt;기본 키 바인딩에 대해서는 아래와&amp;nbsp;같습니다.&lt;/p&gt;
&lt;h3 id="view-switching"&gt;View Switching (뷰&amp;nbsp;전환)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; | 메인 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig main view" src="http://ujuc.github.io/img/2016-02-10_tig_2-1_main.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; | diff 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig diff view" src="http://ujuc.github.io/img/2016-02-10_tig_2-2_diff.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; | 로그 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig log view" src="http://ujuc.github.io/img/2016-02-10_tig_2-3_log.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; | pager 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig parger view" src="http://ujuc.github.io/img/2016-02-10_tig_2-4_pager.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; | 디렉토리 트리 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig tree view" src="http://ujuc.github.io/img/2016-02-10_tig_2-5_tree.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; | 파일 blob 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig file blob view" src="http://ujuc.github.io/img/2016-02-10_tig_2-6_file.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; | grep 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig grep view" src="http://ujuc.github.io/img/2016-02-10_tig_2-7_grep.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; | blame 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig blame view" src="http://ujuc.github.io/img/2016-02-10_tig_2-8_blame.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; | refs 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig refs view" src="http://ujuc.github.io/img/2016-02-10_tig_2-9_refs.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; | stash 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig stash view" src="http://ujuc.github.io/img/2016-02-10_tig_2-10_stash.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; | 도움말 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig help view" src="http://ujuc.github.io/img/2016-02-10_tig_2-11_help.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; | status 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig status view" src="http://ujuc.github.io/img/2016-02-10_tig_2-12_status.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; | stage 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig stage view" src="http://ujuc.github.io/img/2016-02-10_tig_2-13_stage.png" /&gt;&lt;/p&gt;
&lt;h3 id="view-manipulation"&gt;View Manipulation (뷰&amp;nbsp;조작)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;뷰를 닫는다. 여러뷰가 열려있다면, 뷰 스택 안에서 이전 뷰로 되돌아가게 된다. 마지막 뷰라면, Tig에서 나오게 됨. &lt;code&gt;Q&lt;/code&gt;를 이용하면 모든 뷰를 닫는다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;이 키는 현재보고 있는 뷰에서 &amp;#8220;상황에 맞게(context sensitive)&amp;#8221; 동작합니다. 커밋줄에서의 로그 뷰나 메인 뷰일땐 뷰를 분활하여 커밋 diff를 보여줍니다. diff 뷰에서는 간단하게 한줄을 내리는데 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;td&gt;다음 뷰로 전환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 뷰를 리로드하거나 새로고침&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 뷰를 화면에 꽉차도록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;&amp;#8220;상황에 맞게(context sensitive)&amp;#8221; 작동하며, 한 줄 위로 이동합니다. 그러나 메인 뷰에서(split이나 전체 화면에서) diff 뷰를 열경우, 메인 뷰에서는 이전 커밋으로 커서를 변경하고 해당 diff 뷰를 보여주게 됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Up&lt;/em&gt;과 동일하며 단지 아래로 내려갑니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;상위로 이동합니다. 트리 뷰에서는 상위 디렉토리로 이동하게 됩니다. blame 뷰에서는 상위 커밋에 대한 blame가 표시됩니다. 머지의 경우, 상위가 쿼리됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="view-specific-actions"&gt;View Specific Actions (뷰 지정&amp;nbsp;동작)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;파일 상태를 업데이트 합니다. Status 뷰에서는 다음 커밋에 대해 추가하지 않은 파일이나 stage 변경 파일에 대해서 추가할 수 있습니다.(&lt;code&gt;git-add &amp;lt;filename&amp;gt;&lt;/code&gt;과 동일한 작업입니다.) Stage 뷰에서는 diff 청크 라인에서는 다음 커밋에 대한 청크만 stage 합니다. diff에 표시되는 모든 변화가 diff 청크 라인에서 stage 되지는 않습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git-mergetool(1)&lt;/code&gt;을 실행하여 머지되지 않은 파일을 해결합니다. 주의, 원하는 머지 도구를 사용하기 위해 초기 구성이 필요할 수 있습니다. 올바르게 작동하는지 확인하세요. &lt;code&gt;git-mergetool(1)&lt;/code&gt;의 맨페이지를 확인하세요.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unstage된 변경을 파일에서 체크아웃합니다. 마지막 커밋한 콘텐츠가 포함된 파일을 재설정합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stage 싱글 diff 라인&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stage 뷰에서 다음 청크로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;diff 콘텍스트 확장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;diff 콘텍스트 축소&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="cursor-navigation"&gt;Cursor Navigation (커서&amp;nbsp;네비게이션)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;커서 한 라인 위로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;커서 한라인 아래로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PgUp, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;커서 한 페이지 위로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PgDown, Space&lt;/td&gt;
&lt;td&gt;커서 한 페이지 아래로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;End&lt;/td&gt;
&lt;td&gt;마지막 라인으로 점프&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Home&lt;/td&gt;
&lt;td&gt;첫 라인으로 점프&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="scrolling"&gt;Scrolling&amp;nbsp;(스크롤링)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Insert&lt;/td&gt;
&lt;td&gt;뷰 한 라인 위로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;뷰 한 라인 아래로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ScrBack&lt;/td&gt;
&lt;td&gt;뷰 한 페이지 위로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ScrFwd&lt;/td&gt;
&lt;td&gt;뷰 한 페이지 아래로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Left&lt;/td&gt;
&lt;td&gt;뷰 한 컬럼 왼쪽으로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Right&lt;/td&gt;
&lt;td&gt;뷰 한 컬럼 오른쪽으로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;뷰 첫 칼럼으로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="searching"&gt;Searching&amp;nbsp;(검색)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;뷰에서 검색. 열려진 프롬프트에서 정규식을 사용해서 찾을 수 있음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;뷰에서 뒤에서부터 검색. 이것도 정규식 사용 가능.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 검색 정규식과 동일한 다음 검색&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;현재 검색 정규식과 동일한 이전 검색&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="misc"&gt;Misc&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;나가기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-L&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;스크린 새로고침&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모든 백그라운드 로딩 정지. 리버전 로그의 제한 없이 긴 히스토리를 가진 저장소에서 Tig를 사용할때 필요할 수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;버전 확인&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;옵션 메뉴 열기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;라인 번호 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;날짜 표시 on/off/short/relative/local&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author 표기 on/off/abbreviated/email/email 사용자 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;리버전 그래프 시각화 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;라인 그래프 모드 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;참조 표시 on/off (태그, 브런치 이름)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;diff에 대한 공백 무시 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;커밋 &lt;span class="caps"&gt;ID&lt;/span&gt; 표시 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모든 diff 대신에 현재 선택한 파일에 대한 diff를 참조하기 위한 파일 필터링 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;커밋 제목 넘어감에 대한 강조표시 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;프롬프트 열기. 특정 명령어를 실행할 수 있도록 허용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;에디터에서 파일 열기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="prompt"&gt;Prompt&amp;nbsp;(프롬프트)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;특정 라인 번호로 점프. 예 &lt;code&gt;:80&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:&amp;lt;sha&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;특정 커밋으로 점프. 예 &lt;code&gt;:2f12bcc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;일치하는 키 바인딩 실행. 예 &lt;code&gt;:q&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:!&amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pager 내에서 시스템 명령어 실행. 예 &lt;code&gt;:!git log -p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:&amp;lt;action&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tig 명령 실행. 예 &lt;code&gt;:edit&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:save-display &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;에서 현재 화면 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:save-options &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;에서 현재 옵션 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:script &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;로부터 명령어 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:exec &amp;lt;flags&amp;gt;&amp;lt;args...&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;flags&amp;gt;&lt;/code&gt;에 정의된 확장 사용자 정의 명령 옵션과 &lt;code&gt;&amp;lt;args&amp;gt;&lt;/code&gt; 사용하여 명령 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="external-commands"&gt;External Commands (외부&amp;nbsp;명령어)&lt;/h3&gt;
&lt;p&gt;사용자에 따라 외부 명령어가 더 필요한 경우, 쉽게 스크립트다 프로그램을 사용할 수 있는 방법을 제공합니다. 현재 커밋 ID로 키를 연결하고 현재 보여지는 상태에서 정보를 사용할 수 있습니다. Tig에서 기본 등록되어있는 확장&amp;nbsp;명령어:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keymap&lt;/th&gt;
&lt;th&gt;키&lt;/th&gt;
&lt;th&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;td&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git cherry-pick %(commit)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;generic&lt;/td&gt;
&lt;td&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git gc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="5-revision-specification"&gt;5. Revision Specification (리버전&amp;nbsp;사항)&lt;/h2&gt;
&lt;p&gt;이 세션에서는 리버전을 표시하거나 볼 수 있는 내용을 제한할 수 있도록 설정하는 방법에 대해서 설명합니다. Tig에서는 구문 분석을 하지 않습니다. 리버전 옵션에 대한 자세한 설명은 Git 메뉴얼 페이지에서 확인하십시오. 연관된 맨페이지는 &lt;code&gt;git-log(1)&lt;/code&gt;을 기준으로 &lt;code&gt;git-diff(1)&lt;/code&gt;과 &lt;code&gt;git-rev-list(1)&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;설정 가능한 옵션을 사용하여 Git과 상호 작용을 이 세션에서 설명합니다. 예를 들어 &lt;a href="#diff-options-diff"&gt;diff 옵션&lt;/a&gt;에 대한 세션에서 설명된 환경 변수를 사용하여 구성할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="limit-by-path-name"&gt;Limit by Path Name (패치 이름&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;특정 파일 (또는 여러 파일) 변경에 대해서만 확인하고 싶다면 다음과 같이 목록으로&amp;nbsp;나타냅니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig Makefile README
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tig의 하위 명령 또는 태그 이름과 같은 저장소 참조에서 발생할 수 있는 모호성을 방지하기 위해 Git 옵션의 경우 &lt;code&gt;--&lt;/code&gt;를 사용하여 구분해야됩니다. &lt;code&gt;states&lt;/code&gt;라는 이름을 가진 파일이 있다면, &lt;code&gt;status&lt;/code&gt; 하위 명령과 충돌을 일으킬꺼니 다음과 같이&amp;nbsp;사용해야합니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig -- status
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="limit-by-date-or-number"&gt;Limit by Date or Number (날짜나 숫자&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;Git과의 상호작용 속도를 올리기 위해 로그와 메인 뷰에서 보여지는 커밋의 수를 제한할 수 있습니다. 예를 들어, 날짜로 제한을 걸 경우엔 &lt;code&gt;--since=1.month&lt;/code&gt;, 커밋 수로 제한을 걸 경우엔 &lt;code&gt;-n400&lt;/code&gt;와 같이&amp;nbsp;사용합니다.&lt;/p&gt;
&lt;p&gt;만약 두 날짜 사이에 발생한 변경분에 대해서 확인하고&amp;nbsp;싶다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig --after&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;May 5th&amp;quot;&lt;/span&gt; --before&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2006-05-16 15:44&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;주의, 공간을 포함하는 날짜를 사용하지 않는다면 &lt;code&gt;.&lt;/code&gt;를 이용하여 나타낼 수 있습니다. 예, &lt;code&gt;--after=May.5th&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="limiting-by-commit-ranges"&gt;Limiting by Commit Ranges (커밋 범위&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;대안으로 &amp;#8220;&lt;code&gt;tag-1.0&lt;/code&gt;과 &lt;code&gt;tag-2.0&lt;/code&gt; 사이의 모든 커밋&amp;#8221;과 같은 특정 범위로 제안할 수 있습니다. 예를&amp;nbsp;들면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig tag-1.0..tag-2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;원격 브런치로 푸시되지 않은 커밋의 검색 제한은 다음과 같은 방법으로 가능합니다. &lt;code&gt;origin&lt;/code&gt;을 업스트림 원격 브런치고 가정하고&amp;nbsp;사용한다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig origin..HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;원격 브런치에서 푸시된 내용들을 나열 합니다. 선택적으로 &lt;code&gt;HEAD&lt;/code&gt;는 생략될 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="limiting-by-reachability"&gt;Limiting by Reachability (도달 가능&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;Git 인터프리트에서는 &amp;#8220;tag-1.0&amp;#8230;tag-2.0&amp;#8221;을 사용하는 경우, &amp;#8220;&lt;code&gt;tag-1.0&lt;/code&gt;를 제외하고 &lt;code&gt;tag-2.0&lt;/code&gt;까지의 모든 커밋&amp;#8221;으로 지정할 수 없습니다. 도달 가능한 참조는 물음의 브런치의 원형 (또는 히스토리의 일부분)의 커밋 또는 테그된 리버전일 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;p&gt;이 방법으로 다음 미리 커밋을 지정하려는&amp;nbsp;경우:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig tag-2.0 ^tag-1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;부정 연산자로 &lt;code&gt;^&lt;/code&gt;를 생각할 수 있습니다. 이 대체 문법을 사용하면 위의 여려 브런치의 cut off를 지정하여 커밋 브런치를 없애버릴 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="combining-revisions-specification"&gt;Combining Revisions Specification (변경 사항&amp;nbsp;연결)&lt;/h3&gt;
&lt;p&gt;리버전 옵션은 다음과 같이 연결하여 사용할 수 있습니다. &amp;#8220;&lt;code&gt;Documentation/&lt;/code&gt; 디렉토리에 있는 파일의 변경 사항들을 마지막달 20개 커밋까지 보여다오.&amp;#8221;를 다음과 같이 나타낼 수&amp;nbsp;있습니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig --since&lt;span class="o"&gt;=&lt;/span&gt;1.month -n20 -- Documentation/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="examining-all-repository-references"&gt;Examining All Repository References (모든 저장소 참조&amp;nbsp;검사)&lt;/h3&gt;
&lt;p&gt;일부 경우엔 저장소에 대한 모든 참조를 걸쳐서 변화를 조회하는 것이 편할 수 있습니다. 다음 예제는 &amp;#8220;이 저장소의 개발 라인에서 지난주내 특정파일이 변경되었는지&amp;#8221;에 대해 묻는 것입니다. 다음 명령으로&amp;nbsp;가능합니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig --all --since&lt;span class="o"&gt;=&lt;/span&gt;1.week -- Makefile
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="6-more-information"&gt;6. More Information (정보를 더&amp;nbsp;원하시면)&lt;/h2&gt;
&lt;p&gt;Tig &lt;a href="http://jonas.nitro.dk/tig"&gt;홈페이지&lt;/a&gt;나 &lt;a href="https://github.com/jonas/tig"&gt;메인 Git 저장소&lt;/a&gt;를 방문하여 새로운 릴리즈 내용, 버그 리포트 내용, 기능 요청에 대한 정보를 얻어가시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;h2 id="7-copyright"&gt;7. Copyright&amp;nbsp;(저작권)&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2006-2014 Jonas Fonseca &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#106;&amp;#111;&amp;#110;&amp;#97;&amp;#115;&amp;#46;&amp;#102;&amp;#111;&amp;#110;&amp;#115;&amp;#101;&amp;#99;&amp;#97;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#106;&amp;#111;&amp;#110;&amp;#97;&amp;#115;&amp;#46;&amp;#102;&amp;#111;&amp;#110;&amp;#115;&amp;#101;&amp;#99;&amp;#97;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the &lt;span class="caps"&gt;GNU&lt;/span&gt; General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later&amp;nbsp;version.&lt;/p&gt;
&lt;h2 id="8-see-also"&gt;8. See Also&amp;nbsp;(더보기)&lt;/h2&gt;
&lt;p&gt;맨&amp;nbsp;페이지:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jonas.nitro.dk/tig/tig.1.html"&gt;tig(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jonas.nitro.dk/tig/tigrc.5.html"&gt;tigrc(5)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 10 Feb 2016 02:08:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-02-10:2016/02/10/tig-manual/</guid><category>tig</category></item><item><title>un~ 너는 뭐니?</title><link>http://ujuc.github.io/2016/02/03/un-%EB%84%88%EB%8A%94-%EB%AD%90%EB%8B%88/</link><description>&lt;p&gt;모르겠다. 얼마 안됐다. 분명 이전에는 없었다. 그런데 언제부터인가. &lt;code&gt;.blabla.un~&lt;/code&gt;이라는 파일이 생성되기 시작했다. 그래서&amp;nbsp;찾았다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vimhelp.appspot.com/vim_faq.txt.html#faq-7.2"&gt;Vimhelp -&amp;nbsp;faq-7.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;수정하고 저장할때마다 &lt;code&gt;un~&lt;/code&gt; 접미사가 붙은 파일이 생간다는 이야기에 대한 내용이다. undo 기능을 사용하기위해서 vim에서 사용하는 파일이라고 한다. 그래서 열었더니 이상한 것들만&amp;nbsp;보여줬구나&amp;#8230;&lt;/p&gt;
&lt;p&gt;끄는 방법은 &lt;code&gt;:set noundofile&lt;/code&gt;을 처주거나 vimrc 파일에 넣어두면된다. 그러면 관련 파일들이 생성되지 않는다. 기존에 있던것들은&amp;nbsp;지워야겠지만&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 03 Feb 2016 00:02:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-02-03:2016/02/03/un-너는-뭐니/</guid><category>vi</category><category>undo</category><category>vimrc</category></item><item><title>unattended-upgrade 써보자</title><link>http://ujuc.github.io/2016/01/29/unattended-upgrade-%EC%8D%A8%EB%B3%B4%EC%9E%90/</link><description>&lt;p&gt;AWS에서 서비스를 Ubuntu로 하고 있는데, 요즘 보안 이슈들이 계속 올라오고 있고,
그것에 대한 패치들도 많이 올라오고 있다. 사용하다가 서비스를 하고 있는 패키지들
을 업데이트를 할 수는 없고 (서비스에서 사용하는 패키지의 경우엔.. 답이 없다. 
했다가 무슨 소릴 들을지 모르기도하고 어디서 문제가 발생했는지 모르기도 하고)
보안 패치만큼은 하고&amp;nbsp;싶은데&amp;#8230;&lt;/p&gt;
&lt;p&gt;찾다보니 &lt;code&gt;unattended-upgrade&lt;/code&gt;를 사용해서 할 수가&amp;nbsp;있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manpages.ubuntu.com/manpages/lucid/man8/unattended-upgrade.8.html"&gt;Ubuntu manpage -&amp;nbsp;unattended-upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;사용법&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo unattended-upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;하게되면 알아서 보안 패치를 업그레이드하고 관련된 내용들을 &lt;code&gt;/var/log/unattended-upgrades.log&lt;/code&gt;에서 확인할 수 있다. 관련해서 추가적으로 만들어지는 내용들도 있고, 특정된 내용들을 구성할 수도&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;만약 설치를 하지 않고, 어떠한 보안업데트가 되는지를 확인하고 싶다면, 아래와 같은 명령어를 사용하여 업그레이드를&amp;nbsp;하면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo unattended-upgrade --dry-run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;왠만해서는 &lt;code&gt;--dry-run&lt;/code&gt; 옵션을 이용하여, 업그레이드를 할 수 있도록 확인해주면 되는데, 쉽지는&amp;nbsp;않지&amp;#8230;&lt;/p&gt;
&lt;p&gt;단점은 아직 1.0이 아니다. 그래서 그런지 외부로 출력되는게 없고, 전부 log파일로만&amp;nbsp;나온다&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Fri, 29 Jan 2016 22:35:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-01-29:2016/01/29/unattended-upgrade-써보자/</guid><category>ubuntu</category><category>manage</category><category>upgrade</category><category>security</category><category>command</category></item><item><title>mysql 복제 오류</title><link>http://ujuc.github.io/2016/01/28/mysql-%EB%B3%B5%EC%A0%9C-%EC%98%A4%EB%A5%98/</link><description>&lt;p&gt;오랜만에 설정할 일이 있어서 RDS로 접속했더니&amp;#8230; &lt;span class="caps"&gt;RDS&lt;/span&gt; 인스턴스에서 error 이벤트가
발생하고 있었다. 복제 기능을 사용하면서 신경안 쓸려고 하고 있었는데&amp;#8230; 여기서&amp;nbsp;문제가&amp;#8230;&lt;/p&gt;
&lt;p&gt;RDS를 제외하고 관련 내용을 찾았더니, &lt;code&gt;my.cnf&lt;/code&gt; 파일에다가 뭘 넣고 수정하라고
한다. 이렇게 할려면 RDS는 안된다. 명령어를 입력하라는 말도 있었다. 그런데&amp;#8230;
이넘의 RDS에서 사용자는 말그대로 사용자일 뿐이다. 어떠한 database에 대한 수정을
가할 수 있는 권한 자체가 없다. 그 사용자 이름을 &lt;code&gt;root&lt;/code&gt;로 했다고 해도&amp;nbsp;말이다.&lt;/p&gt;
&lt;p&gt;결국.. 찾다 돌아온 곳은.
&lt;a href="http://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/mysql_rds_skip_repl_error.html"&gt;Amazon Relational Database Service - mysql_rds_skip_repl_error&lt;/a&gt;
부분. 그냥 접근해서 &lt;code&gt;CALL mysql.rds_skip_repl_error&lt;/code&gt; 입력하면&amp;nbsp;된단다.&lt;/p&gt;
&lt;p&gt;그런데 이건 mysql에서만 발생하는 오류인것같다. mariadb에서는 해당 오류가 없다.
mariadb를 사용하는게 정신 건강에&amp;nbsp;좋은&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 28 Jan 2016 01:10:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-01-28:2016/01/28/mysql-복제-오류/</guid><category>aws</category><category>rds</category><category>mysql</category><category>mariadb</category><category>replication</category></item><item><title>Stderr check in zshell</title><link>http://ujuc.github.io/2016/01/27/stderr-check-in-zshell/</link><description>&lt;p&gt;Shell로 zsh를 사용중이다. 얼마전부터 개발 환경 설정을 해놓고 이곳저곳에서
쓰다보니 해당 개발 환경이 꾸며져있지 않으면, 없다고 해당 문구가&amp;nbsp;출력된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stderr" src="http://ujuc.github.io/img/2016-01-26_shell_error.png" /&gt;&lt;/p&gt;
&lt;p&gt;은근히 신경쓰인다. 만약 두개를 설정해놨는데 둘다 없다면 줄이 두 줄로&amp;nbsp;늘어난다.&lt;/p&gt;
&lt;p&gt;그래서 찾았다. 찾다보니 내가 무심코 사용했던 내용에대해 조금더 볼 기회가&amp;nbsp;생긴듯.&lt;/p&gt;
&lt;p&gt;우선 Shell에서 기본 I/O 스트림을 통해서 나오는 값들에대해서 다음 숫자로 제어할
수&amp;nbsp;있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Handle&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;stdin&lt;/td&gt;
&lt;td&gt;Standard input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;stdout&lt;/td&gt;
&lt;td&gt;Standard output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;stderr&lt;/td&gt;
&lt;td&gt;Standard error&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;간단히 하자.
go가 설치되어 있는지 확인을 한다. 제대로 설치됐다면 stdout으로 설치된 경로가 나올&amp;nbsp;것이다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex1_1" src="http://ujuc.github.io/img/2016-01-26_ex1_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;요놈을 안나오게&amp;nbsp;해보자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which go 1&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex1_2" src="http://ujuc.github.io/img/2016-01-26_ex1_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;오~~~&lt;/p&gt;
&lt;p&gt;stderr 값이 나오면 안나오게 할려고 보면&amp;#8230; 이건 설치가 되어있으니&amp;#8230;&amp;nbsp;없는걸로&amp;#8230;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which rbenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex2_1" src="http://ujuc.github.io/img/2016-01-26_ex2_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;이걸 위와 같이 &lt;code&gt;1&lt;/code&gt; 을&amp;nbsp;사용하면&amp;#8230;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which rbenv 1&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex2_2" src="http://ujuc.github.io/img/2016-01-26_ex2_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;음&amp;#8230; 출력되는 문구가 stderr로 나오는 건줄 알았는데 아닌갑다. &lt;code&gt;1&lt;/code&gt;로 출력되는걸&amp;nbsp;막으라했더니&amp;#8230;&lt;/p&gt;
&lt;p&gt;그럼 Python에서는 어디로&amp;nbsp;나올까?&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sub&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;check_rbenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_rbenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;음?? 암것도&amp;nbsp;안나온다&amp;#8230;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;출력값이 256이라니&amp;#8230; 혹시나 해서 봤더니 8bit밀란다. 저걸 밀면 1이 떨어지는데&amp;#8230;
리눅스에서 반환값이 1이면 비정상 종료일때로 알고 있다. 고로니 저넘은 제대로
실행된 아이가 아니라는&amp;nbsp;말씀&amp;#8230;&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;which&lt;/code&gt; 명령어를 사용하여 명령어를 실행하게 되면, 정상종료면 위치를
말해줄꺼고 비정상 종료면 stdout으로 없다는 메시지를 남기고 비정상 종료를
시킨다고 해석하면&amp;nbsp;될듯.&lt;/p&gt;
&lt;p&gt;결국 내가 하고 싶은데로 안되는거네&amp;#8230;&amp;nbsp;이런!&lt;/p&gt;
&lt;p&gt;다른 방법으로 찾아야지 뭐 별수 있나&amp;#8230; 그래도 이번에 건진건 저렇게 숫자를
사용해서 내가 원하는 값들만 넣을 수 있는 방법을 찾았다는거&amp;#8230; 그정도면 1시간동안
작업한 것에 대한 내용은&amp;nbsp;될듯.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 27 Jan 2016 00:57:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-01-27:2016/01/27/stderr-check-in-zshell/</guid><category>zsh</category><category>operation</category></item><item><title>`_vim_files: function definition files net found` on zsh</title><link>http://ujuc.github.io/2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/</link><description>&lt;p&gt;아&amp;#8230; 오랜만에 vim으로 작업을 하려고 탭을 두번 클릭했더니 아래와 같은 에러가 뜬다. 이넘을 어떻게&amp;nbsp;해야되지.&lt;/p&gt;
&lt;p&gt;&lt;img alt="error!" src="http://ujuc.github.io/img/2016-01-16_error.png" /&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;원인&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zcompdump&lt;/code&gt; 때문이라고 하고, 이건 매번 문제가&amp;nbsp;있나보다.ㅡ.ㅡ;;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/robbyrussell/oh-my-zsh/issues/518"&gt;github/robbyrusell/oh-my-zsh/issues/518&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;해결방법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rm ~/.zcompdump&lt;/code&gt;를 삭제하면 된다고&amp;#8230;
그리고 꼭 하고 난뒤에 &lt;code&gt;exec zsh&lt;/code&gt;를 하도록&amp;nbsp;하자.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sat, 16 Jan 2016 22:53:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-01-16:2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/</guid><category>dev</category><category>zsh</category><category>vim</category></item><item><title>Git flow, GitHub flow, GitLab flow</title><link>http://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/</link><description>&lt;p&gt;회사에서  &lt;code&gt;git&lt;/code&gt;을 가지고서 버전관리를 본격적으로 하면서, 너무 많은 부분에서 문제가 발생을 하는 것을 보고 이걸 어떤 방식으로 사용하면 조금더 꼬이는 것을 방지할 수 있을까라는 생각을 하고 있다. 
물론 새로운 프로젝트를 진행하면서 어떤 방법으로 진행하는 것이 맞는 것인지도 필요하기도 했고, 그러다가 &lt;a href=""&gt;이상한 모임 Slack&lt;/a&gt;에서 관련 이야기가 나오면서 커밋을 하기위한 방법론 중 하나인 &lt;code&gt;git-flow&lt;/code&gt;의 종류가 3가지나 된다는 것을 보고 이놈들의 다른 점이 무엇인지 어떤 방법에서 편한 것인지에 대한 내용을 확인하고&amp;nbsp;싶어졌다.&lt;/p&gt;
&lt;h2 id="git-flow"&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;Git&amp;nbsp;Flow&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;Vincent Driessen이 말한 branching model&lt;/a&gt;를 구현한 Git 확장 모듈이다. - &lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;기본 브랜치는 5가지를 이야기한다. &lt;code&gt;feature &amp;gt; develop &amp;gt; release &amp;gt; hotfix &amp;gt; master&lt;/code&gt; 브랜치가 존재하며, 머지 순서는 앞에서 뒤로 진행된다. &lt;code&gt;release&lt;/code&gt; 브랜치와 &lt;code&gt;hotfix&lt;/code&gt; 브랜치의 경우, &lt;code&gt;develop&lt;/code&gt; 브랜치의 오른쪽에 존재하기에 모두 &lt;code&gt;develop&lt;/code&gt; 브랜치도 머지를 하도록 구성이&amp;nbsp;되어있다.&lt;/p&gt;
&lt;p&gt;Vincent Driessen은 관련하여 스크림트로 명령을 구성해놨으며, 그냥 설치를 하여 CLI에서 명령으로 작업을 하여도 되고, &lt;span class="caps"&gt;GUI&lt;/span&gt; 툴들에서 기본 내장 git-flow 명령이나 플러그인을 설치하여 작업을 진행할 수 있도록 보편화되어잇는 브런칭&amp;nbsp;모델이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git Flow model" src="http://nvie.com/img/git-model@2x.png" /&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;구조와&amp;nbsp;흐름&lt;/h3&gt;
&lt;p&gt;가장 중심이되는 브랜치는 &lt;code&gt;master&lt;/code&gt;랑 &lt;code&gt;develop&lt;/code&gt; 브랜치이며, 이 두개의 브랜치는 무조건 있어야된다고 보면된다. 이름은 바뀔수 있다만 왠만해서는 변경하지 않고 진행하도록 하자. Git도 Production에서 사용하는 브랜치는 &lt;code&gt;master&lt;/code&gt;를 사용하게 되니 관련된 부분을 변경하면 새로운 사람이 왔을때 스터디 커브가 존재할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;머지된 &lt;code&gt;feature&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;hotfix&lt;/code&gt; 브랜치는 삭제하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4 id="feature"&gt;Feature&amp;nbsp;브랜치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;release-*&lt;/code&gt;, &lt;code&gt;hotfix-*&lt;/code&gt;를 제외한 어떤 것이든&amp;nbsp;가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 기능을 추가하는 브랜치이다.
&lt;code&gt;feature&lt;/code&gt;브랜치는 &lt;code&gt;origin&lt;/code&gt;에는 반영하지 않고, 개발자의 reop애만 존재하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;여기서 머지를 할때, &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 브랜치에서 머지가 되었음을 git 기록에 남겨두도록 한다. 이렇게되면 나중에 히스토리 관리가 어려워지는 부분이 존제한다고 한다만&amp;#8230; 그것을 확인할 수 있는 방법들은 많으니&amp;nbsp;뭐&amp;#8230;&lt;/p&gt;
&lt;h4 id="release"&gt;Release&amp;nbsp;브랜치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;release-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 Production 릴리즈를 위한 브랜치이다.
지금까지 한 기능을 묶어 &lt;code&gt;develop&lt;/code&gt; 브랜치에서 &lt;code&gt;release&lt;/code&gt; 브랜치를 따내고, &lt;code&gt;develop&lt;/code&gt; 브랜치에서는 다음번 릴리즈에서 사용할 기능을 추가한다.
&lt;code&gt;release&lt;/code&gt; 브랜치에서는 버그픽스에 대한 부분만 커밋하게되고, &lt;strong&gt;릴리즈가 준비되었다고 생각하면&lt;/strong&gt; &lt;code&gt;master&lt;/code&gt;로 머지를 진행한다. (이때도 &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 머지하였음을 남긴다.) 
&lt;code&gt;master&lt;/code&gt;로 머지 후 &lt;code&gt;tag&lt;/code&gt; 명령을 이용하여 릴리즈 버전에 대해 명시를 하고, &lt;code&gt;-s&lt;/code&gt; 나 &lt;code&gt;-u &amp;lt;key&amp;gt;&lt;/code&gt; 옵션을 이용하여 머지한 사람의 정보를 남겨두도록 한다. 그런뒤 &lt;code&gt;develop&lt;/code&gt; 브랜치로 머지하여, &lt;code&gt;release&lt;/code&gt; 브랜치에서 수정된 내용이 &lt;code&gt;develop&lt;/code&gt; 브랜치에 반영이되도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4 id="hotfix"&gt;Hotfix&amp;nbsp;브랜치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;hotfix-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Production에서 발생한 버그들은 전부 여기로&amp;#8230; 수정 끝나면, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt; 브랜치에 반영하고, &lt;code&gt;master&lt;/code&gt;에 다가는 &lt;code&gt;tag&lt;/code&gt; 를 추가해준다.
만약 &lt;code&gt;release&lt;/code&gt; 브랜치가 존재한다면, &lt;code&gt;release&lt;/code&gt; 브랜치에 &lt;code&gt;hotfix&lt;/code&gt; 브랜치를 머지하여 릴리즈될때 반영이 될 수 있도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h3 id="_2"&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;명령어가&amp;nbsp;나와있다.&lt;/li&gt;
&lt;li&gt;왠만한 에디터와 IDE에는 플러그인으로&amp;nbsp;존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브랜치가 많아&amp;nbsp;복잡하다.&lt;/li&gt;
&lt;li&gt;안쓰는 브랜치가 있다. 그리고 몇몇 브랜치는 애매한&amp;nbsp;포지션이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model - Vincent&amp;nbsp;Driessen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&amp;nbsp;cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huns.me/development/1131"&gt;gifflow, 쉬운 git brunch 관리 - 개발왕&amp;nbsp;김코딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ohgyun.com/402"&gt;git 브랜칭 전략과 git flow -&amp;nbsp;꿀벌개발일지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="github-flow"&gt;GitHub&amp;nbsp;Flow&lt;/h2&gt;
&lt;p&gt;Scott chacon은 &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub Flow&lt;/a&gt;에서 Git flow가 좋은 방식이긴 하지만 GitHub에서 사용하기에는 복잡하다 여겨 사용하지 않고 &lt;code&gt;GitHub Flow&lt;/code&gt;라는 내용으로 사용을 하고 있다고 한다. 그리고 &lt;strong&gt;자동화의 계념이 들어가 있다는 점&lt;/strong&gt;. 자동화가 안되어있는 곳에서는 수동으로 관련 작업을 진행하면&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;흐름이 단순한만큼 룰도 단순하다. &lt;code&gt;master&lt;/code&gt; 브랜치에대한 &lt;code&gt;role&lt;/code&gt;만 정확하다면 나머지 브랜치들에는 관여를 하지 않는다. 그리고 &lt;code&gt;pull request&lt;/code&gt; 기능을 사용하도록 권장을&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Flow Model" src="http://cdn-ak.f.st-hatena.com/images/fotolife/s/shoma2da/20151104/20151104223339.png" /&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt; 브랜치가 명확하지 않는 시스템에서 사용에 맞게&amp;nbsp;되어있다. &lt;/li&gt;
&lt;li&gt;여기에는 GitHub의 서비스 특성상. 릴리즈라는 개념이 없는 서비스를 진행하고 있어서 그런것으로 보이며, 웹 서비스들이 릴리즈라는 계념이 없이지고 있으니 사용하기 편할 것으로&amp;nbsp;보인다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hotfix&lt;/code&gt;와 가장 작은 기능을 구분하지 않는다. 어짜피 둘다 개발자가 수정해야되는 일중에 하나이다. 단지 우선 순위가 어디가 높냐라는&amp;nbsp;단계이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;그럼 어떻게 사용할&amp;nbsp;것인가?&lt;/h3&gt;
&lt;h4 id="1-master"&gt;1. &lt;code&gt;master&lt;/code&gt; 브랜치는 어떤 때든 배포가&amp;nbsp;가능하다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; 브랜치는 항상 최신의 상태이며, stable 상태로 Product에 배포되는 브랜치이다. 그리고 이 브랜치에 대해서는 업격한 &lt;em&gt;role&lt;/em&gt;를 주어&amp;nbsp;사용한다. &lt;/p&gt;
&lt;h4 id="2-master"&gt;2. 새로운 일을 시작하기 위해 브랜치를 &lt;code&gt;master&lt;/code&gt;에서 딴다면 이름은 어떤일을 하는지 명확하게&amp;nbsp;작성한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와는 다르게 &lt;code&gt;feature&lt;/code&gt; 브랜치나 &lt;code&gt;develop&lt;/code&gt; 브랜치가 존재하지 않는다. 그렇기에 새로운 기능을 추가하거나 버그를 해결하기 위한 브랜치의 이름은 자세하게 어떤 일을 하고 있는지에 대해서 작성해주도록 하자. Github 페이지에서 보면 어떤 일들이 진행되고 있는지를 확인하기 쉽게&amp;nbsp;말이다.&lt;/p&gt;
&lt;h4 id="3-push"&gt;3. 원격지 브랜치로 수시로 push를&amp;nbsp;한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와 가장 상반되는 방식이다. 항상 원격지에 자신이 하고 있는 일들을 올려 다른 사람들도 확인할 수 있도록 해준다.
이 방법의 좋은점은 하드웨어에 문제가 발생하여 작업하던 부분이 날라가더라고 원격지에 있는 소스를 받아서 작업을 할 수 있도록&amp;nbsp;해준다.&lt;/p&gt;
&lt;h4 id="4-pull-request"&gt;4. 피드백이나 도움이 필요할때, 그리고 머징 준비가 완료되었을때는 &lt;code&gt;pull request&lt;/code&gt;를&amp;nbsp;생성한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pull request&lt;/code&gt; 는 코드 리뷰를 도와주는 시스템이다. 
그렇기에 이것을 이용하여 자신의 코드를 공유하고, 리뷰를 받을 수 있도록 한다. 물론 머지가 준비 완료되어 &lt;code&gt;master&lt;/code&gt; 브랜치로 반영을 요구하여도&amp;nbsp;된다.&lt;/p&gt;
&lt;h4 id="5-master"&gt;5. 기능에 대한 리뷰와 사인이 끝난후 &lt;code&gt;master&lt;/code&gt;로&amp;nbsp;머지한다.&lt;/h4&gt;
&lt;p&gt;곧장 product로 반영이될 기능이기에 이해관계가 연결된 사람들과 충분한 논의 이후 반영하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4 id="6-master"&gt;6. &lt;code&gt;master&lt;/code&gt;로 머지되고 푸시되었을때는 즉시 배포되어야&amp;nbsp;한다.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;GitHub Flow&lt;/strong&gt;의 핵심인듯한 &lt;code&gt;master&lt;/code&gt;로 머지가 일어나면 &lt;code&gt;hubot&lt;/code&gt;을 이용하여 자동으로 배포가 되도록 설정&amp;nbsp;해놓는다.&lt;/p&gt;
&lt;h3 id="_7"&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 전략이&amp;nbsp;단순하다.&lt;/li&gt;
&lt;li&gt;처음 git을 접하는 사람에게 정말 좋은 시스템이&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;Github 사이트에서 제공하는 기능을 모두 사용하여 작업을&amp;nbsp;진행한다.&lt;/li&gt;
&lt;li&gt;코드리뷰를 자연스럽게 사용할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;CI가 필수적이며, 배포는 자동으로 진행할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;Github가 작업을 할때 이렇게 작업하고&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CI와 배포 자동화가 되어있지 않은 시스템에서는 사람이 관련된 업무를&amp;nbsp;진행한다.&lt;/li&gt;
&lt;li&gt;많은 것들이 올라오기 시작하면&amp;#8230; 그때부터는&amp;nbsp;헬이&amp;#8230;&lt;/li&gt;
&lt;li&gt;너무 간단하니&amp;#8230; 이거 단점이 있나&amp;nbsp;십다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.github.com/introduction/flow/"&gt;Understanding the GitHub&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dogfeet.github.io/articles/2011/github-flow.html"&gt;GitHub Flow -&amp;nbsp;dogfeet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://b.pyar.bz/blog/2014/01/22/github-flow/"&gt;Github-flowを分かりやすく図解してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucamezzalira.com/2014/03/10/git-flow-vs-github-flow/"&gt;Git Flow vs Github&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/1557-github-flow-in-the-browser"&gt;GitHub Flow in teh&amp;nbsp;Browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gitlab-flow"&gt;GitLab&amp;nbsp;Flow&lt;/h2&gt;
&lt;p&gt;Github에서 말하는 flow는 너무나도 간단하여 배포, 환경구성, 릴리즈, 통합에 대한 이슈를 남겨둔 것이 많았다. 그것을 보안하기위해 GitLab에서 관련 내용들을 추가적으로 덧붙여 설명한것을&amp;nbsp;일컷는다.&lt;/p&gt;
&lt;h3 id="production-branch-with-gitlab-flow"&gt;Production branch with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - production branch" src="https://about.gitlab.com/images/git_flow/production_branch.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;production&lt;/code&gt; 브랜치가 존재하여 커밋한 내용들을 일방적으로 디플로이를 하는 형태. GitHub에서 브랜치 하나를 더 구성하여 사용하는 이것도 조금은 간단한 구성이다.
이렇게 구성하면 배포 자동화가 되어있지않은 구성에서 어떻게 배포를 진행할 것인가에 대한 내용을 담았다. 물론 이걸로 부족하여 다음의 것도&amp;nbsp;추가되었다.&lt;/p&gt;
&lt;h3 id="environment-branches-with-gitlab-flow"&gt;Environment branches with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - environment branch" src="https://about.gitlab.com/images/git_flow/environment_branches.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt;와 &lt;code&gt;production&lt;/code&gt; 사이에 &lt;code&gt;pre-production&lt;/code&gt;을 두어 개발한 내용을 곧장 반영하지 않고 시간을 두고 반영을 하는 것을 말한다. Staging을위한 공간을&amp;nbsp;만드는거지&amp;#8230;&lt;/p&gt;
&lt;h3 id="release-branches-with-gitlab-flow"&gt;Release branches with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - Release branch" src="https://about.gitlab.com/images/git_flow/release_branches.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;release&lt;/code&gt;한 브랜치를 두고서 보안상 문제가 발생한 것이나 백포트를 위해서 작업을 할 경우, cherry-pick을 이용해서 작업을 진행할 수 도 있다. 아니면 해당 릴리즈에서 발생하는 버그들을 묶어서 수정하는 방식을 진행하며된다. 일반적으로 말하는 &amp;#8216;upstream first&amp;#8217; 정책이라고&amp;nbsp;보면된다.&lt;/p&gt;
&lt;h3 id="mergepull-requests-with-gitlab-flow"&gt;Merge/pull requests with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;Pull request를 사용하는 방법이다. GitHub Flow에서 하는 방법과 동일하다. 원문은 길게 적어놨는데&amp;#8230;&amp;nbsp;딱히&amp;#8230;&lt;/p&gt;
&lt;h3 id="issues-with-gitlab-flow"&gt;Issues with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;Issue 트러커와 연결하여 사용하는 것을 말한다. 긴~~ 시간동안 작업을 할 경우, 이슈를 생성하여 작업을 진행하는 것으로&amp;#8230; 브랜치 이름에는 이슈번호를 적어 작업중인 이슈가 어떤 것인지를 명확하게 해주는 것이 필요하다.
작업이 끝나거나 코드 공유가 필요한 시점이면 Merge/pull requsts를&amp;nbsp;보낸다. &lt;/p&gt;
&lt;p&gt;다적을려고 봤더니 그냥 GitLab 사용법에 대해서만 추가적으로 말하고 있어서 이쯤적고 영어로 읽자. 영어가 어렯다면&amp;#8230; 일본어를 번역해서 읽으면 좀 더 쉽게 읽을 수&amp;nbsp;있다.&lt;/p&gt;
&lt;h3 id="_10"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;GitLab&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://postd.cc/gitlab-flow/"&gt;GitLab&amp;nbsp;flowから学ぶワークフローの実践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.gitlab.com/ee/workflow/gitlab_flow.html"&gt;GitLab&amp;nbsp;Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cloudsoftcorp.com/blog/2015/01/gitlab-flow-ftw/"&gt;GitLab Flow &lt;span class="caps"&gt;FTW&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shoma2da.hatenablog.com/entry/2015/11/04/233534"&gt;アプリ開発にはGitlab&amp;nbsp;flowが合うと思います&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_11"&gt;끝&lt;/h2&gt;
&lt;p&gt;하&amp;#8230; 길었다. 모든 자료는 공식적으로 첫번째로 작성된 포스트의 내용을 가져와 작성하였다. 그쪽의 내용이 가장 먼저 말한사람의 생각이 들어가 있다고 생각했기때문이다. 그리고 찾으면서 발견한 글들의 경우, 참고 사이트로 작성을 해놨으니 그것을 확인하면&amp;nbsp;될듯. &lt;/p&gt;
&lt;p&gt;Git flow가 편한줄 알았더니&amp;#8230; GitHub나 GitLab을 사용하고 있다면, 굳이 Git flow가 아니더라도 괜찮겠다는 생각이드는데 딱히 OpenSource를 하는 그룹에서도 Git flow를 사용하기보다는 자신의 코드가 들어가있는 플랫폼을 가지고서 작업을 하는 경우가 많아서&amp;#8230; 뭐. 업스트림에 작업을 할 수 있는 사람이&amp;nbsp;한정되어있으니까&amp;#8230;&lt;/p&gt;
&lt;p&gt;이런 방법들을 어떻게 사용해보는 것이 좋을련지를 고민해보는 것도 필요하지 않을까 한다. 간단하게 하는 방법도 있고 하니까.. 그리고 내꺼나 차근차근 구축해&amp;nbsp;나가야되는데&amp;#8230; &lt;/p&gt;
&lt;h3 id="_12"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/nzakas/5511916"&gt;Using GitHub inside a company -&amp;nbsp;Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nczonline.net/blog/2013/05/21/github-workflows-inside-of-a-company/"&gt;GitHub workflows inside of a&amp;nbsp;company&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/tkhm/items/cc7855d32d640687b43c"&gt;Git利用時のフローはどれを使うか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The&amp;nbsp;gitworkflows(7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 16 Dec 2015 08:50:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-12-16:2015/12/16/git-flow-github-flow-gitlab-flow/</guid><category>git</category><category>workflow</category><category>github</category><category>gitlab</category></item><item><title>git-town 사용해보자</title><link>http://ujuc.github.io/2015/10/26/git-town-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/</link><description>&lt;p&gt;아무런 생각없이 메일 온것을 확인중&amp;#8230; 발견한 &lt;a class="reference external" href="https://github.com/Originate/git-town"&gt;git-town&lt;/a&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;솔직히 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 와 다른게 먼가 있을 것같아서 사용을 해볼려고 깔아뒀고,
지금 작성하는 글도 브런치를 &lt;tt class="docutils literal"&gt;git town&lt;/tt&gt; 명령어중 하나를 사용해서 브런치를
딴 후&amp;nbsp;작성중이다.&lt;/p&gt;
&lt;p&gt;명령어 9가지에 대해서 좀 알아보자. 사용법도 같이 좀&amp;nbsp;써보게&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Development Workflow&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-hack.md"&gt;git hack&lt;/a&gt; : 중심 가지에서 새로운 기능 가지를 때는데&amp;nbsp;사용함.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-sync.md"&gt;git sync&lt;/a&gt; : 원본 저장소의 변화분들을 현재 가지에&amp;nbsp;업데이트.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-new-pull-request.md"&gt;git new-pull-request&lt;/a&gt; : 새로운 풀리퀘&amp;nbsp;생성.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-ship.md"&gt;git ship&lt;/a&gt; : 기능 가지를 중심 가지로 넣고&amp;nbsp;꺽기.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repository Maintenance&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-kill.md"&gt;git kill&lt;/a&gt; : 새로운 가지&amp;nbsp;꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-prune-branches.md"&gt;git prune-branches&lt;/a&gt; : 합쳐진 가지&amp;nbsp;꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-rename-branch.md"&gt;git rename-branch&lt;/a&gt; : 이름&amp;nbsp;변경&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-repo.md"&gt;git repo&lt;/a&gt; : 저장소&amp;nbsp;홈페이지로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration and Help&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-town.md"&gt;git town&lt;/a&gt; : 도움말 보기, 구성 확인 및&amp;nbsp;변경.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;확인용이자 기억용으로 작성한건데&amp;#8230; 옵션이 많다&amp;#8230; 그냥 필요할때만&amp;nbsp;봐야지..&lt;/p&gt;
&lt;p&gt;각 명령어별로 어떻게 돌아가는지에 대해서는 &lt;a class="reference external" href="https://github.com/Originate/git-town/tree/master/features"&gt;features&lt;/a&gt;
폴더로 확인하는 편이 좋다. BDD로 테스트를 진행해서 해당 기능들이 어떻게 진행하고
있는지를 그나마 보기 쉽게 되어있기&amp;nbsp;때문이다.&lt;/p&gt;
&lt;p&gt;솔직히 내부 기능들이 Bash로 작성되어있어서 찾아다니기&amp;nbsp;힘들다&amp;#8230;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Mon, 26 Oct 2015 01:11:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-10-26:2015/10/26/git-town-사용해보자/</guid><category>git</category><category>git-town</category><category>git plugins</category></item><item><title>Vim mouse mode</title><link>http://ujuc.github.io/2015/07/25/vim-mouse-mode/</link><description>&lt;p&gt;나도 &lt;a class="reference external" href="http://github.com/ujuc/dotrc"&gt;vimrc&lt;/a&gt; 설정을 따로 만들었다만, 그것들을 전부 다른 애들이 설정해놓은 것들에서 수정해서 만든거라. 자세히 매뉴얼을 읽어보고 만들지는&amp;nbsp;않았다.&lt;/p&gt;
&lt;p&gt;그런데 얼마전부터 &lt;a class="reference external" href="http://neovim.io"&gt;NeoVim&lt;/a&gt; 매뉴얼을 번역하면서 기능들을 보고 있는데, 사용하고 있는 것들에대해서 나올때마다 작성을 해놔야지&amp;#8230; 안그러면 또 안찾아볼 가능성이&amp;nbsp;높으니&amp;#8230;&lt;/p&gt;
&lt;p&gt;마우스와 관련된 옵션은 &lt;tt class="docutils literal"&gt;mouse_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousefocus_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;moushide_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousemodel_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mouseshape_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousetime_&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;옵션 설명(이라쓰고&amp;nbsp;번역&amp;#8230;)&lt;/h2&gt;
&lt;div class="section" id="mouse"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mouse'"&gt;mouse&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;string (기본값&amp;nbsp;&amp;#8220;a&amp;#8221;)&lt;/p&gt;
&lt;p&gt;마우스를 사용할 수 있도록 설정한다. 터미널에서는 100%. GUI에서 작동하는 것에 대해서 알고 싶으면, | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#gui-mouse"&gt;gui-mouse&lt;/a&gt; | 를&amp;nbsp;확인하도록.&lt;/p&gt;
&lt;p&gt;모드에서 사용하려면 다음 옵션을&amp;nbsp;달아준다:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/pattern.html#n"&gt;n&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#i"&gt;i&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Insert"&gt;Insert&lt;/a&gt;&amp;nbsp;모등&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#c"&gt;c&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/cmdline.html#Command-line"&gt;Command-line&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#h"&gt;h&lt;/a&gt;: 도움말 파일에서 수정할때, 모든&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;a: 모든&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;r: | &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#hit-enter"&gt;hint-enter&lt;/a&gt; | 와 | &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#more-prompt"&gt;more-prompt&lt;/a&gt; |&amp;nbsp;프롬프트에서&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적으로 모든 모드에서 사용하길 원한다면 &lt;tt class="docutils literal"&gt;:set mouse=a&lt;/tt&gt; 로 구성해두면 된다.
마우스 모드가 제대로 작동하지 않을땐, &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#GUI"&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/a&gt; modeless 섹션에서 마우스를 사용하고 있어서 빠진게 아닌지 확인을&amp;#8230; 아마 텍스트 커서도&amp;nbsp;안움직인다고&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/term.html#mouse-using"&gt;mouse-using&lt;/a&gt; , &lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'clipboard'"&gt;clipboard&lt;/a&gt; 를&amp;nbsp;보세요.&lt;/p&gt;
&lt;p&gt;노트 : X-server로 접근한 터미널에서 마우스를 사용할 땐, 복사, 붙여넣기를 사용할땐 &amp;#8220;* &lt;a class="reference external" href="http://neovim.io/doc/user/sponsor.html#register"&gt;register&lt;/a&gt; 를 사용하게 됩니다. 마우스 버튼을 &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt;  에서 사용하려면, &lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#shift"&gt;shift&lt;/a&gt; 를 누르고 사용하면 됩니다. 자세한건 &lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'clipboard'"&gt;clipboard&lt;/a&gt; 옵션에서&amp;nbsp;확인하세요.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousefocus"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousefocus'"&gt;mousefocus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mousef&amp;#8217;  boolean (기본은 off) - {&lt;span class="caps"&gt;GUI&lt;/span&gt; 에서만&amp;nbsp;작동}&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/windows.html#window"&gt;window&lt;/a&gt; 에서 마우스 포인터를 자동으로 활성화 시킬 수 있습니다. 윈도우 레이아웃이나 다른 방법으로 윈도우 초점을 변경(&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#changing"&gt;changing&lt;/a&gt;) 하려한다면, 마우스 포인터는 윈도우에서 이동하게된다는데&amp;#8230;
딱히 GUI로 할일은&amp;nbsp;없음&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousehide"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousehide'"&gt;mousehide&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mh&amp;#8217;  boolean (기본은 on) - {GUI에서만&amp;nbsp;작동}&lt;/p&gt;
&lt;p&gt;입력할때 마우스 포인터를 감추고, 마우스가 움직이면 그때사&amp;nbsp;보여줌.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousemodel"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousemodel'"&gt;mousemodel&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mousem&amp;#8217;  string (기본은 &amp;#8220;extend&amp;#8221;, &lt;a class="reference external" href="http://neovim.io/doc/user/os_win32.html#Win32"&gt;Win32&lt;/a&gt; 에서는&amp;nbsp;&amp;#8220;popup&amp;#8221;)&lt;/p&gt;
&lt;p&gt;마우스를 사용하는 모델을 설정한다. 마우스 오른쪽 키를 눌렸을때 뭘할지에 대해서 설정하는&amp;nbsp;것.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;extend: 마우스 오른쪽 키를 누르면 섹션이 확장됩니다. &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt; 에서의 내용과 동일하게&amp;nbsp;동작함.&lt;/li&gt;
&lt;li&gt;popup: 마우스 오른쪽 키를 누르면 팝업 메뉴가 뜸. 마우스 왼쪽키를 누르고 있으면, 섹션을 확장 합니다. &lt;span class="caps"&gt;MS&lt;/span&gt; Windows의 작업과&amp;nbsp;동일함.&lt;/li&gt;
&lt;li&gt;popup_setpos: &amp;#8220;popup&amp;#8221;과 유사. 커서가 마우스 클릭된 곳으로 움직임. 자세한건 한번 읽어보는&amp;nbsp;걸로.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설정별 마우스&amp;nbsp;동작&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="27%" /&gt;
&lt;col width="32%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;mouse&lt;/th&gt;
&lt;th class="head"&gt;extend&lt;/th&gt;
&lt;th class="head"&gt;popup(_setpost)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;왼쪽 클릭&lt;/td&gt;
&lt;td&gt;커서 위치&lt;/td&gt;
&lt;td&gt;커서 위치&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;왼쪽 끌기&lt;/td&gt;
&lt;td&gt;섹션 시작&lt;/td&gt;
&lt;td&gt;섹션 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;시프트 - 왼쪽&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#word"&gt;word&lt;/a&gt; 검색&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;오른쪽 클릭&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;td&gt;popup 메뉴 (커서 위치)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;오른쪽 끌기&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;가운데 키&lt;/td&gt;
&lt;td&gt;붙이기&lt;/td&gt;
&lt;td&gt;붙이기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;popup&amp;#8221; 모델에서는 pop-up 메뉴를 구성할 수 있음. | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#popup-menu"&gt;popup-menu&lt;/a&gt; | 에서 확인할&amp;nbsp;것.&lt;/p&gt;
&lt;p&gt;마우스 버튼 맵핑을 바꿀려면 | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#gui-mouse-mapping"&gt;gui-mouse-mapping&lt;/a&gt; | 확인. modeless 섹션에서는 작동&amp;nbsp;안함.&lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousemodel'"&gt;mousemodel&lt;/a&gt;&amp;#8216; 옵션은 &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#:behave"&gt;:behave&lt;/a&gt; 명령어로 설정할 수&amp;nbsp;있음.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mouseshape"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mouseshape'"&gt;mouseshape&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mouses&amp;#8217;  string (기본은 &amp;#8220;i:beam,r:beam,s:updown,sd:corss,m:no,ml:up-arrow,v:rightup-arrow&amp;#8221;) - {| &lt;a class="reference external" href="http://neovim.io/doc/user/various.html#+mouseshape"&gt;+mouseshape&lt;/a&gt; | 기능이 켜진채로 컴파일이 되었을 경우, 사용&amp;nbsp;가능}&lt;/p&gt;
&lt;p&gt;다른 모드에서 마우스 포인터가 작동하는 것에대한 것들을 VIM에게 알려주는&amp;nbsp;옵션(?).&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;적용할 수 있는 모드&amp;nbsp;목록:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;일반&amp;nbsp;윈도우:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/pattern.html#n"&gt;n&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;ve&lt;/dt&gt;
&lt;dd&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'selection'"&gt;selection&lt;/a&gt;&amp;#8216; &amp;#8220;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#exclusive"&gt;exclusive&lt;/a&gt;&amp;#8220;가 포함된 &lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt; 모드 (특정짓지 않은 거라면, &lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#as"&gt;as&lt;/a&gt; &amp;#8216;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;&amp;#8216;와&amp;nbsp;동일)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#o"&gt;o&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Operator-pending"&gt;Operator-pending&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#i"&gt;i&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Insert"&gt;Insert&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#r"&gt;r&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Replace"&gt;Replace&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;dt&gt;나머지:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#c"&gt;c&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서&amp;nbsp;추가&lt;/dd&gt;
&lt;dt&gt;ci&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서 삽입(&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#inserting"&gt;inserting&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;cr&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서 변경(&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#replacing"&gt;replacing&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#m"&gt;m&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;span class="caps"&gt;HIT&lt;/span&gt; &lt;span class="caps"&gt;ENTER&lt;/span&gt;&amp;#8217;나 &amp;#8216;More&amp;#8217;&amp;nbsp;프롬프트에서&lt;/dd&gt;
&lt;dt&gt;ml&lt;/dt&gt;
&lt;dd&gt;idem, 마지막 줄에 커서일&amp;nbsp;경우&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#e"&gt;e&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 포인터에 마지막 &lt;a class="reference external" href="http://neovim.io/doc/user/windows.html#window"&gt;window&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#s"&gt;s&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 상태 라인 위에&amp;nbsp;포인터&lt;/dd&gt;
&lt;dt&gt;sd&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 상태 라인으로&amp;nbsp;드래그&lt;/dd&gt;
&lt;dt&gt;vs&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 수직 분할 라인에&amp;nbsp;포인터&lt;/dd&gt;
&lt;dt&gt;vd&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 수직 분할 라인으로&amp;nbsp;드래그&lt;/dd&gt;
&lt;dt&gt;a&lt;/dt&gt;
&lt;dd&gt;어디든&amp;#8230;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;마우스 모양(shape)는 다음 모양으로&amp;nbsp;보여짐&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%" /&gt;
&lt;col width="18%" /&gt;
&lt;col width="74%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;avail&lt;/th&gt;
&lt;th class="head"&gt;이름&lt;/th&gt;
&lt;th class="head"&gt;뭐냐면&amp;#8230;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;arrow&lt;/td&gt;
&lt;td&gt;기본(&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;) 마우스 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;blank&lt;/td&gt;
&lt;td&gt;모든 곳에서 포인터가 아닌경우 (사용시 주의!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;beam&lt;/td&gt;
&lt;td&gt;I-빔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;updown&lt;/td&gt;
&lt;td&gt;상하 크기 조절 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;leftright&lt;/td&gt;
&lt;td&gt;좌우 크기 조절 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;busy&lt;/td&gt;
&lt;td&gt;시스템에서 사용하는 busy 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;시스템에서 사용하는 &amp;#8216;no input&amp;#8217; 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;udsizing&lt;/td&gt;
&lt;td&gt;상하 크기 재조절을 가르킴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;lrsizing&lt;/td&gt;
&lt;td&gt;좌우 크기 재조절를 가르킴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;crosshair&lt;/td&gt;
&lt;td&gt;큰 &amp;#8216;+&amp;#8217;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;hand1&lt;/td&gt;
&lt;td&gt;검은색 손&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;hand2&lt;/td&gt;
&lt;td&gt;흰색 손&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;pencil&lt;/td&gt;
&lt;td&gt;뭘 쓰고 싶을때&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;question&lt;/td&gt;
&lt;td&gt;큰 &amp;#8216;?&amp;#8217;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;rightup-arrow&lt;/td&gt;
&lt;td&gt;오른쪽 위를 가르키는 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;up-arrow&lt;/td&gt;
&lt;td&gt;위를 가르키는 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;number&amp;gt;&lt;/td&gt;
&lt;td&gt;모든 X11 포인트 숫자 (&lt;tt class="docutils literal"&gt;X11/cursorfont.h&lt;/tt&gt; 에서 확인 가능)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;avail&amp;#8221; 칼럼의 내용에서 &amp;#8216;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt;&amp;#8216; 의 경우 &lt;a class="reference external" href="http://neovim.io/doc/user/os_win32.html#Win32"&gt;Win32&lt;/a&gt; 에서 사용하는 것이고, &lt;cite&gt;x_&lt;/cite&gt; 는 X11에서 사용하는 것에 대한 것임.
Any modes not specified or shapes not available use the normal mouse pointer. - 영어의 짧음으로 뭔말인지&amp;nbsp;모르겠다.&lt;/p&gt;
&lt;p&gt;예로 &lt;tt class="docutils literal"&gt;:set mouseshape=s:udsizing,m:mo&lt;/tt&gt; 요로케 작성가능. 이렇게 해놓으면, (클릭이후 마우스가 이상태에서 효과가 없으면,)상태 바에 마오스를 올리면 크기 조절 화살표로 변경되고, 화면에서 &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#hit-enter"&gt;hit-enter&lt;/a&gt; 프롬프트일때 no input을&amp;nbsp;가르키게됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousetime"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousetime'"&gt;mousetime&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mouset&amp;#8217;  number (기본&amp;nbsp;500)&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;, &lt;span class="caps"&gt;MS&lt;/span&gt;-&lt;span class="caps"&gt;DOS&lt;/span&gt;, Win32, Unix의 &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt; 에서만 사용 가능. 다중 클릭으로 인식할 수 있는 두 번째 클릭에 대한 msec의 최대 값을&amp;nbsp;정의함.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sat, 15 Aug 2015 16:00:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-07-25:2015/07/25/vim-mouse-mode/</guid><category>vim</category><category>vi</category><category>vimrc</category><category>mouse</category><category>기본 설정</category></item><item><title>Cloud Native Computing Foundation</title><link>http://ujuc.github.io/2015/07/22/cncf-org/</link><description>&lt;p&gt;얼마 전 아시는 분께서 공유를 해주신 사이트&amp;#8230;
구글에서 &lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; v1.0을 공개하면서 &lt;a class="reference external" href="https://cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt; 와 함께 Container의 생태계를 만들어나갈 거라 전함. &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기의 목표(?) 미션은 현대 분산 시스템 환경에 특화된 새로운 컴퓨팅 패러다임을 생성하고 진행하는 데 있다고 한다. &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt; (무의식적으로 번역하고&amp;nbsp;있었다.;;)&lt;/p&gt;
&lt;p&gt;또 번역하다가&amp;nbsp;때리치웠&amp;#8230;&lt;/p&gt;
&lt;p&gt;이번껀 구글에서는 Container를 직접 구현하는 것보다는 그것은 _OpenContainers 로 넘기고 자기들은 오케스트레이션에 더 많은 작업을 하겠다는 의도가 보이는 건 나만의&amp;nbsp;느낌&amp;#8230;&lt;/p&gt;
&lt;p&gt;참가 업체들을 보면 항상 보던 업체들이 많이 보여서&amp;#8230; 뭐 딱히 뭐라 말하기&amp;nbsp;뭐하다는&amp;#8230;&lt;/p&gt;
&lt;p&gt;잘 진행될까 고민되고, 언제쯤 저들이 사용한 것들에 대한 내용을 말해줄 것인지에 대한 내용을 확인 할 수 있을는지 두고두고 봐야 될 프로젝트가&amp;nbsp;늘었다.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;관련&amp;nbsp;소식기사&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://techcrunch.com/2015/07/21/as-kubernetes-hits-1-0-google-donates-technology-to-newly-formed-cloud-native-computing-foundation-with-ibm-intel-twitter-and-others/?ncid=pushup"&gt;As Kubernetes Hits 1.0, Google Donates Technology To Newly Formed Cloud Native Computing&amp;nbsp;Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxfoundation.org/news-media/announcements/2015/07/new-cloud-native-computing-foundation-drive-alignment-among"&gt;New Cloud Native Computing Foundation to Drive Alignment Among Container&amp;nbsp;Technologies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://googlecloudplatform.blogspot.kr/2015/07/Kubernetes-V1-Released.html"&gt;http://googlecloudplatform.blogspot.kr/2015/07/Kubernetes-V1-Released.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://cncf.io/about/our-mission"&gt;https://cncf.io/about/our-mission&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 22 Jul 2015 22:36:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-07-22:2015/07/22/cncf-org/</guid><category>google</category><category>kubernetes</category><category>cloud</category><category>container</category></item><item><title>OpenStack 새로운 버전 매기기 변경</title><link>http://ujuc.github.io/2015/06/28/openstack-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B2%84%EC%A0%84-%EB%A7%A4%EA%B8%B0%EA%B8%B0-%EB%B3%80%EA%B2%BD/</link><description>&lt;p&gt;Liberty 부터는 버전에 관련된 부분이 변경이 되었다. 이번에 Liberty-1 개발 마일스
톤 이메일 &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; 에서 보면 알 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;그리고 이것에 대한 자세한 내용은 &lt;a class="reference external" href="http://ttx.re/new-versioning.html"&gt;New OpenStack Component Versioning&lt;/a&gt; 에서 확인&amp;nbsp;하면된다.&lt;/p&gt;
&lt;p&gt;언제부터인가 OpenStack 버전은 &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YEAR&lt;/span&gt;.N&lt;/tt&gt; 으로 버전을 진행하고 있었고,  Kilo의 경우도
2015.1로 넘어가고 있었다. 스위프트의 경우에는 다르게 &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;X.Y.&lt;/span&gt;Z&lt;/tt&gt; 버전으로 계속 발
표를 해오기도했다. (이건 Swift를 주도적으로 개발하고 있는 &lt;a class="reference external" href="https://swiftstack.com"&gt;SwiftStack&lt;/a&gt; 이라는 회사
에서 관리하고 있는&amp;nbsp;부분이기도하다.)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YEAR&lt;/span&gt;.N&lt;/tt&gt; 형식으로 진행하면서 문제가 좀 있었나보다. 글을 읽어보면 백포트 하기도
쉽지 않고, 모든 프로젝트들이 정식 릴리즈 일시와 맞지 않으면 중간에 버전을 따로
해서 내놓고 전체 출시할때는 같은 방법으로 내고 해서 햇갈리는 부분도 있고&amp;nbsp;했던듯.&lt;/p&gt;
&lt;p&gt;라이브러리가 릴리즈되면서 어떤게 어떤건지도 모르겠다는&amp;#8230;&amp;nbsp;말도나온건가&amp;#8230;&lt;/p&gt;
&lt;p&gt;저번 벤쿠퍼 디자인 서밋에서 기본 이야기를 나누고 메일링까지 와서 이야기를 나눈후
이전에 발표된 버전을 통합하여 계산하는 것으로 했다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;Nova의 경우, 첫 Austin 부터 진행해왔으니 12.0.0. Bexar에서 추가된 Glance는
11.0.0. Diablo에서 추가된 Keystone, Horizon은 8.0.0.
(이해가 안되는건 왜 Cinder가&amp;#8230; 8.0.0&amp;nbsp;인건지&amp;#8230;;)&lt;/p&gt;
&lt;p&gt;이렇게 바뀌면 혼란스런 부분이 있겠지만 장기적으로 본다면, 수정하거나 백포트하여
구성할때는 괜찮기도 하겠다는&amp;#8230; 생각이 들기도한다. 그리고 년도 표기를 하지 않음
으로써 실제 서비스시 관련된 내용들을 모두 보여주지 않아도된다는 느낌도 없지 않아&amp;nbsp;있고&amp;#8230;&lt;/p&gt;
&lt;p&gt;그런데 이것보다 중요한건&amp;#8230; 버전업을 6개월마다 하는 것보다는 조금 더 안정적인 버
전이나 &lt;span class="caps"&gt;LTS&lt;/span&gt; 버전같은게 나와줘야되지 않을까하는데&amp;#8230; 뭐 이건 관련 내용을 찾으면 다
시 말을 해야겠다. 너부 빨리 바뀌는 부분들이 많아서 조직에 개발자가 없다면, 특히
나 우리나라 SI의 경우에는 대응하기가 쉽지&amp;nbsp;않아보인다.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html"&gt;http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sun, 28 Jun 2015 22:24:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-06-28:2015/06/28/openstack-새로운-버전-매기기-변경/</guid><category>openstack</category><category>versioning</category></item><item><title>CentOS 7 에서 zabbix-server 에러</title><link>http://ujuc.github.io/2015/06/14/centos-7-%EC%97%90%EC%84%9C-zabbix-server-%EC%97%90%EB%9F%AC/</link><description>&lt;p&gt;2주전에 받은 숙제인데, 회사일이 바빠서 못하고 있다가 조금 시간이 있어서 설정하고&amp;nbsp;있는데.&lt;/p&gt;
&lt;p&gt;CentOS 7에다가 Zabbix를 올리고있다. VM에서 4시간동안 서비스가 제대로 안돌아서, 내 설정이 잘못되었나 하여, 설치하는 메뉴얼도 바꿔서 확인을 했는데도 안되길레 혹시나 로그에는 있나하여 들어갔더니 &lt;tt class="docutils literal"&gt;journal&lt;/tt&gt; 로 보여지는 것 말고도
&lt;tt class="docutils literal"&gt;/var/log/zabbix&lt;/tt&gt; 가 보여서&amp;nbsp;확인했더니..&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
using configuration file: /etc/zabbix/zabbix_server.conf
current database version (mandatory/optional): 02040000/02040000
required mandatory version: 02040000
listener failed: zbx_tcp_listen() fatal error: unable to serve on any address [[-]:10051]
Got signal [signal:11(SIGSEGV),reason:1,refaddr:0x18]. Crashing ...
&lt;/pre&gt;
&lt;p&gt;음? 서버를 못찾는다고..?? 뭔 말이지. 그래서 그냥 통짜로 복사&amp;nbsp;붙여넣기.&lt;/p&gt;
&lt;p&gt;구글에서 말하는 것들이 많은데 그 중에서 일본사람이 작성한 글. &lt;a class="reference external" href="http://qiita.com/_BSmile_/items/61932e45de5330190027"&gt;CentOS7.1 で zabbix-serverの起動が失敗する話とその解決方法&lt;/a&gt; 에서는 &lt;span class="caps"&gt;CV&lt;/span&gt;#-2014-0092는&amp;#8230; gnutls에 패치가되었는데..
&lt;span class="caps"&gt;CVE&lt;/span&gt;-2014-8564는 적용이 안되서 그부분에 대한 내용을 추가하던지 수정을 해야된다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;자세한건 구글 번역기로 사이트를 돌려서 보도록하자. 그렇다보니 여기서 추천하는 방법은 &lt;tt class="docutils literal"&gt;trousers&lt;/tt&gt; 를 업데이트 하는 방법을 추천하고&amp;nbsp;있다.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo rpm -Uvh https://kojipkgs.fedoraproject.org/packages/trousers/0.3.11.2/3.fc20/x86_64/trousers-0.3.11.2-3.fc20.x86_64.rpm
Retrieving https://kojipkgs.fedoraproject.org/packages/trousers/0.3.11.2/3.fc20/x86_64/trousers-0.3.11.2-3.fc20.x86_64.rpm
Preparing...                          ################################# [100%]
Updating / installing...
1:trousers-0.3.11.2-3.fc20         ################################# [ 50%]
Cleaning up / removing...
2:trousers-0.3.11.2-3.el7          ################################# [100%

$ sudo systemctl start zabbix-server
&lt;/pre&gt;
&lt;p&gt;작동되는 것을 확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;이 글은 &lt;strong&gt;CentOS 7.1.1503&lt;/strong&gt; 버전, &lt;strong&gt;Zabbix 2.4.5&lt;/strong&gt; 버전에서 확인되었고 테스트되었다. 이후 버전에서는 관련 버그가&amp;nbsp;잡히길.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sun, 14 Jun 2015 22:30:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-06-14:2015/06/14/centos-7-에서-zabbix-server-에러/</guid><category>zabbix</category><category>centos</category></item><item><title>Rocket.Chat 번역기</title><link>http://ujuc.github.io/2015/06/02/rocket.chat-%EB%B2%88%EC%97%AD%EA%B8%B0/</link><description>&lt;p&gt;어제 //build/ Seoul 행사를 끝내고, 곧장 내려와 메일을 읽던 중, Github 데일리 메
일링에 추가된 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat"&gt;Rocket.Chat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;심심해서 코드 보던 중 발견한 &lt;tt class="docutils literal"&gt;i18n&lt;/tt&gt;. 클클클 번역이나 해야지 짧을 꺼야&amp;#8230; 그런 심보
로 시작. 10분 만에 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt;&amp;nbsp;등록.&lt;/p&gt;
&lt;p&gt;이유는 영어와 한국어의 어순이 반대다 보니&amp;#8230; &lt;tt class="docutils literal"&gt;%s by %s&lt;/tt&gt; 의 경우, 한국어로 &lt;tt class="docutils literal"&gt;%s에서
%s로&lt;/tt&gt; 로 번역이 되어야 되는데. 어떤 놈이 앞의 &lt;tt class="docutils literal"&gt;%s&lt;/tt&gt; 인지 한국어에서는 알 수 없는 문제
가 발생. 그래서 짧은 영어로 적었더니. 친절하게 제목도 바꿔주고, 테스트할 수 있게
PR해줄 수 있느냐기에 신속하게 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;&lt;span class="caps"&gt;PR&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;그렇게 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt; 는 해결되었고, 번역은&amp;nbsp;반영되었다.&lt;/p&gt;
&lt;p&gt;소스 중에 번역 페이지가 있으면 항상 보지는 않았는데&amp;#8230; 이번에는 우연히 번역
을 보았고, PR을 뒤져보니 PR을 보내면 웬만해서는 받아주는 듯하여 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt; 부터 날리
고 어떻게 할지 기다린 게 잘 된듯하다.
뭐 이렇게 녹색 상자 한 칸 더 체우 는기지&amp;#8230;&amp;nbsp;ㅋㅋㅋㅋㅋ&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 02 Jun 2015 22:45:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-06-02:2015/06/02/rocket.chat-번역기/</guid><category>자랑질</category><category>chat</category><category>rocketchat</category><category>번역</category><category>javascript</category><category>meteo</category></item><item><title>Edison pip install error</title><link>http://ujuc.github.io/2015/05/14/edison-pip-install-error/</link><description>&lt;p&gt;pip를 설치하고 패키지를 확인하려고하면 다음과 같은 에러가&amp;nbsp;발생한다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# pip install flask
&lt;/span&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call las&lt;span class="o"&gt;)&lt;/span&gt;:
File &lt;span class="s2"&gt;&amp;quot;/usr/bin/pip&amp;quot;&lt;/span&gt;, line 5, in &amp;lt;module&amp;gt;
from pkg_resources import load_entry_point
ImportError:No module named pkg_resources
&lt;/pre&gt;
&lt;p&gt;발생하는건 &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; 패키지가 설치되지 않아서&amp;nbsp;문제가&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# wget --no-check-certificate \
&lt;/span&gt;  https://pypi.python.org/packages/source/s/setuptools/setuptools-15.2.tar.gz#md5&lt;span class="o"&gt;=&lt;/span&gt;a9028a9794fc7ae02320d32e2d7e12ee
&lt;span class="c1"&gt;# tar zxf setuptools-15.2.tar.gz
# python setuptools-15.2/ez_setup.py&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--upgrade&lt;/span&gt; pip&lt;/tt&gt; 로 제대로 설치된건지&amp;nbsp;확인하자.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;기본 설치되는 pip 버전이 낮으니.. 업글해줘야되기도&amp;nbsp;해서..&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 14 May 2015 01:39:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-05-14:2015/05/14/edison-pip-install-error/</guid><category>edison</category><category>pypi</category><category>pip</category><category>python</category><category>error</category></item><item><title>Edison 초기 설정</title><link>http://ujuc.github.io/2015/05/13/edison-%EC%B4%88%EA%B8%B0-%EC%84%A4%EC%A0%95/</link><description>&lt;div class="section" id="yocta-project-update"&gt;
&lt;h2&gt;Yocta Project&amp;nbsp;Update&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;무엇이든 처음 설정할때는 기본 OS먼저 업데이트를 해줘야된다. 최신 Yocta Project
파일을 받아서&amp;nbsp;설치해준다.&lt;/li&gt;
&lt;li&gt;최신이 아니라면 몇몇 기능이 제대로 되지 않아 다시 설치해줘야될 수 도 있으니 꼭&amp;nbsp;하도록하자.&lt;/li&gt;
&lt;li&gt;컴파일을 진행해도 된다만, 시간이 많거나, 꼭 필요한 패키지가 없거나, 기본적으로
설정을 변경해주어야 할때빼고는&amp;nbsp;하지말자.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intel.com/support/edison/sb/CS-035180.htm"&gt;Yocta 컴파일 이미지&amp;nbsp;다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/intel-edison-flashing-firmware-on-os-x-wired"&gt;플래싱&amp;nbsp;순서&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;위의 사진대로 USB를 연결해주고 (2번에&amp;nbsp;연결)&lt;/li&gt;
&lt;li&gt;Edison 외장디스크가 깨끗한지 확인한다.
* 만약 이전의 이미지 내용이 있다면, &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;Edison/\.*&lt;/span&gt;&lt;/tt&gt; 를 이용하여 모든 내용을 삭제한 다음 받은 이미지를 올리면 된다.
* Edison 파티션의 정보를 확인하여 포멧이 FAT16이라면 디스크 유틸에서 포맷하여 FAT32로&amp;nbsp;변경해주도록.&lt;/li&gt;
&lt;li&gt;다운 받은걸&amp;nbsp;복사하자.&lt;/li&gt;
&lt;li&gt;시리얼 통신으로 Edison에 접근한다.
* &lt;tt class="docutils literal"&gt;screen &lt;span class="pre"&gt;/dev/cu.usbserial-A****&lt;/span&gt; 115200 &lt;span class="pre"&gt;-L&lt;/span&gt;&lt;/tt&gt;
* &lt;tt class="docutils literal"&gt;subserial&lt;/tt&gt; 로 접근을 하면되는데 A뒤의 이름은 변경될 수 있어 작성하지&amp;nbsp;않았다.&lt;/li&gt;
&lt;li&gt;아무런 내용이 안나온다면 들어간 것이니, 엔터&amp;nbsp;두번.&lt;/li&gt;
&lt;li&gt;로그인후 &lt;cite&gt;reboot ota&lt;/cite&gt; 명령어로 재시작.
* &lt;cite&gt;ota&lt;/cite&gt; 로 할 경우, 부팅때 Edison 외장하드에 넣어둔 부팅 이미지들로 새롭게 씌우고 관련 내용들을 업데이트하여 사용할 수 있도록&amp;nbsp;되어있다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 제목에 연결된 링크로 가서 확인하고 작업을&amp;nbsp;진행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Edison&amp;nbsp;구성&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 구성을 하는데 필요한 명령어는 &lt;tt class="docutils literal"&gt;configure_edison&lt;/tt&gt; 으로 작업을 구성하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;li&gt;전체 설정을 다 변경하고 싶으면 &lt;tt class="docutils literal"&gt;configure_edison &lt;span class="pre"&gt;--setup&lt;/span&gt;&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="hostname"&gt;
&lt;h3&gt;Hostname&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --name&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;다음에 나오는 것들에따라서 입력해주면&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wifi"&gt;
&lt;h3&gt;Wifi&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --wifi&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;근처에 있는 Wifi들이 다 잡힐 것이나 만약 아무것도 안보인다면 firmware를 업그레
이드 한 뒤에 다시 명령어를 입력하여&amp;nbsp;확인하도록하자.&lt;/li&gt;
&lt;li&gt;버전업이 안되어있는 경우, 잡지&amp;nbsp;못하더라.&lt;/li&gt;
&lt;li&gt;설정이 완료되고 나면 URL을 보여주니 그것을 이용하여 접근하면&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Screen으로 시리얼 접근하는 것은 사용하기가&amp;nbsp;불편하다.&lt;/li&gt;
&lt;li&gt;비밀번호를 설정해주게되면 SSH로 접근이 가능하게 되니 그부분을 추가하여 작업을
진행하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --password&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="package"&gt;
&lt;h2&gt;Package&amp;nbsp;관리자&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Edison은 opkg(OpenPackaGe Managemet)라는 비교적 가벼운 패키지 관리자를 사용한
다고 한다. 몇몇 설정이 그렇게 되어있었다. (Yocta Projectdp서 사용하는데,
OpenWRT에서 사용하고&amp;nbsp;있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;패키지 관리자 설치 및&amp;nbsp;설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/managing-devkit-libraries-intel-edison-or-intel-galileo-board"&gt;Intel&amp;nbsp;page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# echo &amp;quot;src intel-iotdk http://iotdk.intel.com/repos/1.1/intelgalactic&amp;quot; &amp;gt; \
&lt;/span&gt;    /etc/opkg/intel-iotdk.conf# opkg update&lt;span class="p"&gt;;&lt;/span&gt; opkg upgrade
&lt;span class="c1"&gt;# opkg update; opkg upgrade&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이렇게하면 기본적인 것들은 추가가 된다만 패키지가 많지는&amp;nbsp;않다.&lt;/li&gt;
&lt;li&gt;더 많은 패키지를 사용하려면 레포지토리를 추가해줘야&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# vi /etc/opkg/base-feeds.conf
&lt;/span&gt;
src/gz all http://repo.opkg.net/edison/repo/all
src/gz edison http://repo.opkg.net/edison/repo/edison
src/gz core2-32 http://repo.opkg.net/edison/repo/core2-32

&lt;span class="c1"&gt;# opkg update&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 13 May 2015 22:46:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-05-13:2015/05/13/edison-초기-설정/</guid><category>edison</category><category>개발</category><category>embedded</category><category>임베디드</category><category>intel</category><category>iot</category></item><item><title>Status bar &amp; Title bar 숨기기</title><link>http://ujuc.github.io/2015/04/23/status-bar-&amp;-title-bar-%EC%88%A8%EA%B8%B0%EA%B8%B0/</link><description>&lt;p&gt;요즘 안드로이중이다. 오랜만에 했더니 봐야될께 많다. 특히 UI를 많이 안해서
그런가.. 감이 잘 안온다는&amp;nbsp;문제도&amp;#8230;&lt;/p&gt;
&lt;p&gt;SplashActivity를 추가해줘야되는데. 안드로이드에서 뭘 알아야지.. 그냥 예제에 있는
것들을 찾아서 변경해 추가를 했지만, 정리를 한번 해놔야되서&amp;#8230; 뭐 간단하게 구성은
되어있다만. 이렇게라도 적어놔야 나중에 또 다른곳에서 엉뚱한것을&amp;nbsp;안찾지&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="title-bar"&gt;
&lt;h2&gt;Title bar&amp;nbsp;숨기기&lt;/h2&gt;
&lt;p&gt;이것을 해줄려면 &lt;tt class="docutils literal"&gt;style&lt;/tt&gt; 을 구성해서 해줘야된다. 뭔가 많이 불편해서 다른
곳에서도 가능한가를 찾아봤지만, 안된다. 뭐 특정 구역에서만 가능하게 해놨나보다.
그져 따라서&amp;nbsp;해놔야지&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에&amp;nbsp;추가한다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Theme.Splash&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:Theme&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windwoNoTitle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/stlye&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;위와 같이 구성을 하고서 Activity에 작성을&amp;nbsp;해주면된다.&lt;/p&gt;
&lt;pre class="code c# literal-block"&gt;
&lt;span class="na"&gt;[Activity (Theme = &amp;quot;&amp;#64;style/Theme.Splash&amp;quot;, MainLauncher = true, NoHistory =
ture)]&lt;/span&gt;
&lt;span class="n"&gt;brabra&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;이렇게 하고 필요한 내용들을 추가해주면 된다. 그러면 타이틂 바만 없어지는 것을
확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status-bar"&gt;
&lt;h2&gt;Status bar&amp;nbsp;숨기기&lt;/h2&gt;
&lt;p&gt;동일한 &lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에 &lt;tt class="docutils literal"&gt;&amp;lt;item&amp;gt;&lt;/tt&gt; 을&amp;nbsp;변경해주면된다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowFullscreen&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;ture&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;참고&amp;nbsp;사이트&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.androidpub.com/4710"&gt;전체화면&amp;nbsp;사용하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 23 Apr 2015 01:25:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-04-23:2015/04/23/status-bar-&amp;-title-bar-숨기기/</guid><category>android</category><category>기본</category><category>난 모르겠다.</category></item><item><title>Odin is?</title><link>http://ujuc.github.io/2015/04/10/odin-is/</link><description>&lt;p&gt;Mirantis 블로그를 보다보니&amp;#8230; Parallels의 이름이 올라오면서 &lt;a class="reference external" href="https://www.mirantis.com/blog/parallels-goes-open-source-wants-openstacks-help-penetrate-enterprise/"&gt;Parallels goes open
source, wants OpenStack&amp;#8217;s help to penetrate enterprise&lt;/a&gt; 라는 글이&amp;nbsp;올라왔다.&lt;/p&gt;
&lt;p&gt;내용은 간단하다. Pareallels에서 기업용으로 &lt;a class="reference external" href="http://www.odin.com/"&gt;Odin&lt;/a&gt; 이라는 서비스를 런칭했는데,
자사의 하이퍼 바이저의 개발을 중지하고 KVM을 사용, OpenStack의 도움으로
컨테이너를 이용하는 서비스 개발에 집중을 하겠다는&amp;nbsp;소식&amp;#8230;&lt;/p&gt;
&lt;p&gt;뭐 서비스 측이랑 이야기가 조금 다른 부분이 있긴하다만&amp;#8230; Parallels가 OpenStack
기업 멤버로 등록 Odin으로 등록되어있다. 골드맴버로 들어올려는걸 파운데이션에서&amp;nbsp;거절했다고&amp;#8230;&lt;/p&gt;
&lt;p&gt;그냥 푸념이지만&amp;#8230; 분명 많은 곳에서 하고 있는 것같은데&amp;#8230; 파운데이션 후원사
목록에는 아무도 없다는게&amp;#8230; 좀&amp;nbsp;그래&amp;#8230;&lt;/p&gt;
&lt;p&gt;여는 글은 Odin으로 했으나 맺는 글은&amp;#8230; 오픈소스 프로젝트 기부에대한&amp;nbsp;푸념으로&amp;#8230;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Mon, 28 Mar 2016 00:00:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-04-10:2015/04/10/odin-is/</guid><category>openstack</category><category>cloud</category><category>parallels</category></item><item><title>백업 완료</title><link>http://ujuc.github.io/2015/04/03/%EB%B0%B1%EC%97%85-%EC%99%84%EB%A3%8C/</link><description>&lt;p&gt;github에 블로그를 만든 이유는 한가지&amp;#8230; 놀면서 개발에대한 이야기를 써보자 였다.
그래서 첫 툴로 많이 사용하는 &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; 을 이용해서 구축&amp;#8230; 그러나 얼마 가지 못해
Jekyll이 제대로 돌아가지 못하는 상황에&amp;#8230; &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;그래서 결국 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 가 쉽다고 하여 갔으나&amp;#8230; 뭔놈의 테마가 마음에 드는넘이
없는지&amp;#8230; 바꾸는데만 일주일&amp;#8230; 아&amp;#8230;&amp;nbsp;안해&amp;#8230;&lt;/p&gt;
&lt;p&gt;그래서 이번엔 OpenStack 문서화팀에서 문서들을 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt; 형식으로 작성하여
Sphinx로 문서를 컴파일 할꺼라는 소리가 있어서&amp;#8230; 배워봐야지 하면서 Python으로
정적 페이지를 만들어주는 &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 으로 스타표시는 오래됐는데 인자사
사용해볼꺼라고&amp;nbsp;작업을&amp;#8230;&lt;/p&gt;
&lt;p&gt;그런데 글쓰기 편하고 설정하기가 쉽다. Python을 좀 했다고 그런건지&amp;#8230; 기본
설정들을 Make 파일로 명령을 내릴 수 있도록 구성을 해놔서 그런지&amp;#8230; 직접 명령어를
칠필요도 없어서&amp;#8230; 그렇다고 내가 작성할 필요도 없는거고 (가장&amp;nbsp;크다.).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 설정법에 대해서는 주말에 작성해야겠다. 이것저것 설정이나 추가하거나
손대야될 것들이 이것저것. 그리고 이놈의 파이썬 개발자들은 옵션을 뭐이리도 많이&amp;nbsp;넣어놓는건지.;;;&lt;/p&gt;
&lt;p&gt;그리고 첫번째때 주의해야할 것들도 있고, 그것때문에 한번 날렸다가 다시&amp;nbsp;만들었&amp;#8230;&lt;/p&gt;
&lt;p&gt;이제 산적해있는 것들이나 빨리&amp;nbsp;써야겠다.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Mon, 28 Mar 2016 00:00:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-04-03:2015/04/03/백업-완료/</guid><category>백업완료</category></item><item><title>TI에서 베터리를 가장 적게 먹는 칩 출시</title><link>http://ujuc.github.io/2015/03/16/ti-lowpwoer-soc-release/</link><description>&lt;p&gt;&lt;a class="reference external" href="http://www.kidd.co.kr/news/178946"&gt;산업일보&lt;/a&gt; 에 &amp;#8220;&lt;span class="caps"&gt;TI&lt;/span&gt;, 베터리 없는 IoT 커넥티비티 구현&amp;#8221; 이라는 뉴스가 올라왔다.
뭔일인가 해서 봤더니만&amp;#8230; SimpleLink라는 초전력 플랫폼을 개발했다는&amp;nbsp;소리였다.&lt;/p&gt;
&lt;p&gt;기본 코어는 &lt;span class="caps"&gt;ARM&lt;/span&gt;® Cortext®-M3 MCU를 사용했고, 플래시 / &lt;span class="caps"&gt;RAM&lt;/span&gt;, &lt;span class="caps"&gt;ADC&lt;/span&gt;, 이것 저것들을
같이 묶은 것에 통신은 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Bluetooth_low_energy"&gt;Bluetooth Low Energy(&lt;span class="caps"&gt;BLE&lt;/span&gt;)&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ZigBee"&gt;ZigBee®&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/6LoWPAN"&gt;6LoWPAN&lt;/a&gt;,
sub-1GHz, &lt;a class="reference external" href="https://docs.zigbee.org/zigbee-docs/dcn/09/docs-09-5231-03-rmwg-understanding-zigbee-rf4ce.pdf"&gt;ZigBee &lt;span class="caps"&gt;RF4CE&lt;/span&gt;™&lt;/a&gt;, 최대 5Mbps 고유모드로 지원한다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;제목에서는 베터리가 없다고 말을 했지만.. 침 설계된 내용들을&amp;nbsp;확인해보면&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;RX&lt;/span&gt;: 5.9&amp;nbsp;mA&lt;/li&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;TX&lt;/span&gt; at 0 dBm: 6.1&amp;nbsp;mA&lt;/li&gt;
&lt;li&gt;Active-mode Tx at +5 dBm: 9.1&amp;nbsp;mA&lt;/li&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;MCU&lt;/span&gt;: 61&amp;nbsp;µA/MHz&lt;/li&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;MCU&lt;/span&gt;: 48.5&amp;nbsp;CoreMark/mA&lt;/li&gt;
&lt;li&gt;Active-mode Sensor Controller: 8.2&amp;nbsp;µA/MHz&lt;/li&gt;
&lt;li&gt;Standby: 1 µA (&lt;span class="caps"&gt;RTC&lt;/span&gt; Running and &lt;span class="caps"&gt;RAM&lt;/span&gt;/&lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;nbsp;Retention)&lt;/li&gt;
&lt;li&gt;shutdown: 100 nA (Wakeup on External&amp;nbsp;Events)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;적게 먹기는 한다. 전력은 조금 먹지만, 전압이 1.8에서 3.8V라고 적혀있는 걸보면&amp;#8230;
건전지 2개는&amp;nbsp;들어가야되는&amp;#8230;&lt;/p&gt;
&lt;p&gt;이 아이드은 셈플로 몇개 받을 수 있는지 한번 알아볼까&amp;#8230; 최대 GPIO도 31개면&amp;nbsp;괜찮은데&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2630"&gt;&lt;span class="caps"&gt;CC2630&lt;/span&gt;&lt;/a&gt; : ZigBee,&amp;nbsp;6LoWPAN&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2640"&gt;&lt;span class="caps"&gt;CC2640&lt;/span&gt;&lt;/a&gt; : Bluetooth&amp;nbsp;Smart&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2650"&gt;&lt;span class="caps"&gt;CC2650&lt;/span&gt;&lt;/a&gt; : Bluetooth Smart, ZigBee, 6LoWPAN, ZigBee &lt;span class="caps"&gt;RF4CE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc1310"&gt;&lt;span class="caps"&gt;CC1310&lt;/span&gt;&lt;/a&gt; :&amp;nbsp;Sub-1GHz&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2620"&gt;&lt;span class="caps"&gt;CC2620&lt;/span&gt;&lt;/a&gt; : ZigBee &lt;span class="caps"&gt;RF4CE&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 02 Apr 2015 23:05:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-16:2015/03/16/ti-lowpwoer-soc-release/</guid><category>ti</category><category>chip</category><category>iot</category><category>m3</category><category>arm</category><category>ble</category><category>low energy</category></item><item><title>xonsh?</title><link>http://ujuc.github.io/2015/03/16/xonsh/</link><description>&lt;p&gt;&lt;a class="reference external" href="http://xonsh.org/index.html"&gt;xonsh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python-ish, BASHwards-compatible shell language and command&amp;nbsp;prompt.라고&amp;#8230;&lt;/p&gt;
&lt;p&gt;저장용. Zsh을 쓰고 있어서 이것을 사용할 일이&amp;#8230;
그리고 기본이 3.4라&amp;#8230; 실질적으로 사용하기에는 쉽지 않을듯. 몇몇 3.x 버전을
기본으로 장착한 배포판의 경우엔&amp;nbsp;다르겠지만.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Fri, 03 Apr 2015 00:23:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-16:2015/03/16/xonsh/</guid><category>python</category><category>shell</category></item><item><title>sys.json</title><link>http://ujuc.github.io/2015/03/10/sys-json/</link><description>&lt;p&gt;&lt;a class="reference external" href="https://github.com/EricR/sys.json"&gt;EricR/sys.json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;좀 독특하다고&amp;nbsp;해야되나?&lt;/p&gt;
&lt;p&gt;Golang을 이용해서 웹을 간단히 띄우고, &lt;tt class="docutils literal"&gt;proc&lt;/tt&gt; 를 이용해서 내용들을 불러와 &lt;span class="caps"&gt;JSON&lt;/span&gt;
형태로 뽑아주도록&amp;nbsp;되어있다.&lt;/p&gt;
&lt;p&gt;몇몇 부분을 수정하거나 작업을 해야되긴 하겠지만 이 정도로 작은 아이를 띄워
무리없이 가져올 수 있다면 그것도 좋은 방법이&amp;nbsp;아닐까&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;내가 생각하는 비슷한&amp;nbsp;패키지&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;nicolargo/glances&lt;/a&gt; - Python으로 구성되어있으며, 서버 형식으로 API들을 뽑아 올
수 있다. 물론 간단한 웹으로도&amp;nbsp;가능하다.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 10 Mar 2015 13:52:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-10:2015/03/10/sys-json/</guid><category>go</category><category>json</category><category>api</category></item><item><title>git-ftp로 ftp 클라이언트를!</title><link>http://ujuc.github.io/2015/03/04/git-ftp/</link><description>&lt;p&gt;백수 3개월 들어가지는지라 깃 배회중&amp;#8230; 누군가 스타를 누른 &lt;a class="reference external" href="https://github.com/git-ftp/git-ftp"&gt;git-ftp&lt;/a&gt;. git을
이용해서 &lt;span class="caps"&gt;FTP&lt;/span&gt; 클라잉너트를&amp;nbsp;만들었다.&lt;/p&gt;
&lt;p&gt;뭔짓이지&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼&amp;#8230; 만든 이유가 FTP만 지원하는 웹호스팅 때문에 만들었다고 &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt;&amp;#8230; 역시 다른
구멍을 파는 사람들이&amp;nbsp;있구나&amp;#8230;&lt;/p&gt;
&lt;p&gt;변화점까지 확인할 수 있다는건 git의 장점을&amp;nbsp;가져왔구나.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://github.com/git-ftp/git-ftp/blob/develop/INSTALL.md"&gt;설치&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본&amp;nbsp;설치&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ git clone https://github.com/git-ftp/git-ftp.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; git-ftp
$ git tag
$ git checkout &amp;lt;tag&amp;gt;
$ sudo make install
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;업그레이드의&amp;nbsp;경우&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ git pull
$ git tag
$ git checkout &amp;lt;tag&amp;gt;
$ sudo make install
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt;&amp;nbsp;X&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ brew install git
$ brew install curl --with-ssl --with-libssh2
$ brew install git-ftp
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 을 기본으로 설치했는데 &lt;tt class="docutils literal"&gt;ssl&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;libssh2&lt;/tt&gt; 를 사용할 수 있도록 설정이
필요한&amp;nbsp;갑다.&lt;/li&gt;
&lt;li&gt;git이 &lt;tt class="docutils literal"&gt;ssl&lt;/tt&gt; 을 사용하긴&amp;nbsp;한다만&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;사용법&lt;/h2&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# Pushing for the fist time
&lt;/span&gt;$ git ftp init -u &amp;lt;user&amp;gt; -P ftp://host.example.com/public_html

&lt;span class="c1"&gt;# using
&lt;/span&gt;$ git ftp push -u &amp;lt;user&amp;gt; -P ftp://host.example.com/public_html
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;더 자세한 내용은 &lt;a class="reference external" href="https://gitub.com/git-ftp/git-ftp/blob/develop/man/git-ftp.1.md"&gt;man page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;제한&amp;nbsp;사항&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;윈도우와 &lt;span class="caps"&gt;OS&lt;/span&gt; X에서는 테스트를 많이 안했으니 관련된 버그가 있으면 말해 줄&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;배포 도구로 만들어지지 않아서&amp;#8230; 커밋이나 체크 아웃 같은건 알아서&amp;#8230;&amp;nbsp;조심히&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/git-ftp/git-ftp/blob/develop/README.md#about"&gt;https://github.com/git-ftp/git-ftp/blob/develop/&lt;span class="caps"&gt;README&lt;/span&gt;.md#about&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 02 Apr 2015 00:48:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-04:2015/03/04/git-ftp/</guid><category>git</category><category>ftp</category><category>shell</category><category>cli</category><category>bash</category></item><item><title>OpenStack rootwrap</title><link>http://ujuc.github.io/2015/03/04/openstack-rootwrap/</link><description>&lt;p&gt;OpenStack 프로젝트들에서 사용되는 것들 중&amp;#8230; &lt;strong&gt;root&lt;/strong&gt; 와 관련된 작업을
진행해야하는 경우가 있다. 그럴때 사용하려고 만들어둔 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap"&gt;rootwrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wiki에서는 이 &lt;a class="reference external" href="https://fnords.wordpress.com/2011/11/23/improving-nova-privilege-escalation-model-part-1/"&gt;블로그&lt;/a&gt; 에 작성된 문제를 해결하기 위해서 만들어졌다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;짧은 내기억으로는 간단한 팡리로만 존재했던 것같은데. (아닐 가능성 100%라논
소리&amp;#8230;), 지금은 oslo 패키지로 관리되고 있다. &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap"&gt;github&amp;nbsp;repo&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;사용자용&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;nova.conf&lt;/tt&gt; 에 다음 문구&amp;nbsp;추가하도록&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rootwrap_config=/etc/nova/rootwrap.conf
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;배포용 패키지를 만드는&amp;nbsp;사람용&lt;/h2&gt;
&lt;div class="section" id="suduers"&gt;
&lt;h3&gt;Suduers&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sudoers&lt;/tt&gt; 에 다음 문구를&amp;nbsp;추가하도록&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nova ALL = (root) NOPASSWD: /usr/bin/nova-rootwrap /etc/nova/rootwrap.conf *
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;필터 위치&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;rootwrap&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Nova-provided&lt;/span&gt;&lt;/tt&gt; 필터 파일을 로드하고, &lt;tt class="docutils literal"&gt;rootwrap.d&lt;/tt&gt; 로 확장
사용자의 필터 파일을 로드하도록 설정해&amp;nbsp;줄것.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[DEFAULT]
filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;필터&amp;nbsp;정의&lt;/h3&gt;
&lt;p&gt;각 노드마다 설치를&amp;#8230;&amp;nbsp;해줘야된다고.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;플러그인&amp;nbsp;작성자용&lt;/h2&gt;
&lt;div class="section" id="run-as-root"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을&amp;nbsp;추가&lt;/h3&gt;
&lt;p&gt;root로 동작시킬 것이 있을&amp;nbsp;경우.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;관련 필터 내용은 &lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/foobar.filters&lt;/tt&gt; 에 추가해둘&amp;nbsp;것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;프로젝트&amp;nbsp;개발자용&lt;/h2&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을&amp;nbsp;추가&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;Nova 코드에서 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nova/rootwrap.d/{filter_name}.ilters&lt;/span&gt;&lt;/tt&gt; 파일에 관련된 내용을
추가해줄 것.&lt;ul&gt;
&lt;li&gt;예로 Compute 노드에서 작동하는 소스라면
&lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/compute.filters&lt;/tt&gt; 에다가&amp;nbsp;추가하도록.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;상위 필터 타입&amp;nbsp;추가&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 필터 타입은 &lt;tt class="docutils literal"&gt;CommandFilter&lt;/tt&gt; 임.&lt;/li&gt;
&lt;li&gt;새로운 타입을 만들거나 지금 존재하는 타입을 확인하고 싶다면 &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap/blob/master/oslo_rootwrap/filters.py"&gt;filters.py&lt;/a&gt; 를
보면 된다. - &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap#Available_Filter_classes"&gt;Available Filter Classes&lt;/a&gt; 가 아닌걸로도 볼 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 02 Apr 2015 21:18:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-04:2015/03/04/openstack-rootwrap/</guid><category>openstack</category><category>oslo</category></item><item><title>vim을 IDE처럼 만드는 법을 알아보자.</title><link>http://ujuc.github.io/2015/03/03/vim-to-ide/</link><description>&lt;p&gt;메일로 Github에서 흥하는 레포들을 소개해주는 서비스가 존재한다. 거기서 오랜만에
vim에 관련된 내용이&amp;nbsp;올라왔다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jez/vim-as-an-ide"&gt;jez/vim-as-an-ide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;뭐 특별한 것은 없어 보이지만, Vim을 설정하는 것들에대해 커밋을 통해서 작성해
뒀다. 그래서 더 좋다. 이렇게하면 나중에 누군가에게 vim을 설정하는 방법에 대해서
알려주는 방법에서도 좋을&amp;nbsp;듯함.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;아쉬운것&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt; 을 사용해서 플러그인을&amp;nbsp;설치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그냥 아쉽다. 다른 것들도 많다. &lt;a class="reference external" href="https://github.com/Shougo/neobundle.vim"&gt;NeoVundle&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;. 이정도가 내가 아는 플러그인
설치를 도와주는&amp;nbsp;것들이다.&lt;/p&gt;
&lt;p&gt;뭐 Vundle을 사용하는 방법을 안다면 쉽게 작업을 진행할 수 있으니 필요한 것들을
확인해서 설치하는게&amp;nbsp;필요할듯.&lt;/p&gt;
&lt;p&gt;다른 것들은 나도 보면서 배워야할 것들이다. 플러그인들이 많이 설치되는 것들을
설치해서 사용은 하고 있지만&amp;#8230; 그렇게 많은 기능들을 다 사용하지 않는 이상&amp;#8230;
조금씩 덜어내는 것도 필요할&amp;nbsp;듯.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 23:52:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-03:2015/03/03/vim-to-ide/</guid><category>vim</category><category>vimrc</category><category>ide</category></item><item><title>timesheet.js??</title><link>http://ujuc.github.io/2015/03/02/timesheet-js/</link><description>&lt;p&gt;놀다 보니 이것저것 보는 것들도 많다. 그런것들이라도 간단히&amp;nbsp;적어둬야지&amp;#8230;&lt;/p&gt;
&lt;p&gt;노트에다가 작성을 해놓고 넣어두는 것도 한 방법이지만, 봤을때 좋은거라 생각한다면
그것으로 작업이 가능하지 않을까&amp;nbsp;하여&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;timesheet.js&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;홈페이지: &lt;a class="reference external" href="https://github.com/sbstjn/timesheet.js"&gt;sbstjn/timesheet.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;손을 좀 대서 자세하게 보이거나 이것저것 손을 볼 수 있을&amp;nbsp;것같은데&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;예제&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 쓸수 없다는게 rst의&amp;nbsp;단점&amp;#8230;&lt;/p&gt;
&lt;p&gt;그래서 &lt;a class="reference external" href="http://jsfiddle.net/fujstt3s/1/"&gt;예제&lt;/a&gt; 는 링크로&amp;#8230;. &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;특이점&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;소스파일로 되어있는기.. &lt;a class="reference external" href="http://haml.info/"&gt;haml&lt;/a&gt; 로 되어있고, &lt;a class="reference external" href="http://sass-lang.com/"&gt;sass&lt;/a&gt; 는 첨가.&lt;ul&gt;
&lt;li&gt;sass는 CSS를 더 변수, 함수, 확장 / 상속 등의 기능을 추가해서 쉽게 만들고,
쉽게 유지보수 할 수 있도록 되어있다고 한다. 여러 종류가 있다고&amp;#8230; &lt;a class="footnote-reference" href="#id6" id="id5"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;haml은 &lt;span class="caps"&gt;HTML&lt;/span&gt; abstraction markup language라고 하는걸 줄였다고, 작성을 해놨네.
&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 작성하기 더 쉽게 되어있긴한데&amp;#8230; 태그를 변수로 주는게&amp;nbsp;특이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;조금이나 더 짧게 쓰고 조금이나마 더 버전 관리가 쉽게 하도록 하는걸 보면, 점점
더 바닥을 아는 사람들이 없어져가고, 그것들을 알 수 있는 방법들도
없어져가는건 안좋은 점 중&amp;nbsp;하나다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://windtale.net/blog/why-i-choose-sass/"&gt;http://windtale.net/blog/why-i-choose-sass/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 22:21:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-02:2015/03/02/timesheet-js/</guid><category>javascript</category><category>js</category></item><item><title>Clojure 개발 환경 구축</title><link>http://ujuc.github.io/2015/03/01/clojure-development-env/</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2&gt;1.&amp;nbsp;개요&lt;/h2&gt;
&lt;p&gt;Clojure를 공부하려하는데&amp;#8230; 이것 저것 작업을 하려하니 짧은 기억력으로는 계속
봐야되는지라. 이렇게 작성을 해놔야 나중에 볼 듯하고, 또 어딘가에 넣어둔다고해도
찾을때는 잘 못찾는&amp;nbsp;지라&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;1.&amp;nbsp;전재&lt;/h3&gt;
&lt;p&gt;OSX를 기반으로 한다. &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 를 패키지로 모두 작성된다. 만약 Linux에서
작업하게되면 관련해서 문서는 추가로 작성할 예정임. 문제는 언제될지&amp;nbsp;모르겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;2. 설치할&amp;nbsp;것들&lt;/h2&gt;
&lt;div class="section" id="jdk"&gt;
&lt;h3&gt;1. &lt;span class="caps"&gt;JDK&lt;/span&gt;&amp;nbsp;설치&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;검색해서 JDK를 다운받으면&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;Apple에서 기본적으로 주는걸 써도 될&amp;nbsp;듯.&lt;/li&gt;
&lt;li&gt;8으로 설치했는데 작업하는데는 아무런&amp;nbsp;이상없다.&lt;/li&gt;
&lt;li&gt;그래서 그냥&amp;nbsp;쓴다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;brew-cask&lt;/span&gt;&lt;/tt&gt; 에 JDK가&amp;nbsp;있다는&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="leiningen"&gt;
&lt;h2&gt;2. Leiningen&amp;nbsp;설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;brew install leiningen&lt;/tt&gt; 으로&amp;nbsp;설치.&lt;/li&gt;
&lt;li&gt;딱히 설정할 것&amp;nbsp;없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lein"&gt;
&lt;h2&gt;3. lein&amp;nbsp;사용&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이거 쓸려고 넘많이&amp;nbsp;적었다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ lein
    Leiningen is a tool &lt;span class="k"&gt;for&lt;/span&gt; working with Clojure projects.

    Several tasks are available:
    change              Rewrite project.clj by applying a &lt;span class="k"&gt;function&lt;/span&gt;.
    check               Check syntax and warn on reflection.
    classpath           Print the classpath of the current project.
    clean               Remove all files from project&lt;span class="s1"&gt;'s target-path.
    compile             Compile Clojure source into .class files.
    deploy              Build and deploy jar to remote repository.
    deps                Download all dependencies.
    do                  Higher-order task to perform other tasks in succession.
    help                Display a list of tasks or help for a given task.
    install             Install the current project to the local repository.
    jar                 Package up all the project'&lt;/span&gt;s files into a jar file.
    javac               Compile Java &lt;span class="nb"&gt;source&lt;/span&gt; files.
    new                 Generate project scaffolding based on a template.
    plugin              DEPRECATED. Please use the :user profile instead.
    pom                 Write a pom.xml file to disk &lt;span class="k"&gt;for&lt;/span&gt; Maven interoperability.
    release             Perform :release-tasks.
    repl                Start a repl session either with the current project or standalone.
    retest              Run only the &lt;span class="nb"&gt;test&lt;/span&gt; namespaces which failed last &lt;span class="nb"&gt;time&lt;/span&gt; around.
    run                 Run a -main &lt;span class="k"&gt;function&lt;/span&gt; with optional command-line arguments.
    search              Search remote maven repositories &lt;span class="k"&gt;for&lt;/span&gt; matching jars.
    show-profiles       List all available profiles or display one &lt;span class="k"&gt;if&lt;/span&gt; given an argument.
    &lt;span class="nb"&gt;test&lt;/span&gt;                Run the project&lt;span class="s1"&gt;'s tests.
    trampoline          Run a task without nesting the project'&lt;/span&gt;s JVM inside Leiningen&lt;span class="s1"&gt;'s.
    uberjar             Package up the project files and dependencies into a jar file.
    update-in           Perform arbitrary transformations on your project map.
    upgrade             Upgrade Leiningen to specified version or latest stable.
    vcs                 Interact with the version control system.
    version             Print version for Leiningen and the current JVM.
    with-profile        Apply the given task with the profile(s) specified.

    Run `lein help $TASK` for details.

    Global Options:
      -o             Run a task offline.
      -U             Run a task after forcing update of snapshots.
      -h, --help     Print this help or help for a specific task.
      -v, --version  Print Leiningen'&lt;/span&gt;s version.

    See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
    mixed-source, templates, and copying.
&lt;/pre&gt;
&lt;div class="section" id="project"&gt;
&lt;h3&gt;1. project&amp;nbsp;생성&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein new myproject
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;project.clj&lt;/tt&gt; 에 프로젝트에 관련된 내용들을 작성한다.&lt;ul&gt;
&lt;li&gt;필요한 것들이 있다면 여기다가 차곡차곡&amp;nbsp;넣어준다.&lt;/li&gt;
&lt;li&gt;그리고 이곳에 &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; 으로 사용할 코드의 위치를 작성해 줘야된다.&lt;ul&gt;
&lt;li&gt;키워드는 &lt;tt class="docutils literal"&gt;:main&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;2. 의존하는 라이브러리&amp;nbsp;다운로드&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein deps
&lt;/pre&gt;
&lt;p&gt;위에서 작성해준 패키지들을 받아와서 실행해준다. 그러니 왠만해서는 설치하고&amp;nbsp;하자.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;3. 코드&amp;nbsp;작성&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;src/myproject/core.clj&lt;/tt&gt; 가 있다. 이곳에다가 코드를 작성해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;4.&amp;nbsp;실행&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein run
&lt;/pre&gt;
&lt;p&gt;쉽게 실행해서 나오는 것을 볼 수 있다. 뭐&amp;nbsp;간단하네&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;5.&amp;nbsp;패키징&lt;/h3&gt;
&lt;p&gt;역시 Java라고 해야될까&amp;#8230; jar 로 만들어두면 멀티 플랫폼에서도 작동이 가능하다는
것이지. 그리고 그것을 묶어서 보여준다. 나중에가서 설정을 좀 해줘야되는 부분이
발생하겠지만, 지금은 그렇게까지는 나올 필요가&amp;nbsp;없으니&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein uberjar
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;6. 라이브러리&amp;nbsp;검색&lt;/h3&gt;
&lt;p&gt;필요한 라이브러리들을 검색 하는건데&amp;#8230; 검색하는게 더 빠를듯&amp;#8230; 너무 많이
나온다. 그리고 가끔 인덱스를 업데이트를 해주긴 해야되는데&amp;#8230; 오래걸려&amp;#8230;
너무&amp;nbsp;오래&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein search ring
&lt;/pre&gt;
&lt;p&gt;불편하게&amp;#8230; 페이지별로 나오니. 이름은 정확히 입력하자. 그리고 동일한 페키지
이름으로 버전들이 쭉~~ 나오니 그것도하나 염두해둘 것&amp;#8230; 버전 정보는 명령어를
하나더 쳐서 확인하게 해야지&amp;#8230; 저렇게 다 보여줄 필요가&amp;nbsp;있나&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;7. 패치&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;자동으로 잡아준다. 그래도 추가해야된다면 &lt;tt class="docutils literal"&gt;proejct.clj&lt;/tt&gt; 에 키워드
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:extra-classpath-dirs&lt;/span&gt;&lt;/tt&gt; 를 사용하여 리스트 형식으로 추가해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;8. 인터프리터&amp;nbsp;실행&lt;/h3&gt;
&lt;p&gt;인터프리터를 실행해서 작성한 내요이 맞는지 확인이&amp;nbsp;가능하다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein repl
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;참고&amp;nbsp;사이트!&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://english4u.kr/clojure-memo/index.html"&gt;Clojure 강좌 -&amp;nbsp;김영태&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;emacs로 되어있는 부부만&amp;nbsp;제외했&amp;#8230;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:30:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-01:2015/03/01/clojure-development-env/</guid><category>clojure</category><category>개발 환경</category><category>lein</category></item><item><title>oh-my-vim 설치후 오류 (OSX)</title><link>http://ujuc.github.io/2015/02/26/oh-my-vim-error-osx/</link><description>&lt;p&gt;&lt;a class="reference external" href="https://github.com/liangxianzhe/oh-my-vim"&gt;oh-my-vim&lt;/a&gt; 으로 vim 플러그인 설정에 관련된 기본 프로그램을 바꿨다 (이것저것
변경하고 있긴하다만&amp;#8230;). 달라진게 없다. 좀 더 화려해지고 플러그인들로 인해서
IDE급으로 에디터가 변경됐을 뿐이다. 단지 80라인 와랩이&amp;nbsp;필요했을뿐인데&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그렇게 쓰다보니 실행할때마다 에러가&amp;nbsp;뜬다.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
neocomplete does work this version of Vim.
It requires &amp;quot;if_lua&amp;quot; enabled Vim(7.3.885 or above).
&lt;/pre&gt;
&lt;p&gt;혹시나 해서 검색을 해봤다. 매번 실행할 때마다 엔터 3번은 너무&amp;nbsp;오래걸려서&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Shougo/neocomplete.vim/issues/237"&gt;neocomplete.vim - Vim version and lua&lt;/a&gt; 에서는 실행후 &lt;tt class="docutils literal"&gt;:version&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 가
&lt;tt class="docutils literal"&gt;-&lt;/tt&gt; 인지 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; 인지 확인을 하라고 말을&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-lua&lt;/span&gt;&lt;/tt&gt; 면 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 사용 옵션이 빠져있는 것이 되기에 vim 설치시 그에 대한
옵션을 설정해줘야된다는&amp;nbsp;말을&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OSX&lt;/span&gt; 사용자들에게만 나온는 것같은데&amp;#8230; Linux에 대한 오류가 없는&amp;nbsp;걸보면&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그것을 수정하는 방법은 &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 로 설치할때 옵션을 걸어주고 설치하면 된다.
물론 설치했다면, 다시 설치하면된다. 난 삭제하고 다시 설치&amp;#8230; (적다보니&amp;#8230; 자동화
스크립트에 작성해둔거 변경을&amp;nbsp;해줘야겠다&amp;#8230;)&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ brew install vim --with-cscope --with-lua --override-system-vim
&lt;/pre&gt;
&lt;p&gt;설치해주면된다. 그러면 자연스럽게 넘어가고 에러는 밑으로 나올꺼니 엔터칠 일이&amp;nbsp;줄었다.!!!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:14:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-26:2015/02/26/oh-my-vim-error-osx/</guid><category>vim</category><category>setting</category></item><item><title>Pycharm에서 iPython notebook 사용</title><link>http://ujuc.github.io/2015/02/23/using-ipython-notebook-on-pycharm/</link><description>&lt;p&gt;Pycharm iPython notebook 지원은 4.0에서부터 지원하기 시작했다. 아직 버전업이
안됐으니&amp;nbsp;작년인듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;iPython을 설치하고 Pycharm에서 설치하려고 봤더니 제대로 돌아가질 않는다.
그렇다고 오류가 보이지도 않아서 직접 터미널에서&amp;nbsp;쳤더니&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;패키지가 없어서 안된다!!!&lt;/strong&gt; 라는 비명을 볼 수&amp;nbsp;있었다.&lt;/p&gt;
&lt;p&gt;설치해줘야되는 패키지는 &lt;tt class="docutils literal"&gt;pyzmq&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tornado&lt;/tt&gt;, (&lt;tt class="docutils literal"&gt;certifi&lt;/tt&gt; 는 &lt;tt class="docutils literal"&gt;torando&lt;/tt&gt; 설치시 같이
설치가되니 넘어간다.). 편한 방법으로 설치해주고 작동시키면 돌아가는 것을 확인할
수&amp;nbsp;있다만&amp;#8230;&lt;/p&gt;
&lt;p&gt;Pycharm의 iPython notebook 입력기 UI가 너무 안좋다. 그냥 서버를 띄우고 Web에서
작동하는 것이 입력하기도 쉽고 값들을 확인하면서 작성하기가 더 쉽게 되어있으니
사용자가 알아서&amp;#8230; 나는&amp;nbsp;안쓸꺼임&amp;#8230;&lt;/p&gt;
&lt;p&gt;아마 업데이트 하면&amp;#8230; 괜찮아질꺼야&amp;#8230;&amp;nbsp;그럴꺼야&amp;#8230;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:07:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-23:2015/02/23/using-ipython-notebook-on-pycharm/</guid><category>pycharm</category><category>ipython</category><category>notebook</category></item><item><title>OpenStack Commit</title><link>http://ujuc.github.io/2015/02/13/openstack-commit/</link><description>&lt;p&gt;기본적인 흐름은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 보고서 따라하면 쉽게 작업을 할 수 있다.
그런데&amp;#8230;. 왜이리&amp;nbsp;어려운거지&amp;#8230;.&lt;/p&gt;
&lt;p&gt;신경 써야될 곳은 파란색으로 되어있는 곳만 신경 쓰면되는 그런&amp;#8230; 어렵지 않을
것같아&amp;nbsp;시작&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;준비 해야될&amp;nbsp;것&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://launchpad.net/+login"&gt;Launchpad&lt;/a&gt; 계정&lt;ul&gt;
&lt;li&gt;버그리포팅을 위해서는 Launchpad 계정이&amp;nbsp;있어야한다.&lt;/li&gt;
&lt;li&gt;그리고 왠만한 OpenID를 이걸로 다 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org"&gt;OpenStack Review&lt;/a&gt; 가입&lt;ul&gt;
&lt;li&gt;리뷰를 무조건&amp;nbsp;타야된다&amp;#8230;&lt;/li&gt;
&lt;li&gt;그러니&amp;nbsp;만들어야&amp;#8230;.&lt;/li&gt;
&lt;li&gt;그리고 ssh key등록을&amp;nbsp;해두는게&amp;#8230;&lt;/li&gt;
&lt;li&gt;그리고 메일링은 꺼두는게&amp;#8230; 너무&amp;nbsp;많이와&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="individual-contributor-license-agreement"&gt;
&lt;h2&gt;Individual Contributor License Agreement&amp;nbsp;결재&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/#/settings/agreements"&gt;Individual Contributor License Agreement&lt;/a&gt; 간단하게&amp;nbsp;작성하고..&lt;/li&gt;
&lt;li&gt;회사 대신 기여하거나 단체로 한다면 &lt;a class="reference external" href="https://secure.echosign.com/public/hostedForm?formid=56JUVGT95E78X5"&gt;Corporate Contributor License Agreement&lt;/a&gt;
도 한장&amp;#8230; 작성하고 보니 난 이걸&amp;nbsp;왜했지&amp;#8230;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="git-review"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;git-review&lt;/span&gt;&lt;/tt&gt; 설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;맥은 그냥 &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 로 통일시켜서 설치하는게&amp;nbsp;편한듯&amp;#8230;&lt;/li&gt;
&lt;li&gt;문서상으로는 &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; 로 설치하라고&amp;nbsp;했지만&amp;#8230;&lt;/li&gt;
&lt;li&gt;설치하고 제대로 됐는지 확인을 하기위해서는&lt;ul&gt;
&lt;li&gt;하나를&amp;nbsp;클론하고&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git review &lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/tt&gt; 를 해서 &lt;tt class="docutils literal"&gt;review.openstack.org&lt;/tt&gt; 에 제대로 접속했는지를 체크를&amp;nbsp;해준다.&lt;/li&gt;
&lt;li&gt;이때 &lt;tt class="docutils literal"&gt;gitreview.username&lt;/tt&gt; 을 &lt;tt class="docutils literal"&gt;.gitconfig&lt;/tt&gt; 파일에 작성해두지 않았다면
설정하라고&amp;nbsp;뜸.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;작업&amp;nbsp;플로워&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;버그일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;우선 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugs.launchpad.net/&amp;lt;projectname&amp;gt;&lt;/span&gt;&lt;/tt&gt; 으로 접속하여 버그 리포팅.&lt;ul&gt;
&lt;li&gt;이때 4가지로 테스크가 나뉘는데,&lt;ol class="arabic"&gt;
&lt;li&gt;새로운 버그 확인: &amp;#8220;New&amp;#8221;로 표기된 버그를 &amp;#8220;Confirmed&amp;#8221;로 변경 가능한 상태.
거의 초기를 말한다고&amp;nbsp;보면됨.&lt;/li&gt;
&lt;li&gt;버그 수정 : 버그를 할당하고, &amp;#8220;In Progress&amp;#8221;로&amp;nbsp;등록.&lt;/li&gt;
&lt;li&gt;리뷰중 : &amp;#8220;Incomplete&amp;#8221;로 표기되고 리뷰가 진행되는 상태를 말함. 최대
4주까지 걸린다고&amp;nbsp;함.&lt;/li&gt;
&lt;li&gt;버그가 또다시 발견된 경우 : 그렇다고함&amp;#8230; (뭐라말하기가&amp;#8230; 그냥 나같은
경우엔 리오픈으로 적고 프로세스&amp;nbsp;해버림&amp;#8230;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커밋할때 버그 진행상태를 남겨둘 수 있음. 자세한건 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages#Including_external_references"&gt;Including external
references&lt;/a&gt; 를&amp;nbsp;보면됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;청사진으로 새로운 기능을 붙일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이건 그냥 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Blueprints"&gt;Blueprints - wiki&lt;/a&gt; 를&amp;nbsp;보자.&lt;/li&gt;
&lt;li&gt;관심 없고, 내가 딱히 추가할 내용도 별로 없어서&amp;#8230; 우선은..&amp;nbsp;빈칸&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;변경을&amp;nbsp;시작해볼까~~~&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;첫 클론을 떠온거라면 상관없지만&amp;#8230; 뜬지 꽤됐으면 업스트림이랑 코드를 맞춰줘야
된다.&lt;ul&gt;
&lt;li&gt;안하면 일 두번하는 생긴다&amp;#8230; &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;내가 이글을 쓰고 있는 이유기도&amp;nbsp;하다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ git remote update
$ git checkout master
$ git pull --ff-only origin master
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;그리고 브런치를 따는데, Blueprint는 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bp/&amp;lt;blueprint_name&amp;gt;&lt;/span&gt;&lt;/tt&gt;, Bug는
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bug/&amp;lt;bug-number&amp;gt;&lt;/span&gt;&lt;/tt&gt; 로&amp;nbsp;따주면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
git checkout -b TOPIC-BRANCH
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;변경 사항&amp;nbsp;커밋&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;제목은 50자 이내로 작성하고, 한줄 띄우고 내용을&amp;nbsp;작성해줘야된다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;Git commit messages&lt;/a&gt;&amp;nbsp;참고.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code text literal-block"&gt;
summary

brrrrrrbrrrrrra

&amp;lt;if blueprint&amp;gt;
Implements: blueprint &amp;lt;blueprint_name&amp;gt;
&amp;lt;if bug&amp;gt;
Closes-Bug: #&amp;lt;bug_number&amp;gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Change-id&lt;/span&gt;&lt;/tt&gt; 는 &lt;tt class="docutils literal"&gt;git review&lt;/tt&gt; 로 올린뒤에 알아서 붙여주는거라 따로 적을 필요는&amp;nbsp;없다.&lt;/li&gt;
&lt;li&gt;리뷰에 반려가되어서 다시 커밋을 해야되는 경우에는 &lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;--amend&lt;/span&gt;&lt;/tt&gt;
오셤으로&amp;nbsp;해주면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;리뷰&amp;nbsp;등록&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git reivew&lt;/tt&gt; 로 하면 &lt;tt class="docutils literal"&gt;review.openstack.org&lt;/tt&gt; 에 올라가 있는 것을 확인할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;변경사항이&amp;nbsp;있을때&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;커밋 메시지에 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Change-Id&lt;/span&gt;&lt;/tt&gt; 가없을때는 붙여넣기 해준 다음 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--amend&lt;/span&gt;&lt;/tt&gt; 로&amp;nbsp;커밋.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나머지 자세한 것들은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 확인하도록하자. 이것도 뭐&amp;#8230; 내가
까먹으니까 작성한&amp;nbsp;것이기도하지만&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 22:29:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-13:2015/02/13/openstack-commit/</guid><category>openstack</category><category>commit</category></item><item><title>RAM 리뷰에서 본 버전별 특성</title><link>http://ujuc.github.io/2015/02/09/RAM-reive/</link><description>&lt;p&gt;RSS에서 &lt;a class="reference external" href="http://www.anandtech.com/show/8959/ddr4-haswell-e-scaling-review-2133-to-3200-with-gskill-corsair-adata-and-crucial"&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt; Haswell-E Scaling Review&lt;/a&gt;: 2133 to 3200 with G.Skill, Gorsair,
&lt;span class="caps"&gt;ADATA&lt;/span&gt; and Crucial 에서 글이올라왔길레&amp;nbsp;봤는데&amp;#8230;&lt;/p&gt;
&lt;p&gt;어떤분께서 그렇게 말씀하시던 RAM이 버전업되면서 달라지 내용과 다른 점이 보여서
머릿속 내용을 업데이트하는 겸해서 작성해두는&amp;nbsp;내용이다.&lt;/p&gt;
&lt;div class="section" id="dram-comparison"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DRAM&lt;/span&gt;&amp;nbsp;Comparison&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="31%" /&gt;
&lt;col width="36%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Low Voltage&lt;/th&gt;
&lt;th class="head"&gt;Standard Voltage&lt;/th&gt;
&lt;th class="head"&gt;Performance Voltage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.80V&lt;/td&gt;
&lt;td&gt;2.50V&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1.80V&lt;/td&gt;
&lt;td&gt;1.90V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.35V&lt;/td&gt;
&lt;td&gt;1.50V&lt;/td&gt;
&lt;td&gt;1.65V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.05V&lt;/td&gt;
&lt;td&gt;1.20V&lt;/td&gt;
&lt;td&gt;1.35V&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="bandwidth-comparison"&gt;
&lt;h2&gt;Bandwidth&amp;nbsp;Comparison&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="7%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="12%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Bus Clock&lt;/th&gt;
&lt;th class="head"&gt;Internal Rate&lt;/th&gt;
&lt;th class="head"&gt;Prefetch&lt;/th&gt;
&lt;th class="head"&gt;Transfer Rate&lt;/th&gt;
&lt;th class="head"&gt;Channel Bandwidth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;100-200 MHz&lt;/td&gt;
&lt;td&gt;100-200 MHz&lt;/td&gt;
&lt;td&gt;2n&lt;/td&gt;
&lt;td&gt;0.20-0.40 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;1.60-3.20 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;200-533 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;4n&lt;/td&gt;
&lt;td&gt;0.40-1.06 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;3.20-8.50 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;400-1066 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;8n&lt;/td&gt;
&lt;td&gt;0.80-2.13 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;6.40-17.0 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1066-2133 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;8n&lt;/td&gt;
&lt;td&gt;2.13-4.26 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;12.80-25.60 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;전압량은 진화될수록 더 낮아져 전력 소비량은 낮아졌고, 속도는 높아졌다. 그런데
어떤분은 전압 부분만 말씀하시던데&amp;#8230; 물론 이 내용은 특정 벤더사의 내용일 수도
있지만, 그래도 많은 부분 수정이 된것은 맞은듯. &lt;span class="caps"&gt;RAM&lt;/span&gt; PCB를 보면 특정 핀의 길이가
다른 핀보다 0.5mm만큼 긴것도 특이하다. 특히, 일정 구간에서는 늘어나는 모습을
보여주는&amp;nbsp;것도&amp;#8230;&lt;/p&gt;
&lt;p&gt;자세한건 기사내용을 보는 것이 더&amp;nbsp;좋은듯.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 21:47:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-09:2015/02/09/RAM-reive/</guid><category>ram</category><category>hw</category><category>하드웨어</category></item><item><title>gitworkflows(7)에대한 이야기</title><link>http://ujuc.github.io/2015/02/02/gitworkflows7/</link><description>&lt;p&gt;페이스북의 &lt;a class="reference external" href="https://www.facebook.com/groups/kgugs"&gt;Korea Git User Group&lt;/a&gt; 에 &lt;tt class="docutils literal"&gt;gitworkflows&lt;/tt&gt; 에 대한 내용을
이야기하면서 슬라이드 &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt; 를 하나&amp;nbsp;올려주셨다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The gitworkflows(7)&amp;nbsp;illustrated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;정말 슬라이드를 이렇게까지 만들어주는건 정말 좋은듯. 특히 발표 당시에 그것을
못들었다고 해도 이 슬라이드만 보고도 알 수 있어서 더 좋음. 물론 발표용이라면
이것보다는 간단히 구성하는게&amp;nbsp;맞겠지만&amp;#8230;&lt;/p&gt;
&lt;p&gt;그렇다고 이걸 쓰고 싶지는 않다. 뭔가 복잡하다. 이게 어디서 좋은거지 라는&amp;nbsp;생각이든다.&lt;/p&gt;
&lt;p&gt;브런치 전략은 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 가 가장 쉽게 접근 할 수&amp;nbsp;잇는듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://git-scm.com/docs/gitworkflows/1.8.2.1"&gt;gitworkflows(7) Manual Page&lt;/a&gt; &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt; 를&amp;nbsp;확인하도록하자.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;원문이 일어로 보인다. &lt;a class="reference external" href="(http://www.slideshare.net/ktateish/gitworkflows7)"&gt;図解gitworkflows(7)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;문서가 1.8.2.1 이전과 이후로 많은 부분이 변경된 것으로 보인다. 그만큼
길어졌고 추가된 기능들이 많은것을 볼수 있으니, 관련해서 한번 찾아보는 것이
필요.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 00:13:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-02:2015/02/02/gitworkflows7/</guid><category>git</category><category>workflow</category></item><item><title>단장 완료</title><link>http://ujuc.github.io/2015/01/31/%EB%8B%A8%EC%9E%A5-%EC%99%84%EB%A3%8C/</link><description>&lt;p&gt;간단하게 작업을 진행해서 뭐 넣은 것 없는 그런페이지가&amp;nbsp;만들어진듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;여기다 아무리 무겁게 글을 써도 불러오는 속도가 빠르니 뭐 간다낳게 작성하기는&amp;nbsp;좋을듯.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Mon, 30 Mar 2015 00:00:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-01-31:2015/01/31/단장-완료/</guid><category>시작</category></item><item><title>[Google Cloud Platfrom] Google Cloud Endpoints</title><link>http://ujuc.github.io/2014/11/14/google-cloud-platform-google-cloud-endpoints/</link><description>&lt;ul&gt;
&lt;li&gt;App의 API를 구성하기 쉽도록 제공하는&amp;nbsp;서비스&lt;/li&gt;
&lt;li&gt;Remote Procedure Call(&lt;span class="caps"&gt;RPC&lt;/span&gt;)를 이용하여 작업을 진행할 수 있도록&amp;nbsp;구성.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2가지 방법이 존재&lt;ul&gt;
&lt;li&gt;RPC의 &lt;code&gt;message&lt;/code&gt; 클래스를 이용하는&amp;nbsp;방법.&lt;/li&gt;
&lt;li&gt;RPC를 통하지 않고 직접 작업하는&amp;nbsp;방법. &lt;/li&gt;
&lt;li&gt;사용은 RPC를 통하지 않는 방법이&amp;nbsp;간단하긴하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;예제&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-helloendpoints-python"&gt;appengine-endpoints-helloendpoints-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;RPC&lt;/span&gt; &lt;code&gt;message&lt;/code&gt; 클래스를 이용하도록&amp;nbsp;되어있음.&lt;/li&gt;
&lt;li&gt;랩핑하는 것에 대한 내용이&amp;nbsp;포함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-angular-todos-python"&gt;appengine-endpoints-angular-todos-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;RPC&lt;/span&gt; &lt;code&gt;message&lt;/code&gt; 클래스를 사용하지&amp;nbsp;않음.&lt;/li&gt;
&lt;li&gt;Angular.js를 이용하도록 예제가 되어있어서 확인해보면&amp;nbsp;될듯함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-tictactoe-python"&gt;appengine-endpoints-tictactoe-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;게임 예제로 보이나 아직 테스트해보지&amp;nbsp;않음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;필요&amp;nbsp;패키지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/endpoints-proto-datastore"&gt;endpoints-proto-datastore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ProtoRPC 를 사용하지 않아도 된다고 함. &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;지금은 NDB만 지원. 추후 DB지원은&amp;nbsp;모르겠음.&lt;/li&gt;
&lt;li&gt;DB를 사용하려면 전부 분해하고 설정하는 것이 필요할 것으로&amp;nbsp;보임.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/_ah/spi/.*&lt;/code&gt; URL은 &lt;code&gt;app.yaml&lt;/code&gt; 파일에 하나만&amp;nbsp;가능함.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 API를 사용하고 싶으면 &lt;code&gt;main.py&lt;/code&gt; 에 일반 예제들처럼 API클래스를 생성하고 다음과 같이&amp;nbsp;설정해주면됨.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.yaml&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_ah&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spi&lt;/span&gt;&lt;span class="o"&gt;/.*&lt;/span&gt;
  &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;

&lt;span class="c1"&gt;# main.py&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_server&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;App1_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;App2_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하나의 API에 여러 클래스를 두고 싶다면 아래의 방법으로&amp;nbsp;구성&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# API를 종류별로 나눔 &lt;/span&gt;
&lt;span class="n"&gt;test_api_v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;test1_api_v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# API를 처리할 Class구성&lt;/span&gt;
&lt;span class="nd"&gt;@test_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bye&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test1_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test1_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_server&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api_1"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;등록확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;project-id.appspot.com/_ah/api/explorer&lt;/code&gt; 로 접근하여&amp;nbsp;확인.&lt;/li&gt;
&lt;li&gt;업로드되어 표시되는 시간이 오래걸리니(최소 5분은 걸리는듯.) 올라갔는지 확인을 하려면 Google Developers Console에서 로그로&amp;nbsp;확인하면된다.&lt;/li&gt;
&lt;li&gt;올라갔다면 아래와 같이 표시된다.&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://1-dot-project-id.appspot.com/_ah/api/test@v1.0 Saved
https://1-dot-project-id.appspot.com/_ah/api/test1@v1.0 Saved
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;http://endpoints-proto-datastore.appspot.com/&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 01 Mar 2016 00:38:00 +0900</pubDate><guid>tag:ujuc.github.io,2014-11-14:2014/11/14/google-cloud-platform-google-cloud-endpoints/</guid><category>google</category><category>cloud</category><category>gcp</category><category>google cloud platform</category><category>google cloud endpoint</category></item><item><title>[Google App Engine] NDB - Properties</title><link>http://ujuc.github.io/2014/11/10/google-app-engine-ndb-properties/</link><description>&lt;ul&gt;
&lt;li&gt;관련해서 한글로되 문서가 없어서 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties"&gt;2014/10/27일자 문서&lt;/a&gt;를 가지고서&amp;nbsp;정리하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;소개&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt;에서 사용할 수 있는 데이터 모델을 말한다. 모델 타입으로 생각하면 쉽겠다. 어려울 것도&amp;nbsp;없다만.&lt;/p&gt;
&lt;h2 id="type"&gt;Type&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property type&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IntegerProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64-bit signed 정수 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FloatProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Double-precision 부동 소수점 숫자 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BooleanProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boolean 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;StringProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;유니코드 스트링 값, 500자까지 가능, 인덱스 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TextProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;유니코드 스트링 값, 길이 제한 없음, 인덱스 기능 없음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BlobProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;해석되지 않은 (Uninterpreted) 바이트 스트링, &lt;code&gt;indexed=True&lt;/code&gt;로 설정하게되면 500자로 제한, 인덱스 가능. &lt;br&gt;하지만 &lt;code&gt;False&lt;/code&gt;(기본 값)으로 설정하게 되면, 길이 제한 없으며, 인덱스 기능 없음. (추가 속성으로 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;를 사용할 수 있음)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DateTimeProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;날짜와 시간 (자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#Date_and_Time"&gt;Date and Time Properties&lt;/a&gt;에서 확인)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DateProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;날짜 (자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#Date_and_Time"&gt;Date and Time Properties&lt;/a&gt;에서 확인)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TimeProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;시간 (자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#Date_and_Time"&gt;Date and Time Propertyes&lt;/a&gt;에서 확인)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GeoPtProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지리적 정보데이터를 입력 받음. &lt;code&gt;ndb.GeoPt&lt;/code&gt;객체인데, &lt;code&gt;lat&lt;/code&gt;, &lt;code&gt;lon&lt;/code&gt; 값(둘다 부동소수점으로 표기)을 가지고서 작업을 진행.&lt;br&gt;예, &lt;code&gt;ndb.GeoPt(52.37, 4.88)&lt;/code&gt; or &lt;code&gt;ndb.GeoPt("52.37", "4.88")&lt;/code&gt;형식.&lt;br&gt;(&lt;a href="https://cloud.google.com/appengine/docs/python/datastore/typesandpropertyclasses#GeoP"&gt;&lt;code&gt;db.GeoPt&lt;/code&gt;&lt;/a&gt;와 동일한 객체.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KeyProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Datastore key 값&lt;br&gt;선택 키워드로 kind=&lt;em&gt;kind&lt;/em&gt; 형식으로 나오며, 할당된 키는 항상 kind를 지정해야함.&lt;br&gt;문자열이거나, 모델 클레스가 될수도 있음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BlobKeyProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Blobstore&lt;/code&gt; 키 값&lt;br&gt;이전 &lt;span class="caps"&gt;DB&lt;/span&gt; API의 &lt;code&gt;BlobReferenceProperty&lt;/code&gt;에 해당.&lt;br&gt;&lt;code&gt;BlobInfo&lt;/code&gt;대신 &lt;code&gt;BlobKey&lt;/code&gt;로 속성 값을 사용. &lt;code&gt;BlobInfo(blobkey)&lt;/code&gt;를 사용하여 &lt;code&gt;BlobInfo&lt;/code&gt;를 구성할 수 있긴함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;유저 객체.&lt;br&gt;Google의 사용자 로그인으로 관련된 내용을 저장하여 사용할때 쓴다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;StructuredProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;하나의 kind 내부에 다른 모델을 추가하는 것.&lt;br&gt;&lt;code&gt;C&lt;/code&gt;의 구조체와 비슷하다고 생각하자.&lt;br&gt;여러번 중복이 가능하고 값을 불러오게되면 JSON방식으로 불러오는 것이 편하다.&lt;br&gt;자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#structured"&gt;Structured Properties&lt;/a&gt;에서 확인&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LocalStructuredProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;StructuredProperty&lt;/code&gt;와 비슷하게 사용할 수 있으나, 인덱싱이 안된다. 자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#structured"&gt;Structured Properties&lt;/a&gt;에서 확인.&lt;br&gt;추가 속성: &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;JsonProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;파이썬 객체(리스트, 딕셔너리, 스트링) 값을 파이썬 &lt;code&gt;json&lt;/code&gt;모듈을 이용하여 직열화함.&lt;br&gt;Datastore에서는 blob로 json 직렬화하여 저장.&lt;br&gt;인덱스 안됨.&lt;br&gt;추가 속성: &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PickleProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;파이썬 객체(리스트, 딕셔너리, 스트링) 값을 파이썬 pickle 프로토콜을 이용하여 직열화함.&lt;br&gt;Datastore에서는 blob로 pickle 직렬화하여 저장.&lt;br&gt;인덱스 안됨.&lt;br&gt;추가 속성: &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GenericProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;기본 값.&lt;br&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/ndb/entities#expando"&gt;Expando&lt;/a&gt;클래스에서 주로 사용되지만, 명시적으로 사용하기도함.&lt;br&gt;어떤 형식으로도 가능. (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;Key&lt;/code&gt;, &lt;code&gt;BlobKey&lt;/code&gt;, &lt;code&gt;GeoPt&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ComputeProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;사용자가 정의한 함수에서 계산 값들을 처리하여 저장.&lt;br&gt;자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#computed"&gt;Computed Properties&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compressed&lt;/code&gt; 옵션: &lt;code&gt;True&lt;/code&gt;로 설정시, gzip으로 압축하여 디스크에 저장함. 이때 &lt;span class="caps"&gt;CPU&lt;/span&gt; 인/디코딩하는데 IO를 사용을&amp;nbsp;함. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="property-options"&gt;Property&amp;nbsp;Options&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;indexed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;사용하는 것만 &lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;로 설정시 쿼리는 불가능해지나 쓰기 속도가 높아짐.&lt;br&gt;다 사용가능한건 아님.&lt;br&gt;인덱스 안하는게 인덱스하는 것보다 write 코스트가 적음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;repeated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;파이썬 리스트 형식으로 값으로 표현.&lt;br&gt;중복이 필요한 작업에 사용.&lt;br&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#repeated"&gt;Repeated Properties&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;꼭 필요한 값으로 표기.&lt;br&gt;&lt;code&gt;repeated=True&lt;/code&gt;와 같이 사용하지 못하며, &lt;code&gt;default=True&lt;/code&gt;와는 같이 사용할 수 있음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Property 기본 유형&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;아무것도 지정하지 않을경우, 기본으로 들어감.&lt;br&gt;&lt;code&gt;repeated=True&lt;/code&gt;와 같이 사용하지 못하며, &lt;code&gt;required=True&lt;/code&gt;와 같이 사용할 수 있음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;기본 유형의 값 목록&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;값을 선택할 수 있는 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;validator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;함수&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;값을 함수에 맞게 검증하고 그것으로 입력하도록 설정합니다.&lt;br&gt;자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/subclassprop"&gt;Writing Property Subclasses&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;문자열&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jinja2와 같은 웹프레임 워크에서 사용되는 &lt;span class="caps"&gt;HTML&lt;/span&gt; label을 나타냄&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;이후 내용은 그냥 홈피보자.&lt;ul&gt;
&lt;li&gt;딱히 적을 내용도&amp;nbsp;없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 03 Mar 2016 21:47:00 +0900</pubDate><guid>tag:ujuc.github.io,2014-11-10:2014/11/10/google-app-engine-ndb-properties/</guid><category>google</category><category>cloud</category><category>gcp</category><category>google cloud platform</category><category>ndb</category></item><item><title>Uubntu에서 Nabi 툴바를 tray에 넣기</title><link>http://ujuc.github.io/2014/11/09/nabi-toolbar-in-tray-on-ubuntu/</link><description>&lt;p&gt;오랜만에 Ubuntu를 설치하고 &lt;tt class="docutils literal"&gt;ibus&lt;/tt&gt; 가 조금 불편할뻔하다가&amp;#8230;
쓰던거 쓰자해서 &lt;tt class="docutils literal"&gt;nabi&lt;/tt&gt; 를 설치했는데.. 이놈의 tray에 들어갈려고 하지&amp;nbsp;않는다.&lt;/p&gt;
&lt;p&gt;그래서 조금 검색을 했더니&amp;#8230;
&lt;tt class="docutils literal"&gt;gsettings get com.canonical.Unity.Panel &lt;span class="pre"&gt;systray-whitelist&lt;/span&gt;&lt;/tt&gt; 라는 걸로 추가를
해줘야한다고 하는데&amp;#8230; 이넘은 14.10에는 없다. 조금더 찾아보니, 13.04부터는 아예&amp;nbsp;빠져있었다.&lt;/p&gt;
&lt;p&gt;다시 검색어를 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;systray-whitelist&lt;/span&gt;&lt;/tt&gt; 로 검색중 &lt;strong&gt;Web &lt;span class="caps"&gt;UPD8&lt;/span&gt;&lt;/strong&gt; 에 올라온 글을&amp;nbsp;확인.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.webupd8.org/2013/05/how-to-get-systray-whitelist-back-in.html"&gt;How to whitelist systray apps in ubuntu 14.04 or&amp;nbsp;14.10(W/unity)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;나같은 경우에는  14.10을&amp;nbsp;설치했으니.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt-add-repository ppa:guran/systray-utopic
sudo apt-get update&lt;span class="p"&gt;;&lt;/span&gt; sudo apt-get upgrade
&lt;/pre&gt;
&lt;p&gt;그리고 &lt;tt class="docutils literal"&gt;Alt + F2&lt;/tt&gt; 를 눌러 &lt;tt class="docutils literal"&gt;unity&lt;/tt&gt; 를 찾아 클릭해주면 알아서 unity가 재시작되면서
nabi가 트레이에 들어가게&amp;nbsp;된다.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;덧. 아래에보면 관련 ppa를 삭제하는 방법이 나오는데 따로 패키지를 설치할
필요없이 아래의 명령어로 삭제가&amp;nbsp;가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt-add-repository -r ppa:guran/systray-utopic
sudo apt-get update&lt;span class="p"&gt;;&lt;/span&gt; sudo apt-get autoremove
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sun, 12 Apr 2015 14:12:00 +0900</pubDate><guid>tag:ujuc.github.io,2014-11-09:2014/11/09/nabi-toolbar-in-tray-on-ubuntu/</guid><category>linux</category><category>ubuntu</category><category>nabi</category><category>setting</category></item><item><title>[Python] Paramiko</title><link>http://ujuc.github.io/2014/04/07/python-paramiko/</link><description>&lt;p&gt;한글로된 글이 없어서 우선 내가 알아낸 곳과 사용한 곳까지 작성을&amp;nbsp;해둘려고한다.&lt;/p&gt;
&lt;h1 id="paramiko"&gt;&lt;a href="http://www.paramiko.org/"&gt;Paramiko&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.6+, 3.3+에서 사용할 수 있는 SSHv2&amp;nbsp;구현체이다.&lt;/li&gt;
&lt;li&gt;물론 Client, Server를 둘다 사용이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;li&gt;저 레벨 암호화를 위해서 &lt;a href="http://pycrypto.org/"&gt;PyCrypro&lt;/a&gt;(이부분은 Python C 확장으로 구현)를 제외한 나머지 부분들은 전부 Python으로만&amp;nbsp;구현되어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용&lt;/h2&gt;
&lt;h3 id="1"&gt;1. 사용&amp;nbsp;예제&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;

&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="2-host-keys"&gt;2. Host&amp;nbsp;Keys&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;첫 접근시 받아오는 Host Keys가 있다. 이것을 받아서 저장하던 날려먹던 상관은 하지 않지만 있어야지 접근이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;li&gt;처음 &lt;code&gt;ssh&lt;/code&gt;로 접근시 무의식적으로 &lt;code&gt;yes&lt;/code&gt;를 누르는&amp;nbsp;그것!!&lt;/li&gt;
&lt;li&gt;그러다보니 여기서도 그것에 관련된 내용을 사용할 수&amp;nbsp;있다. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_missing_host_key_policy(policy)&lt;/code&gt;를 이용하여 host keys를 받아 저장할 것인지 아닌지를 판단하게 되는데. 기본값은 &lt;code&gt;RejectPolicy&lt;/code&gt;로 되어있으며, &lt;code&gt;yes&lt;/code&gt;를 받아와야한다면 &lt;code&gt;AutoAddPolicy&lt;/code&gt;를 사용하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;

&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_missing_host_key_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoAddPolicy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;물론 Public key를 이용해서 비밀번호 없이 접근이 가능하도록 할 수 있을듯 한데 그건 좀 확인이&amp;nbsp;필요할듯.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3"&gt;3.&amp;nbsp;실행&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실행 명령어 &lt;code&gt;exec_command&lt;/code&gt;를 실행하게되면, 값을 3개를 &lt;code&gt;tuple&lt;/code&gt;로&amp;nbsp;받아온다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;이다.
*명령어에 대한 값들을 받아와 확인할때는 아래와 같이 작성을&amp;nbsp;하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;만약 &lt;code&gt;sudo&lt;/code&gt;명령어가 필요한&amp;nbsp;경우,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;위와 같이하여 작성을 하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;code&gt;write&lt;/code&gt;다음에는 &lt;code&gt;flush&lt;/code&gt;를 꼭 해줘야 작동을 하니 그점은 주의하도록 한다. 관련 내용은 &lt;a href="http://docs.paramiko.org/en/latest/api/file.html#paramiko.file.BufferedFile.write"&gt;여기&lt;/a&gt;에&amp;nbsp;있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4"&gt;4. 연결&amp;nbsp;끊기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;작업이 끝났으면 연결을&amp;nbsp;끊어야된다.&lt;/li&gt;
&lt;li&gt;그냥 &lt;code&gt;close()&lt;/code&gt;를 불러오면 알아서&amp;nbsp;끊어준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-sftp"&gt;5. &lt;span class="caps"&gt;SFTP&lt;/span&gt;&amp;nbsp;사용.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어찌보면 &lt;code&gt;ssh&lt;/code&gt;를 사용하면서 편했던 것이 &lt;code&gt;sftp&lt;/code&gt;의 사용이다. 간단한 사용방법과 &lt;code&gt;ssh&lt;/code&gt;가 설치가되어있으면 따로 &lt;code&gt;ftp&lt;/code&gt;를 생성하지 않더라도 간단한 파일을 주고 받을 수 있도록 되어있기&amp;nbsp;때문이다.&lt;/li&gt;
&lt;li&gt;먼저 &lt;code&gt;ssh&lt;/code&gt;로 접속한 다음, &lt;code&gt;open_sftp()&lt;/code&gt;후 파일을 가져올때는 &lt;code&gt;get('localfile.py', 'remotefile.py')&lt;/code&gt;를 이용하고, 올려둘때는 &lt;code&gt;put('localfile.py', 'remotefile.py')&lt;/code&gt;를&amp;nbsp;사용하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;참고&amp;nbsp;자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.paramiko.org/"&gt;Paramiko&amp;nbsp;Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.paramiko.org/en/latest/index.html"&gt;Docs&amp;nbsp;paramiko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jessenoller.com/blog/2009/02/05/ssh-programming-with-paramiko-completely-different"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; Programming With Paramiko | Completely&amp;nbsp;Different&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segfault.in/2010/03/paramiko-ssh-and-sftp-with-python/"&gt;Paramiko: &lt;span class="caps"&gt;SSH&lt;/span&gt; and &lt;span class="caps"&gt;SFTP&lt;/span&gt; With&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 03 Mar 2016 22:00:00 +0900</pubDate><guid>tag:ujuc.github.io,2014-04-07:2014/04/07/python-paramiko/</guid><category>python</category><category>paramiko</category><category>ssh</category><category>lib</category></item><item><title>[Monitoring] SkwiSSH 설치 및 구성</title><link>http://ujuc.github.io/2014/02/28/skwissh-install-n-config/</link><description>&lt;h1 id="skwissh"&gt;&lt;a href="https://github.com/rsaikali/django-skwissh"&gt;SkwiSSH&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;오늘 Facebook에 공유가된 Monitoring Tool. Django에서 App으로 돌릴 수 있고, 참 깔ㄹ끔하기에 회사에서 서버 볼 때 사용할까하여&amp;nbsp;구성해봤다.&lt;/p&gt;
&lt;p&gt;코드로는 Django v1.5와  v1.5.1을 지원한다고 작성해놨는데 &lt;code&gt;setup.py&lt;/code&gt;를 사용하여 구성하게 되면 Django v1.6을 설치하라며 에러문구가&amp;nbsp;발생한다.&lt;/p&gt;
&lt;p&gt;그리고 외부 서버를 추가하기 위해서 &lt;code&gt;server_ip:22&lt;/code&gt;를 입력해줘야지 외부 서버에 ssh로 접근하여 값들을 읽어오게&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;아직은 부족한 점이&amp;nbsp;많다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensor(명령어를 날려서 값을 받아오는 worker를 의미한다.) 추가하고 변경하려면 변경사항이 적용이 안되는&amp;nbsp;현상.&lt;/li&gt;
&lt;li&gt;Sensor들의 정렬을 임의로 할 수 없다는 것. (오름차순으로&amp;nbsp;구성되어있다.)&lt;/li&gt;
&lt;li&gt;기본 명령어 날리는게 1분간격으로 수정할만한 탭이&amp;nbsp;안보인다.&lt;/li&gt;
&lt;li&gt;기본 DB로 SQLite3 파일을 사용하는데 점점 커지는 모습을 확인 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;bash를 사용할 줄 안다면 정말 쉽게 사용이 가능하다.&lt;ul&gt;
&lt;li&gt;명령을 SSH로 날리기에 그쪽 서버 콘솔로 리턴값을 넘길 수 있는 프로그램이라면 어떻게든&amp;nbsp;사용하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 글에서는 Sensor에 명령어와 파셔 세팅은 작성하지&amp;nbsp;않았다.&lt;/p&gt;
&lt;h2 id="_1"&gt;기본&amp;nbsp;구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;OS&lt;/span&gt;: Ubuntu 12.04.4&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;Install&amp;nbsp;Package&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;패키지&amp;nbsp;설치&lt;/h3&gt;
&lt;h4 id="django"&gt;Django&amp;nbsp;설치&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip isntall Django
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="django-skwissh"&gt;Django-skwissh&amp;nbsp;설치&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install buid-essential python-dev
$ git clone https://github.com/rsaikali/django-skwissh.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; django-skwissh
$ sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="django_1"&gt;Django&amp;nbsp;설정&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin.py startproject mysite
$ &lt;span class="nb"&gt;cd&lt;/span&gt; mysite
$ vi mysql/settings.py

&lt;span class="nv"&gt;INSTALL_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;kronos&amp;#39;&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;skwissh&amp;#39;&lt;/span&gt;,
&lt;span class="o"&gt;)&lt;/span&gt;

$ vi mysite/urls.py

&lt;span class="c1"&gt;# Skwissh&lt;/span&gt;
url&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skwissh&amp;#39;&lt;/span&gt;, include&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skwissh.urls&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;데이터 베이스&amp;nbsp;설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.p syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Skwissh 테스트&amp;nbsp;설치&lt;/li&gt;
&lt;li&gt;이작업을 하면 crontab에 테스크가&amp;nbsp;등록된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py installtask
&lt;span class="c1"&gt;# crontab에 등록되었는지 확인&lt;/span&gt;
$ crontab -l
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Django 서버&amp;nbsp;작동&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python mange.py runserver 0.0.0.0:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;참고&amp;nbsp;페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rsaikali/django-skwissh"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rsaikali.github.io/django-skwissh/"&gt;Gitpage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 03 Mar 2016 22:08:00 +0900</pubDate><guid>tag:ujuc.github.io,2014-02-28:2014/02/28/skwissh-install-n-config/</guid><category>python</category><category>monitoring</category><category>ssh</category><category>django</category></item></channel></rss>