<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>잘 밤에 쓸데없는 생각하기...</title><link>http://ujuc.github.io/</link><description>Anythink, Everythink!</description><atom:link href="http://ujuc.github.io/feeds/develop.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 16 Jan 2016 22:53:00 +0900</lastBuildDate><item><title>`_vim_files: function definition files net found` on zsh</title><link>http://ujuc.github.io/2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/</link><description>&lt;p&gt;아&amp;#8230; 오랜만에 vim으로 작업을 하려고 탭을 두번 클릭했더니 아래와 같은 에러가 뜬다. 이넘을 어떻게&amp;nbsp;해야되지.&lt;/p&gt;
&lt;p&gt;&lt;img alt="error!" src="http://ujuc.github.io/img/2016-01-16_error.png" /&gt;&lt;/p&gt;
&lt;h3&gt;원인&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zcompdump&lt;/code&gt; 때문이라고 하고, 이건 매번 문제가&amp;nbsp;있나보다.ㅡ.ㅡ;;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/robbyrussell/oh-my-zsh/issues/518"&gt;github/robbyrusell/oh-my-zsh/issues/518&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;해결방법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rm ~/.zcompdump&lt;/code&gt;를 삭제하면 된다고&amp;#8230;
그리고 꼭 하고 난뒤에 &lt;code&gt;exec zsh&lt;/code&gt;를 하도록&amp;nbsp;하자.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sat, 16 Jan 2016 22:53:00 +0900</pubDate><guid>tag:ujuc.github.io,2016-01-16:2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/</guid><category>dev</category><category>zsh</category><category>vim</category></item><item><title>Git flow, GitHub flow, GitLab flow</title><link>http://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/</link><description>&lt;p&gt;회사에서  &lt;code&gt;git&lt;/code&gt;을 가지고서 버전관리를 본격적으로 하면서, 너무 많은 부분에서 문제가 발생을 하는 것을 보고 이걸 어떤 방식으로 사용하면 조금더 꼬이는 것을 방지할 수 있을까라는 생각을 하고 있다. 
물론 새로운 프로젝트를 진행하면서 어떤 방법으로 진행하는 것이 맞는 것인지도 필요하기도 했고, 그러다가 &lt;a href=""&gt;이상한 모임 Slack&lt;/a&gt;에서 관련 이야기가 나오면서 커밋을 하기위한 방법론 중 하나인 &lt;code&gt;git-flow&lt;/code&gt;의 종류가 3가지나 된다는 것을 보고 이놈들의 다른 점이 무엇인지 어떤 방법에서 편한 것인지에 대한 내용을 확인하고&amp;nbsp;싶어졌다.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;Git&amp;nbsp;Flow&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;Vincent Driessen이 말한 branching model&lt;/a&gt;를 구현한 Git 확장 모듈이다. - &lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;기본 브랜치는 5가지를 이야기한다. &lt;code&gt;feature &amp;gt; develop &amp;gt; release &amp;gt; hotfix &amp;gt; master&lt;/code&gt; 브랜치가 존재하며, 머지 순서는 앞에서 뒤로 진행된다. &lt;code&gt;release&lt;/code&gt; 브랜치와 &lt;code&gt;hotfix&lt;/code&gt; 브랜치의 경우, &lt;code&gt;develop&lt;/code&gt; 브랜치의 오른쪽에 존재하기에 모두 &lt;code&gt;develop&lt;/code&gt; 브랜치도 머지를 하도록 구성이&amp;nbsp;되어있다.&lt;/p&gt;
&lt;p&gt;Vincent Driessen은 관련하여 스크림트로 명령을 구성해놨으며, 그냥 설치를 하여 CLI에서 명령으로 작업을 하여도 되고, &lt;span class="caps"&gt;GUI&lt;/span&gt; 툴들에서 기본 내장 git-flow 명령이나 플러그인을 설치하여 작업을 진행할 수 있도록 보편화되어잇는 브런칭&amp;nbsp;모델이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://nvie.com/img/git-model@2x.png" /&gt;&lt;/p&gt;
&lt;h3&gt;구조와&amp;nbsp;흐름&lt;/h3&gt;
&lt;p&gt;가장 중심이되는 브랜치는 &lt;code&gt;master&lt;/code&gt;랑 &lt;code&gt;develop&lt;/code&gt; 브랜치이며, 이 두개의 브랜치는 무조건 있어야된다고 보면된다. 이름은 바뀔수 있다만 왠만해서는 변경하지 않고 진행하도록 하자. Git도 Production에서 사용하는 브랜치는 &lt;code&gt;master&lt;/code&gt;를 사용하게 되니 관련된 부분을 변경하면 새로운 사람이 왔을때 스터디 커브가 존재할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;머지된 &lt;code&gt;feature&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;hotfix&lt;/code&gt; 브랜치는 삭제하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4&gt;Feature&amp;nbsp;브랜치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;release-*&lt;/code&gt;, &lt;code&gt;hotfix-*&lt;/code&gt;를 제외한 어떤 것이든&amp;nbsp;가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 기능을 추가하는 브랜치이다.
&lt;code&gt;feature&lt;/code&gt;브랜치는 &lt;code&gt;origin&lt;/code&gt;에는 반영하지 않고, 개발자의 reop애만 존재하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;여기서 머지를 할때, &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 브랜치에서 머지가 되었음을 git 기록에 남겨두도록 한다. 이렇게되면 나중에 히스토리 관리가 어려워지는 부분이 존제한다고 한다만&amp;#8230; 그것을 확인할 수 있는 방법들은 많으니&amp;nbsp;뭐&amp;#8230;&lt;/p&gt;
&lt;h4&gt;Release&amp;nbsp;브랜치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;release-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 Production 릴리즈를 위한 브랜치이다.
지금까지 한 기능을 묶어 &lt;code&gt;develop&lt;/code&gt; 브랜치에서 &lt;code&gt;release&lt;/code&gt; 브랜치를 따내고, &lt;code&gt;develop&lt;/code&gt; 브랜치에서는 다음번 릴리즈에서 사용할 기능을 추가한다.
&lt;code&gt;release&lt;/code&gt; 브랜치에서는 버그픽스에 대한 부분만 커밋하게되고, &lt;strong&gt;릴리즈가 준비되었다고 생각하면&lt;/strong&gt; &lt;code&gt;master&lt;/code&gt;로 머지를 진행한다. (이때도 &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 머지하였음을 남긴다.) 
&lt;code&gt;master&lt;/code&gt;로 머지 후 &lt;code&gt;tag&lt;/code&gt; 명령을 이용하여 릴리즈 버전에 대해 명시를 하고, &lt;code&gt;-s&lt;/code&gt; 나 &lt;code&gt;-u &amp;lt;key&amp;gt;&lt;/code&gt; 옵션을 이용하여 머지한 사람의 정보를 남겨두도록 한다. 그런뒤 &lt;code&gt;develop&lt;/code&gt; 브랜치로 머지하여, &lt;code&gt;release&lt;/code&gt; 브랜치에서 수정된 내용이 &lt;code&gt;develop&lt;/code&gt; 브랜치에 반영이되도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4&gt;Hotfix&amp;nbsp;브랜치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;hotfix-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Production에서 발생한 버그들은 전부 여기로&amp;#8230; 수정 끝나면, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt; 브랜치에 반영하고, &lt;code&gt;master&lt;/code&gt;에 다가는 &lt;code&gt;tag&lt;/code&gt; 를 추가해준다.
만약 &lt;code&gt;release&lt;/code&gt; 브랜치가 존재한다면, &lt;code&gt;release&lt;/code&gt; 브랜치에 &lt;code&gt;hotfix&lt;/code&gt; 브랜치를 머지하여 릴리즈될때 반영이 될 수 있도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h3&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;명령어가&amp;nbsp;나와있다.&lt;/li&gt;
&lt;li&gt;왠만한 에디터와 IDE에는 플러그인으로&amp;nbsp;존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브랜치가 많아&amp;nbsp;복잡하다.&lt;/li&gt;
&lt;li&gt;안쓰는 브랜치가 있다. 그리고 몇몇 브랜치는 애매한&amp;nbsp;포지션이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model - Vincent&amp;nbsp;Driessen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&amp;nbsp;cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huns.me/development/1131"&gt;gifflow, 쉬운 git brunch 관리 - 개발왕&amp;nbsp;김코딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ohgyun.com/402"&gt;git 브랜칭 전략과 git flow -&amp;nbsp;꿀벌개발일지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GitHub&amp;nbsp;Flow&lt;/h2&gt;
&lt;p&gt;Scott chacon은 &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub Flow&lt;/a&gt;에서 Git flow가 좋은 방식이긴 하지만 GitHub에서 사용하기에는 복잡하다 여겨 사용하지 않고 &lt;code&gt;GitHub Flow&lt;/code&gt;라는 내용으로 사용을 하고 있다고 한다. 그리고 &lt;strong&gt;자동화의 계념이 들어가 있다는 점&lt;/strong&gt;. 자동화가 안되어있는 곳에서는 수동으로 관련 작업을 진행하면&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;흐름이 단순한만큼 룰도 단순하다. &lt;code&gt;master&lt;/code&gt; 브랜치에대한 &lt;code&gt;role&lt;/code&gt;만 정확하다면 나머지 브랜치들에는 관여를 하지 않는다. 그리고 &lt;code&gt;pull request&lt;/code&gt; 기능을 사용하도록 권장을&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://cdn-ak.f.st-hatena.com/images/fotolife/s/shoma2da/20151104/20151104223339.png" /&gt;&lt;/p&gt;
&lt;h3&gt;특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt; 브랜치가 명확하지 않는 시스템에서 사용에 맞게&amp;nbsp;되어있다. &lt;/li&gt;
&lt;li&gt;여기에는 GitHub의 서비스 특성상. 릴리즈라는 개념이 없는 서비스를 진행하고 있어서 그런것으로 보이며, 웹 서비스들이 릴리즈라는 계념이 없이지고 있으니 사용하기 편할 것으로&amp;nbsp;보인다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hotfix&lt;/code&gt;와 가장 작은 기능을 구분하지 않는다. 어짜피 둘다 개발자가 수정해야되는 일중에 하나이다. 단지 우선 순위가 어디가 높냐라는&amp;nbsp;단계이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;그럼 어떻게 사용할&amp;nbsp;것인가?&lt;/h3&gt;
&lt;h4&gt;1. &lt;code&gt;master&lt;/code&gt; 브랜치는 어떤 때든 배포가&amp;nbsp;가능하다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; 브랜치는 항상 최신의 상태이며, stable 상태로 Product에 배포되는 브랜치이다. 그리고 이 브랜치에 대해서는 업격한 &lt;em&gt;role&lt;/em&gt;를 주어&amp;nbsp;사용한다. &lt;/p&gt;
&lt;h4&gt;2. 새로운 일을 시작하기 위해 브랜치를 &lt;code&gt;master&lt;/code&gt;에서 딴다면 이름은 어떤일을 하는지 명확하게&amp;nbsp;작성한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와는 다르게 &lt;code&gt;feature&lt;/code&gt; 브랜치나 &lt;code&gt;develop&lt;/code&gt; 브랜치가 존재하지 않는다. 그렇기에 새로운 기능을 추가하거나 버그를 해결하기 위한 브랜치의 이름은 자세하게 어떤 일을 하고 있는지에 대해서 작성해주도록 하자. Github 페이지에서 보면 어떤 일들이 진행되고 있는지를 확인하기 쉽게&amp;nbsp;말이다.&lt;/p&gt;
&lt;h4&gt;3. 원격지 브랜치로 수시로 push를&amp;nbsp;한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와 가장 상반되는 방식이다. 항상 원격지에 자신이 하고 있는 일들을 올려 다른 사람들도 확인할 수 있도록 해준다.
이 방법의 좋은점은 하드웨어에 문제가 발생하여 작업하던 부분이 날라가더라고 원격지에 있는 소스를 받아서 작업을 할 수 있도록&amp;nbsp;해준다.&lt;/p&gt;
&lt;h4&gt;4. 피드백이나 도움이 필요할때, 그리고 머징 준비가 완료되었을때는 &lt;code&gt;pull request&lt;/code&gt;를&amp;nbsp;생성한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pull request&lt;/code&gt; 는 코드 리뷰를 도와주는 시스템이다. 
그렇기에 이것을 이용하여 자신의 코드를 공유하고, 리뷰를 받을 수 있도록 한다. 물론 머지가 준비 완료되어 &lt;code&gt;master&lt;/code&gt; 브랜치로 반영을 요구하여도&amp;nbsp;된다.&lt;/p&gt;
&lt;h4&gt;5. 기능에 대한 리뷰와 사인이 끝난후 &lt;code&gt;master&lt;/code&gt;로&amp;nbsp;머지한다.&lt;/h4&gt;
&lt;p&gt;곧장 product로 반영이될 기능이기에 이해관계가 연결된 사람들과 충분한 논의 이후 반영하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4&gt;6. &lt;code&gt;master&lt;/code&gt;로 머지되고 푸시되었을때는 즉시 배포되어야&amp;nbsp;한다.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;GitHub Flow&lt;/strong&gt;의 핵심인듯한 &lt;code&gt;master&lt;/code&gt;로 머지가 일어나면 &lt;code&gt;hubot&lt;/code&gt;을 이용하여 자동으로 배포가 되도록 설정&amp;nbsp;해놓는다.&lt;/p&gt;
&lt;h3&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 전략이&amp;nbsp;단순하다.&lt;/li&gt;
&lt;li&gt;처음 git을 접하는 사람에게 정말 좋은 시스템이&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;Github 사이트에서 제공하는 기능을 모두 사용하여 작업을&amp;nbsp;진행한다.&lt;/li&gt;
&lt;li&gt;코드리뷰를 자연스럽게 사용할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;CI가 필수적이며, 배포는 자동으로 진행할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;Github가 작업을 할때 이렇게 작업하고&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CI와 배포 자동화가 되어있지 않은 시스템에서는 사람이 관련된 업무를&amp;nbsp;진행한다.&lt;/li&gt;
&lt;li&gt;많은 것들이 올라오기 시작하면&amp;#8230; 그때부터는&amp;nbsp;헬이&amp;#8230;&lt;/li&gt;
&lt;li&gt;너무 간단하니&amp;#8230; 이거 단점이 있나&amp;nbsp;십다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.github.com/introduction/flow/"&gt;Understanding the GitHub&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dogfeet.github.io/articles/2011/github-flow.html"&gt;GitHub Flow -&amp;nbsp;dogfeet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://b.pyar.bz/blog/2014/01/22/github-flow/"&gt;Github-flowを分かりやすく図解してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucamezzalira.com/2014/03/10/git-flow-vs-github-flow/"&gt;Git Flow vs Github&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/1557-github-flow-in-the-browser"&gt;GitHub Flow in teh&amp;nbsp;Browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GitLab&amp;nbsp;Flow&lt;/h2&gt;
&lt;p&gt;Github에서 말하는 flow는 너무나도 간단하여 배포, 환경구성, 릴리즈, 통합에 대한 이슈를 남겨둔 것이 많았다. 그것을 보안하기위해 GitLab에서 관련 내용들을 추가적으로 덧붙여 설명한것을&amp;nbsp;일컷는다.&lt;/p&gt;
&lt;h3&gt;Production branch with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://about.gitlab.com/images/git_flow/production_branch.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;production&lt;/code&gt; 브랜치가 존재하여 커밋한 내용들을 일방적으로 디플로이를 하는 형태. GitHub에서 브랜치 하나를 더 구성하여 사용하는 이것도 조금은 간단한 구성이다.
이렇게 구성하면 배포 자동화가 되어있지않은 구성에서 어떻게 배포를 진행할 것인가에 대한 내용을 담았다. 물론 이걸로 부족하여 다음의 것도&amp;nbsp;추가되었다.&lt;/p&gt;
&lt;h3&gt;Environment branches with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://about.gitlab.com/images/git_flow/environment_branches.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt;와 &lt;code&gt;production&lt;/code&gt; 사이에 &lt;code&gt;pre-production&lt;/code&gt;을 두어 개발한 내용을 곧장 반영하지 않고 시간을 두고 반영을 하는 것을 말한다. Staging을위한 공간을&amp;nbsp;만드는거지&amp;#8230;&lt;/p&gt;
&lt;h3&gt;Release branches with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://about.gitlab.com/images/git_flow/release_branches.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;release&lt;/code&gt;한 브랜치를 두고서 보안상 문제가 발생한 것이나 백포트를 위해서 작업을 할 경우, cherry-pick을 이용해서 작업을 진행할 수 도 있다. 아니면 해당 릴리즈에서 발생하는 버그들을 묶어서 수정하는 방식을 진행하며된다. 일반적으로 말하는 &amp;#8216;upstream first&amp;#8217; 정책이라고&amp;nbsp;보면된다.&lt;/p&gt;
&lt;h3&gt;Merge/pull requests with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;Pull request를 사용하는 방법이다. GitHub Flow에서 하는 방법과 동일하다. 원문은 길게 적어놨는데&amp;#8230;&amp;nbsp;딱히&amp;#8230;&lt;/p&gt;
&lt;h3&gt;Issues with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;Issue 트러커와 연결하여 사용하는 것을 말한다. 긴~~ 시간동안 작업을 할 경우, 이슈를 생성하여 작업을 진행하는 것으로&amp;#8230; 브랜치 이름에는 이슈번호를 적어 작업중인 이슈가 어떤 것인지를 명확하게 해주는 것이 필요하다.
작업이 끝나거나 코드 공유가 필요한 시점이면 Merge/pull requsts를&amp;nbsp;보낸다. &lt;/p&gt;
&lt;p&gt;다적을려고 봤더니 그냥 GitLab 사용법에 대해서만 추가적으로 말하고 있어서 이쯤적고 영어로 읽자. 영어가 어렯다면&amp;#8230; 일본어를 번역해서 읽으면 좀 더 쉽게 읽을 수&amp;nbsp;있다.&lt;/p&gt;
&lt;h3&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;GitLab&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://postd.cc/gitlab-flow/"&gt;GitLab&amp;nbsp;flowから学ぶワークフローの実践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.gitlab.com/ee/workflow/gitlab_flow.html"&gt;GitLab&amp;nbsp;Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cloudsoftcorp.com/blog/2015/01/gitlab-flow-ftw/"&gt;GitLab Flow &lt;span class="caps"&gt;FTW&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shoma2da.hatenablog.com/entry/2015/11/04/233534"&gt;アプリ開発にはGitlab&amp;nbsp;flowが合うと思います&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;끝&lt;/h2&gt;
&lt;p&gt;하&amp;#8230; 길었다. 모든 자료는 공식적으로 첫번째로 작성된 포스트의 내용을 가져와 작성하였다. 그쪽의 내용이 가장 먼저 말한사람의 생각이 들어가 있다고 생각했기때문이다. 그리고 찾으면서 발견한 글들의 경우, 참고 사이트로 작성을 해놨으니 그것을 확인하면&amp;nbsp;될듯. &lt;/p&gt;
&lt;p&gt;Git flow가 편한줄 알았더니&amp;#8230; GitHub나 GitLab을 사용하고 있다면, 굳이 Git flow가 아니더라도 괜찮겠다는 생각이드는데 딱히 OpenSource를 하는 그룹에서도 Git flow를 사용하기보다는 자신의 코드가 들어가있는 플랫폼을 가지고서 작업을 하는 경우가 많아서&amp;#8230; 뭐. 업스트림에 작업을 할 수 있는 사람이&amp;nbsp;한정되어있으니까&amp;#8230;&lt;/p&gt;
&lt;p&gt;이런 방법들을 어떻게 사용해보는 것이 좋을련지를 고민해보는 것도 필요하지 않을까 한다. 간단하게 하는 방법도 있고 하니까.. 그리고 내꺼나 차근차근 구축해&amp;nbsp;나가야되는데&amp;#8230; &lt;/p&gt;
&lt;h3&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/nzakas/5511916"&gt;Using GitHub inside a company -&amp;nbsp;Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nczonline.net/blog/2013/05/21/github-workflows-inside-of-a-company/"&gt;GitHub workflows inside of a&amp;nbsp;company&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/tkhm/items/cc7855d32d640687b43c"&gt;Git利用時のフローはどれを使うか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The&amp;nbsp;gitworkflows(7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 16 Dec 2015 08:50:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-12-16:2015/12/16/git-flow-github-flow-gitlab-flow/</guid><category>git</category><category>workflow</category><category>github</category><category>gitlab</category></item><item><title>git-town 사용해보자</title><link>http://ujuc.github.io/2015/10/26/git-town-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/</link><description>&lt;p&gt;아무런 생각없이 메일 온것을 확인중&amp;#8230; 발견한 &lt;a class="reference external" href="https://github.com/Originate/git-town"&gt;git-town&lt;/a&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;솔직히 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 와 다른게 먼가 있을 것같아서 사용을 해볼려고 깔아뒀고,
지금 작성하는 글도 브런치를 &lt;tt class="docutils literal"&gt;git town&lt;/tt&gt; 명령어중 하나를 사용해서 브런치를
딴 후&amp;nbsp;작성중이다.&lt;/p&gt;
&lt;p&gt;명령어 9가지에 대해서 좀 알아보자. 사용법도 같이 좀&amp;nbsp;써보게&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Development Workflow&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-hack.md"&gt;git hack&lt;/a&gt; : 중심 가지에서 새로운 기능 가지를 때는데&amp;nbsp;사용함.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-sync.md"&gt;git sync&lt;/a&gt; : 원본 저장소의 변화분들을 현재 가지에&amp;nbsp;업데이트.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-new-pull-request.md"&gt;git new-pull-request&lt;/a&gt; : 새로운 풀리퀘&amp;nbsp;생성.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-ship.md"&gt;git ship&lt;/a&gt; : 기능 가지를 중심 가지로 넣고&amp;nbsp;꺽기.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repository Maintenance&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-kill.md"&gt;git kill&lt;/a&gt; : 새로운 가지&amp;nbsp;꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-prune-branches.md"&gt;git prune-branches&lt;/a&gt; : 합쳐진 가지&amp;nbsp;꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-rename-branch.md"&gt;git rename-branch&lt;/a&gt; : 이름&amp;nbsp;변경&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-repo.md"&gt;git repo&lt;/a&gt; : 저장소&amp;nbsp;홈페이지로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration and Help&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-town.md"&gt;git town&lt;/a&gt; : 도움말 보기, 구성 확인 및&amp;nbsp;변경.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;확인용이자 기억용으로 작성한건데&amp;#8230; 옵션이 많다&amp;#8230; 그냥 필요할때만&amp;nbsp;봐야지..&lt;/p&gt;
&lt;p&gt;각 명령어별로 어떻게 돌아가는지에 대해서는 &lt;a class="reference external" href="https://github.com/Originate/git-town/tree/master/features"&gt;features&lt;/a&gt;
폴더로 확인하는 편이 좋다. BDD로 테스트를 진행해서 해당 기능들이 어떻게 진행하고
있는지를 그나마 보기 쉽게 되어있기&amp;nbsp;때문이다.&lt;/p&gt;
&lt;p&gt;솔직히 내부 기능들이 Bash로 작성되어있어서 찾아다니기&amp;nbsp;힘들다&amp;#8230;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Mon, 26 Oct 2015 01:11:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-10-26:2015/10/26/git-town-사용해보자/</guid><category>git</category><category>git-town</category><category>git plugins</category></item><item><title>Vim mouse mode</title><link>http://ujuc.github.io/2015/07/25/vim-mouse-mode/</link><description>&lt;p&gt;나도 &lt;a class="reference external" href="http://github.com/ujuc/dotrc"&gt;vimrc&lt;/a&gt; 설정을 따로 만들었다만, 그것들을 전부 다른 애들이 설정해놓은 것들에서 수정해서 만든거라. 자세히 매뉴얼을 읽어보고 만들지는&amp;nbsp;않았다.&lt;/p&gt;
&lt;p&gt;그런데 얼마전부터 &lt;a class="reference external" href="http://neovim.io"&gt;NeoVim&lt;/a&gt; 매뉴얼을 번역하면서 기능들을 보고 있는데, 사용하고 있는 것들에대해서 나올때마다 작성을 해놔야지&amp;#8230; 안그러면 또 안찾아볼 가능성이&amp;nbsp;높으니&amp;#8230;&lt;/p&gt;
&lt;p&gt;마우스와 관련된 옵션은 &lt;tt class="docutils literal"&gt;mouse_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousefocus_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;moushide_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousemodel_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mouseshape_&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousetime_&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;옵션 설명(이라쓰고&amp;nbsp;번역&amp;#8230;)&lt;/h2&gt;
&lt;div class="section" id="mouse"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mouse'"&gt;mouse&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;string (기본값&amp;nbsp;&amp;#8220;a&amp;#8221;)&lt;/p&gt;
&lt;p&gt;마우스를 사용할 수 있도록 설정한다. 터미널에서는 100%. GUI에서 작동하는 것에 대해서 알고 싶으면, | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#gui-mouse"&gt;gui-mouse&lt;/a&gt; | 를&amp;nbsp;확인하도록.&lt;/p&gt;
&lt;p&gt;모드에서 사용하려면 다음 옵션을&amp;nbsp;달아준다:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/pattern.html#n"&gt;n&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#i"&gt;i&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Insert"&gt;Insert&lt;/a&gt;&amp;nbsp;모등&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#c"&gt;c&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/cmdline.html#Command-line"&gt;Command-line&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#h"&gt;h&lt;/a&gt;: 도움말 파일에서 수정할때, 모든&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;a: 모든&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;r: | &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#hit-enter"&gt;hint-enter&lt;/a&gt; | 와 | &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#more-prompt"&gt;more-prompt&lt;/a&gt; |&amp;nbsp;프롬프트에서&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적으로 모든 모드에서 사용하길 원한다면 &lt;tt class="docutils literal"&gt;:set mouse=a&lt;/tt&gt; 로 구성해두면 된다.
마우스 모드가 제대로 작동하지 않을땐, &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#GUI"&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/a&gt; modeless 섹션에서 마우스를 사용하고 있어서 빠진게 아닌지 확인을&amp;#8230; 아마 텍스트 커서도&amp;nbsp;안움직인다고&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/term.html#mouse-using"&gt;mouse-using&lt;/a&gt; , &lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'clipboard'"&gt;clipboard&lt;/a&gt; 를&amp;nbsp;보세요.&lt;/p&gt;
&lt;p&gt;노트 : X-server로 접근한 터미널에서 마우스를 사용할 땐, 복사, 붙여넣기를 사용할땐 &amp;#8220;* &lt;a class="reference external" href="http://neovim.io/doc/user/sponsor.html#register"&gt;register&lt;/a&gt; 를 사용하게 됩니다. 마우스 버튼을 &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt;  에서 사용하려면, &lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#shift"&gt;shift&lt;/a&gt; 를 누르고 사용하면 됩니다. 자세한건 &lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'clipboard'"&gt;clipboard&lt;/a&gt; 옵션에서&amp;nbsp;확인하세요.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousefocus"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousefocus'"&gt;mousefocus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mousef&amp;#8217;  boolean (기본은 off) - {&lt;span class="caps"&gt;GUI&lt;/span&gt; 에서만&amp;nbsp;작동}&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/windows.html#window"&gt;window&lt;/a&gt; 에서 마우스 포인터를 자동으로 활성화 시킬 수 있습니다. 윈도우 레이아웃이나 다른 방법으로 윈도우 초점을 변경(&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#changing"&gt;changing&lt;/a&gt;) 하려한다면, 마우스 포인터는 윈도우에서 이동하게된다는데&amp;#8230;
딱히 GUI로 할일은&amp;nbsp;없음&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousehide"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousehide'"&gt;mousehide&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mh&amp;#8217;  boolean (기본은 on) - {GUI에서만&amp;nbsp;작동}&lt;/p&gt;
&lt;p&gt;입력할때 마우스 포인터를 감추고, 마우스가 움직이면 그때사&amp;nbsp;보여줌.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousemodel"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousemodel'"&gt;mousemodel&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mousem&amp;#8217;  string (기본은 &amp;#8220;extend&amp;#8221;, &lt;a class="reference external" href="http://neovim.io/doc/user/os_win32.html#Win32"&gt;Win32&lt;/a&gt; 에서는&amp;nbsp;&amp;#8220;popup&amp;#8221;)&lt;/p&gt;
&lt;p&gt;마우스를 사용하는 모델을 설정한다. 마우스 오른쪽 키를 눌렸을때 뭘할지에 대해서 설정하는&amp;nbsp;것.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;extend: 마우스 오른쪽 키를 누르면 섹션이 확장됩니다. &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt; 에서의 내용과 동일하게&amp;nbsp;동작함.&lt;/li&gt;
&lt;li&gt;popup: 마우스 오른쪽 키를 누르면 팝업 메뉴가 뜸. 마우스 왼쪽키를 누르고 있으면, 섹션을 확장 합니다. &lt;span class="caps"&gt;MS&lt;/span&gt; Windows의 작업과&amp;nbsp;동일함.&lt;/li&gt;
&lt;li&gt;popup_setpos: &amp;#8220;popup&amp;#8221;과 유사. 커서가 마우스 클릭된 곳으로 움직임. 자세한건 한번 읽어보는&amp;nbsp;걸로.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설정별 마우스&amp;nbsp;동작&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="27%" /&gt;
&lt;col width="32%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;mouse&lt;/th&gt;
&lt;th class="head"&gt;extend&lt;/th&gt;
&lt;th class="head"&gt;popup(_setpost)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;왼쪽 클릭&lt;/td&gt;
&lt;td&gt;커서 위치&lt;/td&gt;
&lt;td&gt;커서 위치&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;왼쪽 끌기&lt;/td&gt;
&lt;td&gt;섹션 시작&lt;/td&gt;
&lt;td&gt;섹션 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;시프트 - 왼쪽&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#word"&gt;word&lt;/a&gt; 검색&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;오른쪽 클릭&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;td&gt;popup 메뉴 (커서 위치)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;오른쪽 끌기&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;가운데 키&lt;/td&gt;
&lt;td&gt;붙이기&lt;/td&gt;
&lt;td&gt;붙이기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;popup&amp;#8221; 모델에서는 pop-up 메뉴를 구성할 수 있음. | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#popup-menu"&gt;popup-menu&lt;/a&gt; | 에서 확인할&amp;nbsp;것.&lt;/p&gt;
&lt;p&gt;마우스 버튼 맵핑을 바꿀려면 | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#gui-mouse-mapping"&gt;gui-mouse-mapping&lt;/a&gt; | 확인. modeless 섹션에서는 작동&amp;nbsp;안함.&lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousemodel'"&gt;mousemodel&lt;/a&gt;&amp;#8216; 옵션은 &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#:behave"&gt;:behave&lt;/a&gt; 명령어로 설정할 수&amp;nbsp;있음.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mouseshape"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mouseshape'"&gt;mouseshape&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mouses&amp;#8217;  string (기본은 &amp;#8220;i:beam,r:beam,s:updown,sd:corss,m:no,ml:up-arrow,v:rightup-arrow&amp;#8221;) - {| &lt;a class="reference external" href="http://neovim.io/doc/user/various.html#+mouseshape"&gt;+mouseshape&lt;/a&gt; | 기능이 켜진채로 컴파일이 되었을 경우, 사용&amp;nbsp;가능}&lt;/p&gt;
&lt;p&gt;다른 모드에서 마우스 포인터가 작동하는 것에대한 것들을 VIM에게 알려주는&amp;nbsp;옵션(?).&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;적용할 수 있는 모드&amp;nbsp;목록:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;일반&amp;nbsp;윈도우:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/pattern.html#n"&gt;n&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;ve&lt;/dt&gt;
&lt;dd&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'selection'"&gt;selection&lt;/a&gt;&amp;#8216; &amp;#8220;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#exclusive"&gt;exclusive&lt;/a&gt;&amp;#8220;가 포함된 &lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt; 모드 (특정짓지 않은 거라면, &lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#as"&gt;as&lt;/a&gt; &amp;#8216;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;&amp;#8216;와&amp;nbsp;동일)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#o"&gt;o&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Operator-pending"&gt;Operator-pending&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#i"&gt;i&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Insert"&gt;Insert&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#r"&gt;r&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Replace"&gt;Replace&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;dt&gt;나머지:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#c"&gt;c&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서&amp;nbsp;추가&lt;/dd&gt;
&lt;dt&gt;ci&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서 삽입(&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#inserting"&gt;inserting&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;cr&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서 변경(&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#replacing"&gt;replacing&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#m"&gt;m&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;span class="caps"&gt;HIT&lt;/span&gt; &lt;span class="caps"&gt;ENTER&lt;/span&gt;&amp;#8217;나 &amp;#8216;More&amp;#8217;&amp;nbsp;프롬프트에서&lt;/dd&gt;
&lt;dt&gt;ml&lt;/dt&gt;
&lt;dd&gt;idem, 마지막 줄에 커서일&amp;nbsp;경우&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#e"&gt;e&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 포인터에 마지막 &lt;a class="reference external" href="http://neovim.io/doc/user/windows.html#window"&gt;window&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#s"&gt;s&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 상태 라인 위에&amp;nbsp;포인터&lt;/dd&gt;
&lt;dt&gt;sd&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 상태 라인으로&amp;nbsp;드래그&lt;/dd&gt;
&lt;dt&gt;vs&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 수직 분할 라인에&amp;nbsp;포인터&lt;/dd&gt;
&lt;dt&gt;vd&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 수직 분할 라인으로&amp;nbsp;드래그&lt;/dd&gt;
&lt;dt&gt;a&lt;/dt&gt;
&lt;dd&gt;어디든&amp;#8230;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;마우스 모양(shape)는 다음 모양으로&amp;nbsp;보여짐&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%" /&gt;
&lt;col width="18%" /&gt;
&lt;col width="74%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;avail&lt;/th&gt;
&lt;th class="head"&gt;이름&lt;/th&gt;
&lt;th class="head"&gt;뭐냐면&amp;#8230;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;arrow&lt;/td&gt;
&lt;td&gt;기본(&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;) 마우스 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;blank&lt;/td&gt;
&lt;td&gt;모든 곳에서 포인터가 아닌경우 (사용시 주의!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;beam&lt;/td&gt;
&lt;td&gt;I-빔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;updown&lt;/td&gt;
&lt;td&gt;상하 크기 조절 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;leftright&lt;/td&gt;
&lt;td&gt;좌우 크기 조절 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;busy&lt;/td&gt;
&lt;td&gt;시스템에서 사용하는 busy 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;시스템에서 사용하는 &amp;#8216;no input&amp;#8217; 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;udsizing&lt;/td&gt;
&lt;td&gt;상하 크기 재조절을 가르킴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;lrsizing&lt;/td&gt;
&lt;td&gt;좌우 크기 재조절를 가르킴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;crosshair&lt;/td&gt;
&lt;td&gt;큰 &amp;#8216;+&amp;#8217;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;hand1&lt;/td&gt;
&lt;td&gt;검은색 손&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;hand2&lt;/td&gt;
&lt;td&gt;흰색 손&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;pencil&lt;/td&gt;
&lt;td&gt;뭘 쓰고 싶을때&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;question&lt;/td&gt;
&lt;td&gt;큰 &amp;#8216;?&amp;#8217;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;rightup-arrow&lt;/td&gt;
&lt;td&gt;오른쪽 위를 가르키는 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;up-arrow&lt;/td&gt;
&lt;td&gt;위를 가르키는 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;number&amp;gt;&lt;/td&gt;
&lt;td&gt;모든 X11 포인트 숫자 (&lt;tt class="docutils literal"&gt;X11/cursorfont.h&lt;/tt&gt; 에서 확인 가능)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;avail&amp;#8221; 칼럼의 내용에서 &amp;#8216;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt;&amp;#8216; 의 경우 &lt;a class="reference external" href="http://neovim.io/doc/user/os_win32.html#Win32"&gt;Win32&lt;/a&gt; 에서 사용하는 것이고, &lt;cite&gt;x_&lt;/cite&gt; 는 X11에서 사용하는 것에 대한 것임.
Any modes not specified or shapes not available use the normal mouse pointer. - 영어의 짧음으로 뭔말인지&amp;nbsp;모르겠다.&lt;/p&gt;
&lt;p&gt;예로 &lt;tt class="docutils literal"&gt;:set mouseshape=s:udsizing,m:mo&lt;/tt&gt; 요로케 작성가능. 이렇게 해놓으면, (클릭이후 마우스가 이상태에서 효과가 없으면,)상태 바에 마오스를 올리면 크기 조절 화살표로 변경되고, 화면에서 &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#hit-enter"&gt;hit-enter&lt;/a&gt; 프롬프트일때 no input을&amp;nbsp;가르키게됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousetime"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousetime'"&gt;mousetime&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mouset&amp;#8217;  number (기본&amp;nbsp;500)&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;, &lt;span class="caps"&gt;MS&lt;/span&gt;-&lt;span class="caps"&gt;DOS&lt;/span&gt;, Win32, Unix의 &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt; 에서만 사용 가능. 다중 클릭으로 인식할 수 있는 두 번째 클릭에 대한 msec의 최대 값을&amp;nbsp;정의함.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sat, 15 Aug 2015 16:00:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-07-25:2015/07/25/vim-mouse-mode/</guid><category>vim</category><category>vi</category><category>vimrc</category><category>mouse</category><category>기본 설정</category></item><item><title>OpenStack 새로운 버전 매기기 변경</title><link>http://ujuc.github.io/2015/06/28/openstack-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B2%84%EC%A0%84-%EB%A7%A4%EA%B8%B0%EA%B8%B0-%EB%B3%80%EA%B2%BD/</link><description>&lt;p&gt;Liberty 부터는 버전에 관련된 부분이 변경이 되었다. 이번에 Liberty-1 개발 마일스
톤 이메일 &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; 에서 보면 알 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;그리고 이것에 대한 자세한 내용은 &lt;a class="reference external" href="http://ttx.re/new-versioning.html"&gt;New OpenStack Component Versioning&lt;/a&gt; 에서 확인&amp;nbsp;하면된다.&lt;/p&gt;
&lt;p&gt;언제부터인가 OpenStack 버전은 &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YEAR&lt;/span&gt;.N&lt;/tt&gt; 으로 버전을 진행하고 있었고,  Kilo의 경우도
2015.1로 넘어가고 있었다. 스위프트의 경우에는 다르게 &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;X.Y.&lt;/span&gt;Z&lt;/tt&gt; 버전으로 계속 발
표를 해오기도했다. (이건 Swift를 주도적으로 개발하고 있는 &lt;a class="reference external" href="https://swiftstack.com"&gt;SwiftStack&lt;/a&gt; 이라는 회사
에서 관리하고 있는&amp;nbsp;부분이기도하다.)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YEAR&lt;/span&gt;.N&lt;/tt&gt; 형식으로 진행하면서 문제가 좀 있었나보다. 글을 읽어보면 백포트 하기도
쉽지 않고, 모든 프로젝트들이 정식 릴리즈 일시와 맞지 않으면 중간에 버전을 따로
해서 내놓고 전체 출시할때는 같은 방법으로 내고 해서 햇갈리는 부분도 있고&amp;nbsp;했던듯.&lt;/p&gt;
&lt;p&gt;라이브러리가 릴리즈되면서 어떤게 어떤건지도 모르겠다는&amp;#8230;&amp;nbsp;말도나온건가&amp;#8230;&lt;/p&gt;
&lt;p&gt;저번 벤쿠퍼 디자인 서밋에서 기본 이야기를 나누고 메일링까지 와서 이야기를 나눈후
이전에 발표된 버전을 통합하여 계산하는 것으로 했다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;Nova의 경우, 첫 Austin 부터 진행해왔으니 12.0.0. Bexar에서 추가된 Glance는
11.0.0. Diablo에서 추가된 Keystone, Horizon은 8.0.0.
(이해가 안되는건 왜 Cinder가&amp;#8230; 8.0.0&amp;nbsp;인건지&amp;#8230;;)&lt;/p&gt;
&lt;p&gt;이렇게 바뀌면 혼란스런 부분이 있겠지만 장기적으로 본다면, 수정하거나 백포트하여
구성할때는 괜찮기도 하겠다는&amp;#8230; 생각이 들기도한다. 그리고 년도 표기를 하지 않음
으로써 실제 서비스시 관련된 내용들을 모두 보여주지 않아도된다는 느낌도 없지 않아&amp;nbsp;있고&amp;#8230;&lt;/p&gt;
&lt;p&gt;그런데 이것보다 중요한건&amp;#8230; 버전업을 6개월마다 하는 것보다는 조금 더 안정적인 버
전이나 &lt;span class="caps"&gt;LTS&lt;/span&gt; 버전같은게 나와줘야되지 않을까하는데&amp;#8230; 뭐 이건 관련 내용을 찾으면 다
시 말을 해야겠다. 너부 빨리 바뀌는 부분들이 많아서 조직에 개발자가 없다면, 특히
나 우리나라 SI의 경우에는 대응하기가 쉽지&amp;nbsp;않아보인다.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html"&gt;http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sun, 28 Jun 2015 22:24:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-06-28:2015/06/28/openstack-새로운-버전-매기기-변경/</guid><category>OpenStack</category><category>versioning</category></item><item><title>CentOS 7 에서 zabbix-server 에러</title><link>http://ujuc.github.io/2015/06/14/centos-7-%EC%97%90%EC%84%9C-zabbix-server-%EC%97%90%EB%9F%AC/</link><description>&lt;p&gt;2주전에 받은 숙제인데, 회사일이 바빠서 못하고 있다가 조금 시간이 있어서 설정하고&amp;nbsp;있는데.&lt;/p&gt;
&lt;p&gt;CentOS 7에다가 Zabbix를 올리고있다. VM에서 4시간동안 서비스가 제대로 안돌아서, 내 설정이 잘못되었나 하여, 설치하는 메뉴얼도 바꿔서 확인을 했는데도 안되길레 혹시나 로그에는 있나하여 들어갔더니 &lt;tt class="docutils literal"&gt;journal&lt;/tt&gt; 로 보여지는 것 말고도
&lt;tt class="docutils literal"&gt;/var/log/zabbix&lt;/tt&gt; 가 보여서&amp;nbsp;확인했더니..&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
using configuration file: /etc/zabbix/zabbix_server.conf
current database version (mandatory/optional): 02040000/02040000
required mandatory version: 02040000
listener failed: zbx_tcp_listen() fatal error: unable to serve on any address [[-]:10051]
Got signal [signal:11(SIGSEGV),reason:1,refaddr:0x18]. Crashing ...
&lt;/pre&gt;
&lt;p&gt;음? 서버를 못찾는다고..?? 뭔 말이지. 그래서 그냥 통짜로 복사&amp;nbsp;붙여넣기.&lt;/p&gt;
&lt;p&gt;구글에서 말하는 것들이 많은데 그 중에서 일본사람이 작성한 글. &lt;a class="reference external" href="http://qiita.com/_BSmile_/items/61932e45de5330190027"&gt;CentOS7.1 で zabbix-serverの起動が失敗する話とその解決方法&lt;/a&gt; 에서는 &lt;span class="caps"&gt;CV&lt;/span&gt;#-2014-0092는&amp;#8230; gnutls에 패치가되었는데..
&lt;span class="caps"&gt;CVE&lt;/span&gt;-2014-8564는 적용이 안되서 그부분에 대한 내용을 추가하던지 수정을 해야된다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;자세한건 구글 번역기로 사이트를 돌려서 보도록하자. 그렇다보니 여기서 추천하는 방법은 &lt;tt class="docutils literal"&gt;trousers&lt;/tt&gt; 를 업데이트 하는 방법을 추천하고&amp;nbsp;있다.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo rpm -Uvh https://kojipkgs.fedoraproject.org/packages/trousers/0.3.11.2/3.fc20/x86_64/trousers-0.3.11.2-3.fc20.x86_64.rpm
Retrieving https://kojipkgs.fedoraproject.org/packages/trousers/0.3.11.2/3.fc20/x86_64/trousers-0.3.11.2-3.fc20.x86_64.rpm
Preparing...                          ################################# [100%]
Updating / installing...
1:trousers-0.3.11.2-3.fc20         ################################# [ 50%]
Cleaning up / removing...
2:trousers-0.3.11.2-3.el7          ################################# [100%

$ sudo systemctl start zabbix-server
&lt;/pre&gt;
&lt;p&gt;작동되는 것을 확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;이 글은 &lt;strong&gt;CentOS 7.1.1503&lt;/strong&gt; 버전, &lt;strong&gt;Zabbix 2.4.5&lt;/strong&gt; 버전에서 확인되었고 테스트되었다. 이후 버전에서는 관련 버그가&amp;nbsp;잡히길.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sun, 14 Jun 2015 22:30:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-06-14:2015/06/14/centos-7-에서-zabbix-server-에러/</guid><category>zabbix</category><category>centos</category></item><item><title>Rocket.Chat 번역기</title><link>http://ujuc.github.io/2015/06/02/rocket.chat-%EB%B2%88%EC%97%AD%EA%B8%B0/</link><description>&lt;p&gt;어제 //build/ Seoul 행사를 끝내고, 곧장 내려와 메일을 읽던 중, Github 데일리 메
일링에 추가된 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat"&gt;Rocket.Chat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;심심해서 코드 보던 중 발견한 &lt;tt class="docutils literal"&gt;i18n&lt;/tt&gt;. 클클클 번역이나 해야지 짧을 꺼야&amp;#8230; 그런 심보
로 시작. 10분 만에 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt;&amp;nbsp;등록.&lt;/p&gt;
&lt;p&gt;이유는 영어와 한국어의 어순이 반대다 보니&amp;#8230; &lt;tt class="docutils literal"&gt;%s by %s&lt;/tt&gt; 의 경우, 한국어로 &lt;tt class="docutils literal"&gt;%s에서
%s로&lt;/tt&gt; 로 번역이 되어야 되는데. 어떤 놈이 앞의 &lt;tt class="docutils literal"&gt;%s&lt;/tt&gt; 인지 한국어에서는 알 수 없는 문제
가 발생. 그래서 짧은 영어로 적었더니. 친절하게 제목도 바꿔주고, 테스트할 수 있게
PR해줄 수 있느냐기에 신속하게 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;&lt;span class="caps"&gt;PR&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;그렇게 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt; 는 해결되었고, 번역은&amp;nbsp;반영되었다.&lt;/p&gt;
&lt;p&gt;소스 중에 번역 페이지가 있으면 항상 보지는 않았는데&amp;#8230; 이번에는 우연히 번역
을 보았고, PR을 뒤져보니 PR을 보내면 웬만해서는 받아주는 듯하여 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt; 부터 날리
고 어떻게 할지 기다린 게 잘 된듯하다.
뭐 이렇게 녹색 상자 한 칸 더 체우 는기지&amp;#8230;&amp;nbsp;ㅋㅋㅋㅋㅋ&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 02 Jun 2015 22:45:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-06-02:2015/06/02/rocket.chat-번역기/</guid><category>자랑질</category><category>chat</category><category>RocketChat</category><category>번역</category><category>javascrtip</category><category>meteo</category></item><item><title>Edison pip install error</title><link>http://ujuc.github.io/2015/05/14/edison-pip-install-error/</link><description>&lt;p&gt;pip를 설치하고 패키지를 확인하려고하면 다음과 같은 에러가&amp;nbsp;발생한다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# pip install flask
&lt;/span&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call las&lt;span class="o"&gt;)&lt;/span&gt;:
File &lt;span class="s2"&gt;&amp;quot;/usr/bin/pip&amp;quot;&lt;/span&gt;, line 5, in &amp;lt;module&amp;gt;
from pkg_resources import load_entry_point
ImportError:No module named pkg_resources
&lt;/pre&gt;
&lt;p&gt;발생하는건 &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; 패키지가 설치되지 않아서&amp;nbsp;문제가&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# wget --no-check-certificate \
&lt;/span&gt;  https://pypi.python.org/packages/source/s/setuptools/setuptools-15.2.tar.gz#md5&lt;span class="o"&gt;=&lt;/span&gt;a9028a9794fc7ae02320d32e2d7e12ee
&lt;span class="c"&gt;# tar zxf setuptools-15.2.tar.gz
# python setuptools-15.2/ez_setup.py&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--upgrade&lt;/span&gt; pip&lt;/tt&gt; 로 제대로 설치된건지&amp;nbsp;확인하자.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;기본 설치되는 pip 버전이 낮으니.. 업글해줘야되기도&amp;nbsp;해서..&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 14 May 2015 01:39:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-05-14:2015/05/14/edison-pip-install-error/</guid><category>Edison</category><category>Pypi</category><category>pip</category><category>Python</category><category>error</category></item><item><title>Edison 초기 설정</title><link>http://ujuc.github.io/2015/05/13/edison-%EC%B4%88%EA%B8%B0-%EC%84%A4%EC%A0%95/</link><description>&lt;div class="section" id="yocta-project-update"&gt;
&lt;h2&gt;Yocta Project&amp;nbsp;Update&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;무엇이든 처음 설정할때는 기본 OS먼저 업데이트를 해줘야된다. 최신 Yocta Project
파일을 받아서&amp;nbsp;설치해준다.&lt;/li&gt;
&lt;li&gt;최신이 아니라면 몇몇 기능이 제대로 되지 않아 다시 설치해줘야될 수 도 있으니 꼭&amp;nbsp;하도록하자.&lt;/li&gt;
&lt;li&gt;컴파일을 진행해도 된다만, 시간이 많거나, 꼭 필요한 패키지가 없거나, 기본적으로
설정을 변경해주어야 할때빼고는&amp;nbsp;하지말자.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intel.com/support/edison/sb/CS-035180.htm"&gt;Yocta 컴파일 이미지&amp;nbsp;다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/intel-edison-flashing-firmware-on-os-x-wired"&gt;플래싱&amp;nbsp;순서&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;위의 사진대로 USB를 연결해주고 (2번에&amp;nbsp;연결)&lt;/li&gt;
&lt;li&gt;Edison 외장디스크가 깨끗한지 확인한다.
* 만약 이전의 이미지 내용이 있다면, &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;Edison/\.*&lt;/span&gt;&lt;/tt&gt; 를 이용하여 모든 내용을 삭제한 다음 받은 이미지를 올리면 된다.
* Edison 파티션의 정보를 확인하여 포멧이 FAT16이라면 디스크 유틸에서 포맷하여 FAT32로&amp;nbsp;변경해주도록.&lt;/li&gt;
&lt;li&gt;다운 받은걸&amp;nbsp;복사하자.&lt;/li&gt;
&lt;li&gt;시리얼 통신으로 Edison에 접근한다.
* &lt;tt class="docutils literal"&gt;screen &lt;span class="pre"&gt;/dev/cu.usbserial-A****&lt;/span&gt; 115200 &lt;span class="pre"&gt;-L&lt;/span&gt;&lt;/tt&gt;
* &lt;tt class="docutils literal"&gt;subserial&lt;/tt&gt; 로 접근을 하면되는데 A뒤의 이름은 변경될 수 있어 작성하지&amp;nbsp;않았다.&lt;/li&gt;
&lt;li&gt;아무런 내용이 안나온다면 들어간 것이니, 엔터&amp;nbsp;두번.&lt;/li&gt;
&lt;li&gt;로그인후 &lt;cite&gt;reboot ota&lt;/cite&gt; 명령어로 재시작.
* &lt;cite&gt;ota&lt;/cite&gt; 로 할 경우, 부팅때 Edison 외장하드에 넣어둔 부팅 이미지들로 새롭게 씌우고 관련 내용들을 업데이트하여 사용할 수 있도록&amp;nbsp;되어있다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 제목에 연결된 링크로 가서 확인하고 작업을&amp;nbsp;진행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Edison&amp;nbsp;구성&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 구성을 하는데 필요한 명령어는 &lt;tt class="docutils literal"&gt;configure_edison&lt;/tt&gt; 으로 작업을 구성하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;li&gt;전체 설정을 다 변경하고 싶으면 &lt;tt class="docutils literal"&gt;configure_edison &lt;span class="pre"&gt;--setup&lt;/span&gt;&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="hostname"&gt;
&lt;h3&gt;Hostname&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# configure_edison --name&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;다음에 나오는 것들에따라서 입력해주면&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wifi"&gt;
&lt;h3&gt;Wifi&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# configure_edison --wifi&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;근처에 있는 Wifi들이 다 잡힐 것이나 만약 아무것도 안보인다면 firmware를 업그레
이드 한 뒤에 다시 명령어를 입력하여&amp;nbsp;확인하도록하자.&lt;/li&gt;
&lt;li&gt;버전업이 안되어있는 경우, 잡지&amp;nbsp;못하더라.&lt;/li&gt;
&lt;li&gt;설정이 완료되고 나면 URL을 보여주니 그것을 이용하여 접근하면&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Screen으로 시리얼 접근하는 것은 사용하기가&amp;nbsp;불편하다.&lt;/li&gt;
&lt;li&gt;비밀번호를 설정해주게되면 SSH로 접근이 가능하게 되니 그부분을 추가하여 작업을
진행하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# configure_edison --password&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="package"&gt;
&lt;h2&gt;Package&amp;nbsp;관리자&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Edison은 opkg(OpenPackaGe Managemet)라는 비교적 가벼운 패키지 관리자를 사용한
다고 한다. 몇몇 설정이 그렇게 되어있었다. (Yocta Projectdp서 사용하는데,
OpenWRT에서 사용하고&amp;nbsp;있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;패키지 관리자 설치 및&amp;nbsp;설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/managing-devkit-libraries-intel-edison-or-intel-galileo-board"&gt;Intel&amp;nbsp;page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# echo &amp;quot;src intel-iotdk http://iotdk.intel.com/repos/1.1/intelgalactic&amp;quot; &amp;gt; \
&lt;/span&gt;    /etc/opkg/intel-iotdk.conf# opkg update&lt;span class="p"&gt;;&lt;/span&gt; opkg upgrade
&lt;span class="c"&gt;# opkg update; opkg upgrade&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이렇게하면 기본적인 것들은 추가가 된다만 패키지가 많지는&amp;nbsp;않다.&lt;/li&gt;
&lt;li&gt;더 많은 패키지를 사용하려면 레포지토리를 추가해줘야&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# vi /etc/opkg/base-feeds.conf
&lt;/span&gt;
src/gz all http://repo.opkg.net/edison/repo/all
src/gz edison http://repo.opkg.net/edison/repo/edison
src/gz core2-32 http://repo.opkg.net/edison/repo/core2-32

&lt;span class="c"&gt;# opkg update&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 13 May 2015 22:46:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-05-13:2015/05/13/edison-초기-설정/</guid><category>Edison</category><category>개발</category><category>Embedded</category><category>임베디드</category><category>Intel</category><category>IoT</category></item><item><title>Status bar &amp; Title bar 숨기기</title><link>http://ujuc.github.io/2015/04/23/status-bar-&amp;-title-bar-%EC%88%A8%EA%B8%B0%EA%B8%B0/</link><description>&lt;p&gt;요즘 안드로이중이다. 오랜만에 했더니 봐야될께 많다. 특히 UI를 많이 안해서
그런가.. 감이 잘 안온다는&amp;nbsp;문제도&amp;#8230;&lt;/p&gt;
&lt;p&gt;SplashActivity를 추가해줘야되는데. 안드로이드에서 뭘 알아야지.. 그냥 예제에 있는
것들을 찾아서 변경해 추가를 했지만, 정리를 한번 해놔야되서&amp;#8230; 뭐 간단하게 구성은
되어있다만. 이렇게라도 적어놔야 나중에 또 다른곳에서 엉뚱한것을&amp;nbsp;안찾지&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="title-bar"&gt;
&lt;h2&gt;Title bar&amp;nbsp;숨기기&lt;/h2&gt;
&lt;p&gt;이것을 해줄려면 &lt;tt class="docutils literal"&gt;style&lt;/tt&gt; 을 구성해서 해줘야된다. 뭔가 많이 불편해서 다른
곳에서도 가능한가를 찾아봤지만, 안된다. 뭐 특정 구역에서만 가능하게 해놨나보다.
그져 따라서&amp;nbsp;해놔야지&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에&amp;nbsp;추가한다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Theme.Splash&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:Theme&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windwoNoTitle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/stlye&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;위와 같이 구성을 하고서 Activity에 작성을&amp;nbsp;해주면된다.&lt;/p&gt;
&lt;pre class="code c# literal-block"&gt;
&lt;span class="na"&gt;[Activity (Theme = &amp;quot;&amp;#64;style/Theme.Splash&amp;quot;, MainLauncher = true, NoHistory =
ture)]&lt;/span&gt;
&lt;span class="n"&gt;brabra&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;이렇게 하고 필요한 내용들을 추가해주면 된다. 그러면 타이틂 바만 없어지는 것을
확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status-bar"&gt;
&lt;h2&gt;Status bar&amp;nbsp;숨기기&lt;/h2&gt;
&lt;p&gt;동일한 &lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에 &lt;tt class="docutils literal"&gt;&amp;lt;item&amp;gt;&lt;/tt&gt; 을&amp;nbsp;변경해주면된다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowFullscreen&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;ture&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;참고&amp;nbsp;사이트&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.androidpub.com/4710"&gt;전체화면&amp;nbsp;사용하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 23 Apr 2015 01:25:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-04-23:2015/04/23/status-bar-&amp;-title-bar-숨기기/</guid><category>android</category><category>기본</category><category>난 모르겠다.</category></item><item><title>sys.json</title><link>http://ujuc.github.io/2015/03/10/sys-json/</link><description>&lt;p&gt;&lt;a class="reference external" href="https://github.com/EricR/sys.json"&gt;EricR/sys.json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;좀 독특하다고&amp;nbsp;해야되나?&lt;/p&gt;
&lt;p&gt;Golang을 이용해서 웹을 간단히 띄우고, &lt;tt class="docutils literal"&gt;proc&lt;/tt&gt; 를 이용해서 내용들을 불러와 &lt;span class="caps"&gt;JSON&lt;/span&gt;
형태로 뽑아주도록&amp;nbsp;되어있다.&lt;/p&gt;
&lt;p&gt;몇몇 부분을 수정하거나 작업을 해야되긴 하겠지만 이 정도로 작은 아이를 띄워
무리없이 가져올 수 있다면 그것도 좋은 방법이&amp;nbsp;아닐까&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;내가 생각하는 비슷한&amp;nbsp;패키지&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;nicolargo/glances&lt;/a&gt; - Python으로 구성되어있으며, 서버 형식으로 API들을 뽑아 올
수 있다. 물론 간단한 웹으로도&amp;nbsp;가능하다.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 10 Mar 2015 13:52:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-10:2015/03/10/sys-json/</guid><category>go</category><category>json</category><category>api</category></item><item><title>OpenStack rootwrap</title><link>http://ujuc.github.io/2015/03/04/openstack-rootwrap/</link><description>&lt;p&gt;OpenStack 프로젝트들에서 사용되는 것들 중&amp;#8230; &lt;strong&gt;root&lt;/strong&gt; 와 관련된 작업을
진행해야하는 경우가 있다. 그럴때 사용하려고 만들어둔 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap"&gt;rootwrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wiki에서는 이 &lt;a class="reference external" href="https://fnords.wordpress.com/2011/11/23/improving-nova-privilege-escalation-model-part-1/"&gt;블로그&lt;/a&gt; 에 작성된 문제를 해결하기 위해서 만들어졌다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;짧은 내기억으로는 간단한 팡리로만 존재했던 것같은데. (아닐 가능성 100%라논
소리&amp;#8230;), 지금은 oslo 패키지로 관리되고 있다. &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap"&gt;github&amp;nbsp;repo&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;사용자용&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;nova.conf&lt;/tt&gt; 에 다음 문구&amp;nbsp;추가하도록&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rootwrap_config=/etc/nova/rootwrap.conf
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;배포용 패키지를 만드는&amp;nbsp;사람용&lt;/h2&gt;
&lt;div class="section" id="suduers"&gt;
&lt;h3&gt;Suduers&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sudoers&lt;/tt&gt; 에 다음 문구를&amp;nbsp;추가하도록&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nova ALL = (root) NOPASSWD: /usr/bin/nova-rootwrap /etc/nova/rootwrap.conf *
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;필터 위치&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;rootwrap&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Nova-provided&lt;/span&gt;&lt;/tt&gt; 필터 파일을 로드하고, &lt;tt class="docutils literal"&gt;rootwrap.d&lt;/tt&gt; 로 확장
사용자의 필터 파일을 로드하도록 설정해&amp;nbsp;줄것.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[DEFAULT]
filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;필터&amp;nbsp;정의&lt;/h3&gt;
&lt;p&gt;각 노드마다 설치를&amp;#8230;&amp;nbsp;해줘야된다고.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;플러그인&amp;nbsp;작성자용&lt;/h2&gt;
&lt;div class="section" id="run-as-root"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을&amp;nbsp;추가&lt;/h3&gt;
&lt;p&gt;root로 동작시킬 것이 있을&amp;nbsp;경우.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;관련 필터 내용은 &lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/foobar.filters&lt;/tt&gt; 에 추가해둘&amp;nbsp;것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;프로젝트&amp;nbsp;개발자용&lt;/h2&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을&amp;nbsp;추가&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;Nova 코드에서 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nova/rootwrap.d/{filter_name}.ilters&lt;/span&gt;&lt;/tt&gt; 파일에 관련된 내용을
추가해줄 것.&lt;ul&gt;
&lt;li&gt;예로 Compute 노드에서 작동하는 소스라면
&lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/compute.filters&lt;/tt&gt; 에다가&amp;nbsp;추가하도록.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;상위 필터 타입&amp;nbsp;추가&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 필터 타입은 &lt;tt class="docutils literal"&gt;CommandFilter&lt;/tt&gt; 임.&lt;/li&gt;
&lt;li&gt;새로운 타입을 만들거나 지금 존재하는 타입을 확인하고 싶다면 &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap/blob/master/oslo_rootwrap/filters.py"&gt;filters.py&lt;/a&gt; 를
보면 된다. - &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap#Available_Filter_classes"&gt;Available Filter Classes&lt;/a&gt; 가 아닌걸로도 볼 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 02 Apr 2015 21:18:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-04:2015/03/04/openstack-rootwrap/</guid><category>openstack</category><category>oslo</category><category>오픈스택</category></item><item><title>vim을 IDE처럼 만드는 법을 알아보자.</title><link>http://ujuc.github.io/2015/03/03/vim-to-ide/</link><description>&lt;p&gt;메일로 Github에서 흥하는 레포들을 소개해주는 서비스가 존재한다. 거기서 오랜만에
vim에 관련된 내용이&amp;nbsp;올라왔다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jez/vim-as-an-ide"&gt;jez/vim-as-an-ide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;뭐 특별한 것은 없어 보이지만, Vim을 설정하는 것들에대해 커밋을 통해서 작성해
뒀다. 그래서 더 좋다. 이렇게하면 나중에 누군가에게 vim을 설정하는 방법에 대해서
알려주는 방법에서도 좋을&amp;nbsp;듯함.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;아쉬운것&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt; 을 사용해서 플러그인을&amp;nbsp;설치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그냥 아쉽다. 다른 것들도 많다. &lt;a class="reference external" href="https://github.com/Shougo/neobundle.vim"&gt;NeoVundle&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;. 이정도가 내가 아는 플러그인
설치를 도와주는&amp;nbsp;것들이다.&lt;/p&gt;
&lt;p&gt;뭐 Vundle을 사용하는 방법을 안다면 쉽게 작업을 진행할 수 있으니 필요한 것들을
확인해서 설치하는게&amp;nbsp;필요할듯.&lt;/p&gt;
&lt;p&gt;다른 것들은 나도 보면서 배워야할 것들이다. 플러그인들이 많이 설치되는 것들을
설치해서 사용은 하고 있지만&amp;#8230; 그렇게 많은 기능들을 다 사용하지 않는 이상&amp;#8230;
조금씩 덜어내는 것도 필요할&amp;nbsp;듯.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 23:52:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-03:2015/03/03/vim-to-ide/</guid><category>vim</category><category>vimrc</category><category>ide</category></item><item><title>timesheet.js??</title><link>http://ujuc.github.io/2015/03/02/timesheet-js/</link><description>&lt;p&gt;놀다 보니 이것저것 보는 것들도 많다. 그런것들이라도 간단히&amp;nbsp;적어둬야지&amp;#8230;&lt;/p&gt;
&lt;p&gt;노트에다가 작성을 해놓고 넣어두는 것도 한 방법이지만, 봤을때 좋은거라 생각한다면
그것으로 작업이 가능하지 않을까&amp;nbsp;하여&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;timesheet.js&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;홈페이지: &lt;a class="reference external" href="https://github.com/sbstjn/timesheet.js"&gt;sbstjn/timesheet.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;손을 좀 대서 자세하게 보이거나 이것저것 손을 볼 수 있을&amp;nbsp;것같은데&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;예제&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 쓸수 없다는게 rst의&amp;nbsp;단점&amp;#8230;&lt;/p&gt;
&lt;p&gt;그래서 &lt;a class="reference external" href="http://jsfiddle.net/fujstt3s/1/"&gt;예제&lt;/a&gt; 는 링크로&amp;#8230;. &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;특이점&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;소스파일로 되어있는기.. &lt;a class="reference external" href="http://haml.info/"&gt;haml&lt;/a&gt; 로 되어있고, &lt;a class="reference external" href="http://sass-lang.com/"&gt;sass&lt;/a&gt; 는 첨가.&lt;ul&gt;
&lt;li&gt;sass는 CSS를 더 변수, 함수, 확장 / 상속 등의 기능을 추가해서 쉽게 만들고,
쉽게 유지보수 할 수 있도록 되어있다고 한다. 여러 종류가 있다고&amp;#8230; &lt;a class="footnote-reference" href="#id6" id="id5"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;haml은 &lt;span class="caps"&gt;HTML&lt;/span&gt; abstraction markup language라고 하는걸 줄였다고, 작성을 해놨네.
&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 작성하기 더 쉽게 되어있긴한데&amp;#8230; 태그를 변수로 주는게&amp;nbsp;특이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;조금이나 더 짧게 쓰고 조금이나마 더 버전 관리가 쉽게 하도록 하는걸 보면, 점점
더 바닥을 아는 사람들이 없어져가고, 그것들을 알 수 있는 방법들도
없어져가는건 안좋은 점 중&amp;nbsp;하나다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://windtale.net/blog/why-i-choose-sass/"&gt;http://windtale.net/blog/why-i-choose-sass/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 22:21:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-02:2015/03/02/timesheet-js/</guid><category>javascript</category><category>JS</category></item><item><title>Clojure 개발 환경 구축</title><link>http://ujuc.github.io/2015/03/01/clojure-development-env/</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2&gt;1.&amp;nbsp;개요&lt;/h2&gt;
&lt;p&gt;Clojure를 공부하려하는데&amp;#8230; 이것 저것 작업을 하려하니 짧은 기억력으로는 계속
봐야되는지라. 이렇게 작성을 해놔야 나중에 볼 듯하고, 또 어딘가에 넣어둔다고해도
찾을때는 잘 못찾는&amp;nbsp;지라&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;1.&amp;nbsp;전재&lt;/h3&gt;
&lt;p&gt;OSX를 기반으로 한다. &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 를 패키지로 모두 작성된다. 만약 Linux에서
작업하게되면 관련해서 문서는 추가로 작성할 예정임. 문제는 언제될지&amp;nbsp;모르겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;2. 설치할&amp;nbsp;것들&lt;/h2&gt;
&lt;div class="section" id="jdk"&gt;
&lt;h3&gt;1. &lt;span class="caps"&gt;JDK&lt;/span&gt;&amp;nbsp;설치&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;검색해서 JDK를 다운받으면&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;Apple에서 기본적으로 주는걸 써도 될&amp;nbsp;듯.&lt;/li&gt;
&lt;li&gt;8으로 설치했는데 작업하는데는 아무런&amp;nbsp;이상없다.&lt;/li&gt;
&lt;li&gt;그래서 그냥&amp;nbsp;쓴다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;brew-cask&lt;/span&gt;&lt;/tt&gt; 에 JDK가&amp;nbsp;있다는&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="leiningen"&gt;
&lt;h2&gt;2. Leiningen&amp;nbsp;설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;brew install leiningen&lt;/tt&gt; 으로&amp;nbsp;설치.&lt;/li&gt;
&lt;li&gt;딱히 설정할 것&amp;nbsp;없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lein"&gt;
&lt;h2&gt;3. lein&amp;nbsp;사용&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이거 쓸려고 넘많이&amp;nbsp;적었다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;lein
    Leiningen is a tool &lt;span class="k"&gt;for&lt;/span&gt; working with Clojure projects.

    Several tasks are available:
    change              Rewrite project.clj by applying a &lt;span class="k"&gt;function&lt;/span&gt;.
    check               Check syntax and warn on reflection.
    classpath           Print the classpath of the current project.
    clean               Remove all files from project&lt;span class="s1"&gt;'s target-path.
    compile             Compile Clojure source into .class files.
    deploy              Build and deploy jar to remote repository.
    deps                Download all dependencies.
    do                  Higher-order task to perform other tasks in succession.
    help                Display a list of tasks or help for a given task.
    install             Install the current project to the local repository.
    jar                 Package up all the project'&lt;/span&gt;s files into a jar file.
    javac               Compile Java &lt;span class="nb"&gt;source &lt;/span&gt;files.
    new                 Generate project scaffolding based on a template.
    plugin              DEPRECATED. Please use the :user profile instead.
    pom                 Write a pom.xml file to disk &lt;span class="k"&gt;for&lt;/span&gt; Maven interoperability.
    release             Perform :release-tasks.
    repl                Start a repl session either with the current project or standalone.
    retest              Run only the &lt;span class="nb"&gt;test &lt;/span&gt;namespaces which failed last &lt;span class="nb"&gt;time &lt;/span&gt;around.
    run                 Run a -main &lt;span class="k"&gt;function&lt;/span&gt; with optional &lt;span class="nb"&gt;command&lt;/span&gt;-line arguments.
    search              Search remote maven repositories &lt;span class="k"&gt;for&lt;/span&gt; matching jars.
    show-profiles       List all available profiles or display one &lt;span class="k"&gt;if&lt;/span&gt; given an argument.
    &lt;span class="nb"&gt;test                &lt;/span&gt;Run the project&lt;span class="s1"&gt;'s tests.
    trampoline          Run a task without nesting the project'&lt;/span&gt;s JVM inside Leiningen&lt;span class="s1"&gt;'s.
    uberjar             Package up the project files and dependencies into a jar file.
    update-in           Perform arbitrary transformations on your project map.
    upgrade             Upgrade Leiningen to specified version or latest stable.
    vcs                 Interact with the version control system.
    version             Print version for Leiningen and the current JVM.
    with-profile        Apply the given task with the profile(s) specified.

    Run `lein help $TASK` for details.

    Global Options:
      -o             Run a task offline.
      -U             Run a task after forcing update of snapshots.
      -h, --help     Print this help or help for a specific task.
      -v, --version  Print Leiningen'&lt;/span&gt;s version.

    See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
    mixed-source, templates, and copying.
&lt;/pre&gt;
&lt;div class="section" id="project"&gt;
&lt;h3&gt;1. project&amp;nbsp;생성&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein new myproject
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;project.clj&lt;/tt&gt; 에 프로젝트에 관련된 내용들을 작성한다.&lt;ul&gt;
&lt;li&gt;필요한 것들이 있다면 여기다가 차곡차곡&amp;nbsp;넣어준다.&lt;/li&gt;
&lt;li&gt;그리고 이곳에 &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; 으로 사용할 코드의 위치를 작성해 줘야된다.&lt;ul&gt;
&lt;li&gt;키워드는 &lt;tt class="docutils literal"&gt;:main&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;2. 의존하는 라이브러리&amp;nbsp;다운로드&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein deps
&lt;/pre&gt;
&lt;p&gt;위에서 작성해준 패키지들을 받아와서 실행해준다. 그러니 왠만해서는 설치하고&amp;nbsp;하자.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;3. 코드&amp;nbsp;작성&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;src/myproject/core.clj&lt;/tt&gt; 가 있다. 이곳에다가 코드를 작성해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;4.&amp;nbsp;실행&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein run
&lt;/pre&gt;
&lt;p&gt;쉽게 실행해서 나오는 것을 볼 수 있다. 뭐&amp;nbsp;간단하네&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;5.&amp;nbsp;패키징&lt;/h3&gt;
&lt;p&gt;역시 Java라고 해야될까&amp;#8230; jar 로 만들어두면 멀티 플랫폼에서도 작동이 가능하다는
것이지. 그리고 그것을 묶어서 보여준다. 나중에가서 설정을 좀 해줘야되는 부분이
발생하겠지만, 지금은 그렇게까지는 나올 필요가&amp;nbsp;없으니&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein uberjar
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;6. 라이브러리&amp;nbsp;검색&lt;/h3&gt;
&lt;p&gt;필요한 라이브러리들을 검색 하는건데&amp;#8230; 검색하는게 더 빠를듯&amp;#8230; 너무 많이
나온다. 그리고 가끔 인덱스를 업데이트를 해주긴 해야되는데&amp;#8230; 오래걸려&amp;#8230;
너무&amp;nbsp;오래&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein search ring
&lt;/pre&gt;
&lt;p&gt;불편하게&amp;#8230; 페이지별로 나오니. 이름은 정확히 입력하자. 그리고 동일한 페키지
이름으로 버전들이 쭉~~ 나오니 그것도하나 염두해둘 것&amp;#8230; 버전 정보는 명령어를
하나더 쳐서 확인하게 해야지&amp;#8230; 저렇게 다 보여줄 필요가&amp;nbsp;있나&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;7. 패치&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;자동으로 잡아준다. 그래도 추가해야된다면 &lt;tt class="docutils literal"&gt;proejct.clj&lt;/tt&gt; 에 키워드
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:extra-classpath-dirs&lt;/span&gt;&lt;/tt&gt; 를 사용하여 리스트 형식으로 추가해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;8. 인터프리터&amp;nbsp;실행&lt;/h3&gt;
&lt;p&gt;인터프리터를 실행해서 작성한 내요이 맞는지 확인이&amp;nbsp;가능하다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein repl
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;참고&amp;nbsp;사이트!&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://english4u.kr/clojure-memo/index.html"&gt;Clojure 강좌 -&amp;nbsp;김영태&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;emacs로 되어있는 부부만&amp;nbsp;제외했&amp;#8230;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:30:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-03-01:2015/03/01/clojure-development-env/</guid><category>clojure</category><category>개발 환경</category><category>lein</category></item><item><title>oh-my-vim 설치후 오류 (OSX)</title><link>http://ujuc.github.io/2015/02/26/oh-my-vim-error-osx/</link><description>&lt;p&gt;&lt;a class="reference external" href="https://github.com/liangxianzhe/oh-my-vim"&gt;oh-my-vim&lt;/a&gt; 으로 vim 플러그인 설정에 관련된 기본 프로그램을 바꿨다 (이것저것
변경하고 있긴하다만&amp;#8230;). 달라진게 없다. 좀 더 화려해지고 플러그인들로 인해서
IDE급으로 에디터가 변경됐을 뿐이다. 단지 80라인 와랩이&amp;nbsp;필요했을뿐인데&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그렇게 쓰다보니 실행할때마다 에러가&amp;nbsp;뜬다.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
neocomplete does work this version of Vim.
It requires &amp;quot;if_lua&amp;quot; enabled Vim(7.3.885 or above).
&lt;/pre&gt;
&lt;p&gt;혹시나 해서 검색을 해봤다. 매번 실행할 때마다 엔터 3번은 너무&amp;nbsp;오래걸려서&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Shougo/neocomplete.vim/issues/237"&gt;neocomplete.vim - Vim version and lua&lt;/a&gt; 에서는 실행후 &lt;tt class="docutils literal"&gt;:version&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 가
&lt;tt class="docutils literal"&gt;-&lt;/tt&gt; 인지 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; 인지 확인을 하라고 말을&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-lua&lt;/span&gt;&lt;/tt&gt; 면 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 사용 옵션이 빠져있는 것이 되기에 vim 설치시 그에 대한
옵션을 설정해줘야된다는&amp;nbsp;말을&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OSX&lt;/span&gt; 사용자들에게만 나온는 것같은데&amp;#8230; Linux에 대한 오류가 없는&amp;nbsp;걸보면&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그것을 수정하는 방법은 &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 로 설치할때 옵션을 걸어주고 설치하면 된다.
물론 설치했다면, 다시 설치하면된다. 난 삭제하고 다시 설치&amp;#8230; (적다보니&amp;#8230; 자동화
스크립트에 작성해둔거 변경을&amp;nbsp;해줘야겠다&amp;#8230;)&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install vim --with-cscope --with-lua --override-system-vim
&lt;/pre&gt;
&lt;p&gt;설치해주면된다. 그러면 자연스럽게 넘어가고 에러는 밑으로 나올꺼니 엔터칠 일이&amp;nbsp;줄었다.!!!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:14:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-26:2015/02/26/oh-my-vim-error-osx/</guid><category>vim</category><category>setting</category></item><item><title>Pycharm에서 iPython notebook 사용</title><link>http://ujuc.github.io/2015/02/23/using-ipython-notebook-on-pycharm/</link><description>&lt;p&gt;Pycharm iPython notebook 지원은 4.0에서부터 지원하기 시작했다. 아직 버전업이
안됐으니&amp;nbsp;작년인듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;iPython을 설치하고 Pycharm에서 설치하려고 봤더니 제대로 돌아가질 않는다.
그렇다고 오류가 보이지도 않아서 직접 터미널에서&amp;nbsp;쳤더니&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;패키지가 없어서 안된다!!!&lt;/strong&gt; 라는 비명을 볼 수&amp;nbsp;있었다.&lt;/p&gt;
&lt;p&gt;설치해줘야되는 패키지는 &lt;tt class="docutils literal"&gt;pyzmq&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tornado&lt;/tt&gt;, (&lt;tt class="docutils literal"&gt;certifi&lt;/tt&gt; 는 &lt;tt class="docutils literal"&gt;torando&lt;/tt&gt; 설치시 같이
설치가되니 넘어간다.). 편한 방법으로 설치해주고 작동시키면 돌아가는 것을 확인할
수&amp;nbsp;있다만&amp;#8230;&lt;/p&gt;
&lt;p&gt;Pycharm의 iPython notebook 입력기 UI가 너무 안좋다. 그냥 서버를 띄우고 Web에서
작동하는 것이 입력하기도 쉽고 값들을 확인하면서 작성하기가 더 쉽게 되어있으니
사용자가 알아서&amp;#8230; 나는&amp;nbsp;안쓸꺼임&amp;#8230;&lt;/p&gt;
&lt;p&gt;아마 업데이트 하면&amp;#8230; 괜찮아질꺼야&amp;#8230;&amp;nbsp;그럴꺼야&amp;#8230;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 01 Apr 2015 21:07:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-23:2015/02/23/using-ipython-notebook-on-pycharm/</guid><category>Pycharm</category><category>iPython</category><category>notebook</category></item><item><title>OpenStack Commit</title><link>http://ujuc.github.io/2015/02/13/openstack-commit/</link><description>&lt;p&gt;기본적인 흐름은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 보고서 따라하면 쉽게 작업을 할 수 있다.
그런데&amp;#8230;. 왜이리&amp;nbsp;어려운거지&amp;#8230;.&lt;/p&gt;
&lt;p&gt;신경 써야될 곳은 파란색으로 되어있는 곳만 신경 쓰면되는 그런&amp;#8230; 어렵지 않을
것같아&amp;nbsp;시작&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;준비 해야될&amp;nbsp;것&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://launchpad.net/+login"&gt;Launchpad&lt;/a&gt; 계정&lt;ul&gt;
&lt;li&gt;버그리포팅을 위해서는 Launchpad 계정이&amp;nbsp;있어야한다.&lt;/li&gt;
&lt;li&gt;그리고 왠만한 OpenID를 이걸로 다 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org"&gt;OpenStack Review&lt;/a&gt; 가입&lt;ul&gt;
&lt;li&gt;리뷰를 무조건&amp;nbsp;타야된다&amp;#8230;&lt;/li&gt;
&lt;li&gt;그러니&amp;nbsp;만들어야&amp;#8230;.&lt;/li&gt;
&lt;li&gt;그리고 ssh key등록을&amp;nbsp;해두는게&amp;#8230;&lt;/li&gt;
&lt;li&gt;그리고 메일링은 꺼두는게&amp;#8230; 너무&amp;nbsp;많이와&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="individual-contributor-license-agreement"&gt;
&lt;h2&gt;Individual Contributor License Agreement&amp;nbsp;결재&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/#/settings/agreements"&gt;Individual Contributor License Agreement&lt;/a&gt; 간단하게&amp;nbsp;작성하고..&lt;/li&gt;
&lt;li&gt;회사 대신 기여하거나 단체로 한다면 &lt;a class="reference external" href="https://secure.echosign.com/public/hostedForm?formid=56JUVGT95E78X5"&gt;Corporate Contributor License Agreement&lt;/a&gt;
도 한장&amp;#8230; 작성하고 보니 난 이걸&amp;nbsp;왜했지&amp;#8230;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="git-review"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;git-review&lt;/span&gt;&lt;/tt&gt; 설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;맥은 그냥 &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 로 통일시켜서 설치하는게&amp;nbsp;편한듯&amp;#8230;&lt;/li&gt;
&lt;li&gt;문서상으로는 &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; 로 설치하라고&amp;nbsp;했지만&amp;#8230;&lt;/li&gt;
&lt;li&gt;설치하고 제대로 됐는지 확인을 하기위해서는&lt;ul&gt;
&lt;li&gt;하나를&amp;nbsp;클론하고&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git review &lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/tt&gt; 를 해서 &lt;tt class="docutils literal"&gt;review.openstack.org&lt;/tt&gt; 에 제대로 접속했는지를 체크를&amp;nbsp;해준다.&lt;/li&gt;
&lt;li&gt;이때 &lt;tt class="docutils literal"&gt;gitreview.username&lt;/tt&gt; 을 &lt;tt class="docutils literal"&gt;.gitconfig&lt;/tt&gt; 파일에 작성해두지 않았다면
설정하라고&amp;nbsp;뜸.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;작업&amp;nbsp;플로워&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;버그일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;우선 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugs.launchpad.net/&amp;lt;projectname&amp;gt;&lt;/span&gt;&lt;/tt&gt; 으로 접속하여 버그 리포팅.&lt;ul&gt;
&lt;li&gt;이때 4가지로 테스크가 나뉘는데,&lt;ol class="arabic"&gt;
&lt;li&gt;새로운 버그 확인: &amp;#8220;New&amp;#8221;로 표기된 버그를 &amp;#8220;Confirmed&amp;#8221;로 변경 가능한 상태.
거의 초기를 말한다고&amp;nbsp;보면됨.&lt;/li&gt;
&lt;li&gt;버그 수정 : 버그를 할당하고, &amp;#8220;In Progress&amp;#8221;로&amp;nbsp;등록.&lt;/li&gt;
&lt;li&gt;리뷰중 : &amp;#8220;Incomplete&amp;#8221;로 표기되고 리뷰가 진행되는 상태를 말함. 최대
4주까지 걸린다고&amp;nbsp;함.&lt;/li&gt;
&lt;li&gt;버그가 또다시 발견된 경우 : 그렇다고함&amp;#8230; (뭐라말하기가&amp;#8230; 그냥 나같은
경우엔 리오픈으로 적고 프로세스&amp;nbsp;해버림&amp;#8230;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커밋할때 버그 진행상태를 남겨둘 수 있음. 자세한건 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages#Including_external_references"&gt;Including external
references&lt;/a&gt; 를&amp;nbsp;보면됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;청사진으로 새로운 기능을 붙일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이건 그냥 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Blueprints"&gt;Blueprints - wiki&lt;/a&gt; 를&amp;nbsp;보자.&lt;/li&gt;
&lt;li&gt;관심 없고, 내가 딱히 추가할 내용도 별로 없어서&amp;#8230; 우선은..&amp;nbsp;빈칸&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;변경을&amp;nbsp;시작해볼까~~~&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;첫 클론을 떠온거라면 상관없지만&amp;#8230; 뜬지 꽤됐으면 업스트림이랑 코드를 맞춰줘야
된다.&lt;ul&gt;
&lt;li&gt;안하면 일 두번하는 생긴다&amp;#8230; &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;내가 이글을 쓰고 있는 이유기도&amp;nbsp;하다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote update
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;span class="nv"&gt;$ &lt;/span&gt;git pull --ff-only origin master
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;그리고 브런치를 따는데, Blueprint는 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bp/&amp;lt;blueprint_name&amp;gt;&lt;/span&gt;&lt;/tt&gt;, Bug는
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bug/&amp;lt;bug-number&amp;gt;&lt;/span&gt;&lt;/tt&gt; 로&amp;nbsp;따주면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
git checkout -b TOPIC-BRANCH
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;변경 사항&amp;nbsp;커밋&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;제목은 50자 이내로 작성하고, 한줄 띄우고 내용을&amp;nbsp;작성해줘야된다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;Git commit messages&lt;/a&gt;&amp;nbsp;참고.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code text literal-block"&gt;
summary

brrrrrrbrrrrrra

&amp;lt;if blueprint&amp;gt;
Implements: blueprint &amp;lt;blueprint_name&amp;gt;
&amp;lt;if bug&amp;gt;
Closes-Bug: #&amp;lt;bug_number&amp;gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Change-id&lt;/span&gt;&lt;/tt&gt; 는 &lt;tt class="docutils literal"&gt;git review&lt;/tt&gt; 로 올린뒤에 알아서 붙여주는거라 따로 적을 필요는&amp;nbsp;없다.&lt;/li&gt;
&lt;li&gt;리뷰에 반려가되어서 다시 커밋을 해야되는 경우에는 &lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;--amend&lt;/span&gt;&lt;/tt&gt;
오셤으로&amp;nbsp;해주면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;리뷰&amp;nbsp;등록&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git reivew&lt;/tt&gt; 로 하면 &lt;tt class="docutils literal"&gt;review.openstack.org&lt;/tt&gt; 에 올라가 있는 것을 확인할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;변경사항이&amp;nbsp;있을때&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;커밋 메시지에 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Change-Id&lt;/span&gt;&lt;/tt&gt; 가없을때는 붙여넣기 해준 다음 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--amend&lt;/span&gt;&lt;/tt&gt; 로&amp;nbsp;커밋.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나머지 자세한 것들은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 확인하도록하자. 이것도 뭐&amp;#8230; 내가
까먹으니까 작성한&amp;nbsp;것이기도하지만&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 22:29:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-13:2015/02/13/openstack-commit/</guid><category>OpenStack</category><category>commit</category></item><item><title>gitworkflows(7)에대한 이야기</title><link>http://ujuc.github.io/2015/02/02/gitworkflows7/</link><description>&lt;p&gt;페이스북의 &lt;a class="reference external" href="https://www.facebook.com/groups/kgugs"&gt;Korea Git User Group&lt;/a&gt; 에 &lt;tt class="docutils literal"&gt;gitworkflows&lt;/tt&gt; 에 대한 내용을
이야기하면서 슬라이드 &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt; 를 하나&amp;nbsp;올려주셨다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The gitworkflows(7)&amp;nbsp;illustrated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;정말 슬라이드를 이렇게까지 만들어주는건 정말 좋은듯. 특히 발표 당시에 그것을
못들었다고 해도 이 슬라이드만 보고도 알 수 있어서 더 좋음. 물론 발표용이라면
이것보다는 간단히 구성하는게&amp;nbsp;맞겠지만&amp;#8230;&lt;/p&gt;
&lt;p&gt;그렇다고 이걸 쓰고 싶지는 않다. 뭔가 복잡하다. 이게 어디서 좋은거지 라는&amp;nbsp;생각이든다.&lt;/p&gt;
&lt;p&gt;브런치 전략은 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 가 가장 쉽게 접근 할 수&amp;nbsp;잇는듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://git-scm.com/docs/gitworkflows/1.8.2.1"&gt;gitworkflows(7) Manual Page&lt;/a&gt; &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt; 를&amp;nbsp;확인하도록하자.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;원문이 일어로 보인다. &lt;a class="reference external" href="(http://www.slideshare.net/ktateish/gitworkflows7)"&gt;図解gitworkflows(7)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;문서가 1.8.2.1 이전과 이후로 많은 부분이 변경된 것으로 보인다. 그만큼
길어졌고 추가된 기능들이 많은것을 볼수 있으니, 관련해서 한번 찾아보는 것이
필요.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Tue, 31 Mar 2015 00:13:00 +0900</pubDate><guid>tag:ujuc.github.io,2015-02-02:2015/02/02/gitworkflows7/</guid><category>git</category><category>workflow</category></item></channel></rss>