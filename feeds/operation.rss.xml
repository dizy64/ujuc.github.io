<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>잘 밤에 쓸데없는 생각하기...</title><link>https://ujuc.github.io/</link><description>Anythink, Everythink!</description><lastBuildDate>Sat, 18 Jun 2016 02:13:00 +0900</lastBuildDate><item><title>Qualcomm Atheros 드라이버 설치 - 업글</title><link>https://ujuc.github.io/2016/06/18/qualcomm_atheros_deu-ra-i-beo_seor-ci_-_eob-geur/</link><description>&lt;p&gt;&lt;a href="http://ujuc.github.io/2016/04/22/install-wireless-qualcomm-atheros-device-driver-on-lenovo-y700/"&gt;이전글&lt;/a&gt;로 글로 설치를 하고 썼으나 제대로된 펌웨어가 아닌지 설정을 해주고 설치했어야 했는데 그렇지 않아서 인지 1Mbps 로만 작동을&amp;nbsp;하였다.&lt;/p&gt;
&lt;p&gt;몇번 재설치 끝에 귀찮아서 다시 우분투를 설치중. &lt;a href="http://ask.ubuntu.com/questions/708061/aualcomm-atheros-device-168c0042-rev-30-wi-fi-driver-installation"&gt;스택오프플로 글&lt;/a&gt;이 업데이트가 되어있어 설치를 하였더니 원 속도까지&amp;nbsp;나오더라.&lt;/p&gt;
&lt;p&gt;그런데 이게 좀&amp;nbsp;그런게&amp;#8230;&lt;/p&gt;
&lt;p&gt;커널은 4.2이상. 16.04가 버전업되면서 커널도 업글이되어서 이건&amp;nbsp;넘어갔다.&lt;/p&gt;
&lt;p&gt;Qualcomm atheros 10k 드라이버가 들어있는 패키지는 &lt;code&gt;linux-firmware 1.158&lt;/code&gt;. 16.04에서 공식 지원하는 버전은 &lt;code&gt;1.157&lt;/code&gt;. 아마 6개월쯤 지나면 이것도 올라가겠지만 지금은 올라가지 않았으니. &lt;code&gt;1.158&lt;/code&gt;은 16.10에 추가될 패키지로 지금은 테스팅 버전이다. 이것을 가져다가 설치하면&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;어짜피 기본 내용만 맞으면되니 &lt;code&gt;dpkg&lt;/code&gt;를 이용해서&amp;nbsp;설치해주면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://mirrors.kernel.org/ubuntu/pool/main/l/linux-firmware/linux-firmware_1.158_all.deb
sudo dpkg -i linux-firmware_1.158_all.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 리붓해주면 손쉽게&amp;#8230; 설치가&amp;nbsp;가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고: &lt;a href="http://packages.ubuntu.com/search?keywords=linux-firmware"&gt;Ubuntu&amp;nbsp;package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sat, 18 Jun 2016 02:13:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2016-06-18:2016/06/18/qualcomm_atheros_deu-ra-i-beo_seor-ci_-_eob-geur/</guid><category>lenovo</category><category>ubuntu</category><category>qualcomm</category><category>driver</category><category>wireless</category><category>16.04</category></item><item><title>Install wireless Qualcomm Atheros device driver on Lenovo Y700</title><link>https://ujuc.github.io/2016/04/22/install-wireless-qualcomm-atheros-device-driver-on-lenovo-y700/</link><description>&lt;p&gt;새롭게 컴퓨터를 구입했다. Lenovo ideapad Y700. 문제는 다른 컴퓨터들은 다른 모듈이 연결되어있는데. 이 컴만 그런건지 아니면 일정 라인이상만 그런건지 모르겠으나, Qualcomm Atheros가 연결되어있어 커널에서 wifi를 잡지못하는 문제가&amp;nbsp;발생했다.&lt;/p&gt;
&lt;p&gt;Ubuntu 16.04를 사용했음에도 불구하고 잡히지 않았던건, 커널버전 4.4.2이상이어야 해당 드라이버가 돌아가는데&amp;#8230; Ubuntu 16.04버전이 4.4.0&amp;#8230; 그래서 백포트하고, 드라이버를 옮겨주는것으로&amp;nbsp;해결.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ask.ubuntu.com/questions/708061/aualcomm-atheros-device-168c0042-rev-30-wi-fi-driver-installation"&gt;Qualcomm Atheros Device [168c:0042] (rev 30) Wi-Fi dirver installation&lt;/a&gt; 에서 말하는 작업을&amp;nbsp;설치해주면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install build-essential linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt; git
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;options ath10k_core skip_otp=y&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/modprobe.d/ath10k_core.conf
wget https://www.kernel.org/pub/linux/kernel/projects/backports/stable/v4.4.2/backports-4.4.2-1.tar.gz
tar -zxvf backports-4.4.2-1.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; backports-4.4.2-1
make defconfig-wifi
make
sudo make install
git clone https://github.com/kvalo/ath10k-firmware.git
sudo cp -r ath10k-firmware/QCA9377 /lib/firmware/ath10k/
sudo cp /lib/firmware/ath10k/QCA9377/hw1.0/firmware-5.bin_WLAN.TF.1.0-00267-1 /lib/firmware/ath10k/QCA9377/hw1.0/firmware-5.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고&amp;nbsp;하나더&amp;#8230;&lt;/p&gt;
&lt;p&gt;이건 위에껄 하고 안되면 추가해주도록&amp;nbsp;하자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; blacklist ideapad_laptop &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/modprobe.d/blacklist.conf
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Fri, 22 Apr 2016 22:59:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2016-04-22:2016/04/22/install-wireless-qualcomm-atheros-device-driver-on-lenovo-y700/</guid><category>lenovo</category><category>ubuntu</category><category>qualcomm</category><category>driver</category><category>wireless</category><category>16.04</category></item><item><title>Ubuntu-Debian 패키지 매니저 apt 사용해보기</title><link>https://ujuc.github.io/2016/04/17/ubuntu-debian-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80-apt-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/</link><description>&lt;p&gt;기본적으로 &lt;code&gt;apt&lt;/code&gt; 패키지가 설치되어있었지만&amp;#8230; 사용하지 않았었다. 여기저기서 &lt;code&gt;apt-get&lt;/code&gt; 같은 명령어를 알려줬기에&amp;#8230; 그리고 얼마안되기도 했고, 그 간단한 사용법에 대해서 남겨두려고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;참고는 &lt;a href="http://www.tecmint.com/apt-advanced-package-command-examples-in-ubuntu/"&gt;15 Examples of How to Use New Advanced Package Tool (&lt;span class="caps"&gt;APT&lt;/span&gt;) in Ubuntu/Debian&lt;/a&gt; 을 사용함. 기본적으로 되는 &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html"&gt;Ubuntu man&lt;/a&gt; 페이지는 끼고&amp;nbsp;살자&amp;#8230;&lt;/p&gt;
&lt;h2 id="1"&gt;1. 패키지&amp;nbsp;설치&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install glances
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;항상 사용하던건 &lt;code&gt;apt-get&lt;/code&gt; 명령어로 설치를 하는거였는데 4글자 줄엇다!
&lt;code&gt;sudo aptitude install&lt;/code&gt; 로도 가능하다만&amp;#8230; 이렇게 하는 사람들&amp;nbsp;잘못봤다.&lt;/p&gt;
&lt;h2 id="2"&gt;2. 패키지가 설치된 위치&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt content glances
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어는 &lt;code&gt;dpkg -L&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="3"&gt;3. 패키지 디펜던시&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt depends glances
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어가 &lt;code&gt;apt-get check&lt;/code&gt;, &lt;code&gt;dpkg -C&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="4"&gt;4. 패키지&amp;nbsp;찾기&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt search openstack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어는 &lt;code&gt;apt-cache search&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="5"&gt;5. 패키지 정보&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt show firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어 &lt;code&gt;apt-cache show&lt;/code&gt;, &lt;code&gt;dpkg -p&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="6"&gt;6. 깨진 디펜던시가 있는지&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt check firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이거와 대응되는게 있는지&amp;nbsp;잘모르겠다.&lt;/p&gt;
&lt;h2 id="7"&gt;7. 제공된 패키지에서 빠진 패키지에 대한 목록&amp;nbsp;보여주기&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt recommends apache2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="8"&gt;8. 패키지 버전&amp;nbsp;체크&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt version firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="9"&gt;9. 시스템 패키지&amp;nbsp;업데이트&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get update&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="10"&gt;10. 시스템&amp;nbsp;업그레이드&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get upgrade&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="11"&gt;11. 커널 버전까지 시스템&amp;nbsp;업그레이드&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt full-upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get dist-upgrade&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="12"&gt;12. 사용하지 않는 페키지&amp;nbsp;삭제&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt autoremove
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get autoremove&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="13"&gt;13. 다운로드된 페키지에서 오래된 저장소&amp;nbsp;삭제&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt autoclean
sudo apt clean
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get clean&lt;/code&gt;, &lt;code&gt;apt-get autoclean&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="14"&gt;14. 패키지 구성파일까지&amp;nbsp;삭제&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt purge glance
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-purge&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="15-deb-160502"&gt;15. deb 패키지 설치 (작동이 안된다&amp;#8230;&amp;nbsp;-160502)&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt deb atom-amd64.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;dpkg&lt;/code&gt; 에서&amp;nbsp;찾으면될듯..&lt;/p&gt;
&lt;h2 id="16"&gt;16.&amp;nbsp;사용법은&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 사용법을 찾아서 작업하면 될것으로&amp;nbsp;보여짐.&lt;/p&gt;
&lt;h2 id="_1"&gt;맺음&lt;/h2&gt;
&lt;p&gt;동일한 명령어가 여러가지 존재하고 사용하는 방법에 따라 달라지는 것으로 보여지는데&amp;#8230;
패키지 메니저가 &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;aptitude&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;로 나눠져있으니 편한걸로.. 그리고 설치되어있는걸로 사용하면될&amp;nbsp;듯.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Sun, 17 Apr 2016 12:23:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2016-04-17:2016/04/17/ubuntu-debian-패키지-매니저-apt-사용해보기/</guid><category>ubuntu</category><category>debian</category><category>apt</category><category>system</category></item><item><title>un~ 너는 뭐니?</title><link>https://ujuc.github.io/2016/02/03/un-%EB%84%88%EB%8A%94-%EB%AD%90%EB%8B%88/</link><description>&lt;p&gt;모르겠다. 얼마 안됐다. 분명 이전에는 없었다. 그런데 언제부터인가. &lt;code&gt;.blabla.un~&lt;/code&gt;이라는 파일이 생성되기 시작했다. 그래서&amp;nbsp;찾았다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vimhelp.appspot.com/vim_faq.txt.html#faq-7.2"&gt;Vimhelp -&amp;nbsp;faq-7.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;수정하고 저장할때마다 &lt;code&gt;un~&lt;/code&gt; 접미사가 붙은 파일이 생간다는 이야기에 대한 내용이다. undo 기능을 사용하기위해서 vim에서 사용하는 파일이라고 한다. 그래서 열었더니 이상한 것들만&amp;nbsp;보여줬구나&amp;#8230;&lt;/p&gt;
&lt;p&gt;끄는 방법은 &lt;code&gt;:set noundofile&lt;/code&gt;을 처주거나 vimrc 파일에 넣어두면된다. 그러면 관련 파일들이 생성되지 않는다. 기존에 있던것들은&amp;nbsp;지워야겠지만&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 03 Feb 2016 00:02:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2016-02-03:2016/02/03/un-너는-뭐니/</guid><category>vi</category><category>undo</category><category>vimrc</category></item><item><title>unattended-upgrade 써보자</title><link>https://ujuc.github.io/2016/01/29/unattended-upgrade-%EC%8D%A8%EB%B3%B4%EC%9E%90/</link><description>&lt;p&gt;AWS에서 서비스를 Ubuntu로 하고 있는데, 요즘 보안 이슈들이 계속 올라오고 있고,
그것에 대한 패치들도 많이 올라오고 있다. 사용하다가 서비스를 하고 있는 패키지들
을 업데이트를 할 수는 없고 (서비스에서 사용하는 패키지의 경우엔.. 답이 없다. 
했다가 무슨 소릴 들을지 모르기도하고 어디서 문제가 발생했는지 모르기도 하고)
보안 패치만큼은 하고&amp;nbsp;싶은데&amp;#8230;&lt;/p&gt;
&lt;p&gt;찾다보니 &lt;code&gt;unattended-upgrade&lt;/code&gt;를 사용해서 할 수가&amp;nbsp;있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manpages.ubuntu.com/manpages/lucid/man8/unattended-upgrade.8.html"&gt;Ubuntu manpage -&amp;nbsp;unattended-upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;사용법&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo unattended-upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;하게되면 알아서 보안 패치를 업그레이드하고 관련된 내용들을 &lt;code&gt;/var/log/unattended-upgrades.log&lt;/code&gt;에서 확인할 수 있다. 관련해서 추가적으로 만들어지는 내용들도 있고, 특정된 내용들을 구성할 수도&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;만약 설치를 하지 않고, 어떠한 보안업데트가 되는지를 확인하고 싶다면, 아래와 같은 명령어를 사용하여 업그레이드를&amp;nbsp;하면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo unattended-upgrade --dry-run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;왠만해서는 &lt;code&gt;--dry-run&lt;/code&gt; 옵션을 이용하여, 업그레이드를 할 수 있도록 확인해주면 되는데, 쉽지는&amp;nbsp;않지&amp;#8230;&lt;/p&gt;
&lt;p&gt;단점은 아직 1.0이 아니다. 그래서 그런지 외부로 출력되는게 없고, 전부 log파일로만&amp;nbsp;나온다&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Fri, 29 Jan 2016 22:35:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2016-01-29:2016/01/29/unattended-upgrade-써보자/</guid><category>ubuntu</category><category>manage</category><category>upgrade</category><category>security</category><category>command</category></item><item><title>mysql 복제 오류</title><link>https://ujuc.github.io/2016/01/28/mysql-%EB%B3%B5%EC%A0%9C-%EC%98%A4%EB%A5%98/</link><description>&lt;p&gt;오랜만에 설정할 일이 있어서 RDS로 접속했더니&amp;#8230; &lt;span class="caps"&gt;RDS&lt;/span&gt; 인스턴스에서 error 이벤트가
발생하고 있었다. 복제 기능을 사용하면서 신경안 쓸려고 하고 있었는데&amp;#8230; 여기서&amp;nbsp;문제가&amp;#8230;&lt;/p&gt;
&lt;p&gt;RDS를 제외하고 관련 내용을 찾았더니, &lt;code&gt;my.cnf&lt;/code&gt; 파일에다가 뭘 넣고 수정하라고
한다. 이렇게 할려면 RDS는 안된다. 명령어를 입력하라는 말도 있었다. 그런데&amp;#8230;
이넘의 RDS에서 사용자는 말그대로 사용자일 뿐이다. 어떠한 database에 대한 수정을
가할 수 있는 권한 자체가 없다. 그 사용자 이름을 &lt;code&gt;root&lt;/code&gt;로 했다고 해도&amp;nbsp;말이다.&lt;/p&gt;
&lt;p&gt;결국.. 찾다 돌아온 곳은.
&lt;a href="http://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/mysql_rds_skip_repl_error.html"&gt;Amazon Relational Database Service - mysql_rds_skip_repl_error&lt;/a&gt;
부분. 그냥 접근해서 &lt;code&gt;CALL mysql.rds_skip_repl_error&lt;/code&gt; 입력하면&amp;nbsp;된단다.&lt;/p&gt;
&lt;p&gt;그런데 이건 mysql에서만 발생하는 오류인것같다. mariadb에서는 해당 오류가 없다.
mariadb를 사용하는게 정신 건강에&amp;nbsp;좋은&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 28 Jan 2016 01:10:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2016-01-28:2016/01/28/mysql-복제-오류/</guid><category>aws</category><category>rds</category><category>mysql</category><category>mariadb</category><category>replication</category></item><item><title>Stderr check in zshell</title><link>https://ujuc.github.io/2016/01/27/stderr-check-in-zshell/</link><description>&lt;p&gt;Shell로 zsh를 사용중이다. 얼마전부터 개발 환경 설정을 해놓고 이곳저곳에서
쓰다보니 해당 개발 환경이 꾸며져있지 않으면, 없다고 해당 문구가&amp;nbsp;출력된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stderr" src="https://ujuc.github.io/img/2016-01-26_shell_error.png" /&gt;&lt;/p&gt;
&lt;p&gt;은근히 신경쓰인다. 만약 두개를 설정해놨는데 둘다 없다면 줄이 두 줄로&amp;nbsp;늘어난다.&lt;/p&gt;
&lt;p&gt;그래서 찾았다. 찾다보니 내가 무심코 사용했던 내용에대해 조금더 볼 기회가&amp;nbsp;생긴듯.&lt;/p&gt;
&lt;p&gt;우선 Shell에서 기본 I/O 스트림을 통해서 나오는 값들에대해서 다음 숫자로 제어할
수&amp;nbsp;있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Handle&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;stdin&lt;/td&gt;
&lt;td&gt;Standard input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;stdout&lt;/td&gt;
&lt;td&gt;Standard output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;stderr&lt;/td&gt;
&lt;td&gt;Standard error&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;간단히 하자.
go가 설치되어 있는지 확인을 한다. 제대로 설치됐다면 stdout으로 설치된 경로가 나올&amp;nbsp;것이다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex1_1" src="https://ujuc.github.io/img/2016-01-26_ex1_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;요놈을 안나오게&amp;nbsp;해보자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which go 1&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex1_2" src="https://ujuc.github.io/img/2016-01-26_ex1_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;오~~~&lt;/p&gt;
&lt;p&gt;stderr 값이 나오면 안나오게 할려고 보면&amp;#8230; 이건 설치가 되어있으니&amp;#8230;&amp;nbsp;없는걸로&amp;#8230;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which rbenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex2_1" src="https://ujuc.github.io/img/2016-01-26_ex2_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;이걸 위와 같이 &lt;code&gt;1&lt;/code&gt; 을&amp;nbsp;사용하면&amp;#8230;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which rbenv 1&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex2_2" src="https://ujuc.github.io/img/2016-01-26_ex2_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;음&amp;#8230; 출력되는 문구가 stderr로 나오는 건줄 알았는데 아닌갑다. &lt;code&gt;1&lt;/code&gt;로 출력되는걸&amp;nbsp;막으라했더니&amp;#8230;&lt;/p&gt;
&lt;p&gt;그럼 Python에서는 어디로&amp;nbsp;나올까?&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sub&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;check_rbenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_rbenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;음?? 암것도&amp;nbsp;안나온다&amp;#8230;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;출력값이 256이라니&amp;#8230; 혹시나 해서 봤더니 8bit밀란다. 저걸 밀면 1이 떨어지는데&amp;#8230;
리눅스에서 반환값이 1이면 비정상 종료일때로 알고 있다. 고로니 저넘은 제대로
실행된 아이가 아니라는&amp;nbsp;말씀&amp;#8230;&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;which&lt;/code&gt; 명령어를 사용하여 명령어를 실행하게 되면, 정상종료면 위치를
말해줄꺼고 비정상 종료면 stdout으로 없다는 메시지를 남기고 비정상 종료를
시킨다고 해석하면&amp;nbsp;될듯.&lt;/p&gt;
&lt;p&gt;결국 내가 하고 싶은데로 안되는거네&amp;#8230;&amp;nbsp;이런!&lt;/p&gt;
&lt;p&gt;다른 방법으로 찾아야지 뭐 별수 있나&amp;#8230; 그래도 이번에 건진건 저렇게 숫자를
사용해서 내가 원하는 값들만 넣을 수 있는 방법을 찾았다는거&amp;#8230; 그정도면 1시간동안
작업한 것에 대한 내용은&amp;nbsp;될듯.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Wed, 27 Jan 2016 00:57:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2016-01-27:2016/01/27/stderr-check-in-zshell/</guid><category>zsh</category><category>operation</category></item><item><title>[Monitoring] SkwiSSH 설치 및 구성</title><link>https://ujuc.github.io/2014/02/28/skwissh-install-n-config/</link><description>&lt;h1 id="skwissh"&gt;&lt;a href="https://github.com/rsaikali/django-skwissh"&gt;SkwiSSH&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;오늘 Facebook에 공유가된 Monitoring Tool. Django에서 App으로 돌릴 수 있고, 참 깔ㄹ끔하기에 회사에서 서버 볼 때 사용할까하여&amp;nbsp;구성해봤다.&lt;/p&gt;
&lt;p&gt;코드로는 Django v1.5와  v1.5.1을 지원한다고 작성해놨는데 &lt;code&gt;setup.py&lt;/code&gt;를 사용하여 구성하게 되면 Django v1.6을 설치하라며 에러문구가&amp;nbsp;발생한다.&lt;/p&gt;
&lt;p&gt;그리고 외부 서버를 추가하기 위해서 &lt;code&gt;server_ip:22&lt;/code&gt;를 입력해줘야지 외부 서버에 ssh로 접근하여 값들을 읽어오게&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;아직은 부족한 점이&amp;nbsp;많다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensor(명령어를 날려서 값을 받아오는 worker를 의미한다.) 추가하고 변경하려면 변경사항이 적용이 안되는&amp;nbsp;현상.&lt;/li&gt;
&lt;li&gt;Sensor들의 정렬을 임의로 할 수 없다는 것. (오름차순으로&amp;nbsp;구성되어있다.)&lt;/li&gt;
&lt;li&gt;기본 명령어 날리는게 1분간격으로 수정할만한 탭이&amp;nbsp;안보인다.&lt;/li&gt;
&lt;li&gt;기본 DB로 SQLite3 파일을 사용하는데 점점 커지는 모습을 확인 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;bash를 사용할 줄 안다면 정말 쉽게 사용이 가능하다.&lt;ul&gt;
&lt;li&gt;명령을 SSH로 날리기에 그쪽 서버 콘솔로 리턴값을 넘길 수 있는 프로그램이라면 어떻게든&amp;nbsp;사용하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 글에서는 Sensor에 명령어와 파셔 세팅은 작성하지&amp;nbsp;않았다.&lt;/p&gt;
&lt;h2 id="_1"&gt;기본&amp;nbsp;구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;OS&lt;/span&gt;: Ubuntu 12.04.4&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;Install&amp;nbsp;Package&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;패키지&amp;nbsp;설치&lt;/h3&gt;
&lt;h4 id="django"&gt;Django&amp;nbsp;설치&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip isntall Django
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="django-skwissh"&gt;Django-skwissh&amp;nbsp;설치&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install buid-essential python-dev
$ git clone https://github.com/rsaikali/django-skwissh.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; django-skwissh
$ sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="django_1"&gt;Django&amp;nbsp;설정&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin.py startproject mysite
$ &lt;span class="nb"&gt;cd&lt;/span&gt; mysite
$ vi mysql/settings.py

&lt;span class="nv"&gt;INSTALL_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;kronos&amp;#39;&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;skwissh&amp;#39;&lt;/span&gt;,
&lt;span class="o"&gt;)&lt;/span&gt;

$ vi mysite/urls.py

&lt;span class="c1"&gt;# Skwissh&lt;/span&gt;
url&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skwissh&amp;#39;&lt;/span&gt;, include&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skwissh.urls&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;데이터 베이스&amp;nbsp;설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.p syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Skwissh 테스트&amp;nbsp;설치&lt;/li&gt;
&lt;li&gt;이작업을 하면 crontab에 테스크가&amp;nbsp;등록된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py installtask
&lt;span class="c1"&gt;# crontab에 등록되었는지 확인&lt;/span&gt;
$ crontab -l
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Django 서버&amp;nbsp;작동&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python mange.py runserver 0.0.0.0:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;참고&amp;nbsp;페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rsaikali/django-skwissh"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rsaikali.github.io/django-skwissh/"&gt;Gitpage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ujuc</dc:creator><pubDate>Thu, 03 Mar 2016 22:08:00 +0900</pubDate><guid isPermaLink="false">tag:ujuc.github.io,2014-02-28:2014/02/28/skwissh-install-n-config/</guid><category>python</category><category>monitoring</category><category>ssh</category><category>django</category></item></channel></rss>